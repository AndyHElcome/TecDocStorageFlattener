using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Text;
using TecDocStorageFlattener.Models.Tecdoc;

// This file is automatically generated - manual changes may be lost

namespace TafLoader.Models.Tecdoc
{
    partial class TecdocDbContext
    {
        protected void SetupPrimaryKeys(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ColDef>().HasKey(c => new { c.Table, c.Pos, });
            modelBuilder.Entity<T001>().HasKey(c => new { c.BrandNo, c.Version, c.VersionDateYYYYMMDD, c.ManufacturerNo, c.BrandName, c.ReferenceVersion, });
            modelBuilder.Entity<T005>().HasKey(c => new { c.DelTypeKey, c.DelNo, c.DelStatusKey, });
            modelBuilder.Entity<T010>().HasKey(c => new { c.CountryCode, });
            modelBuilder.Entity<T010>().Property(c => c.CountryCode).ValueGeneratedNever();
            modelBuilder.Entity<T012>().HasKey(c => new { c.CTermNo, c.CountryCode, c.LangNo, });
            modelBuilder.Entity<T013>().HasKey(c => new { c.GroupCountryCode, c.CountryCode, });
            modelBuilder.Entity<T014>().HasKey(c => new { c.DocumentType, });
            modelBuilder.Entity<T014>().Property(c => c.DocumentType).ValueGeneratedNever();
            modelBuilder.Entity<T020>().HasKey(c => new { c.LangNo, });
            modelBuilder.Entity<T020>().Property(c => c.LangNo).ValueGeneratedNever();
            modelBuilder.Entity<T030>().HasKey(c => new { c.TermNo, c.LangNo, });
            modelBuilder.Entity<T031>().HasKey(c => new { c.LogisticsTermNo, c.LangNo, });
            modelBuilder.Entity<T035>().HasKey(c => new { c.TextModuleNo, c.LangNo, c.SeqNo, });
            modelBuilder.Entity<T040>().HasKey(c => new { c.BrandNo, c.AddressTypeKey, });
            modelBuilder.Entity<T042>().HasKey(c => new { c.CountryCode, });
            modelBuilder.Entity<T042>().Property(c => c.CountryCode).ValueGeneratedNever();
            modelBuilder.Entity<T043>().HasKey(c => new { c.BrandNo, c.AddressTypeKey, c.CountryCode, });
            modelBuilder.Entity<T050>().HasKey(c => new { c.CritNo, });
            modelBuilder.Entity<T050>().Property(c => c.CritNo).ValueGeneratedNever();
            modelBuilder.Entity<T051>().HasKey(c => new { c.KeyTableNo, });
            modelBuilder.Entity<T051>().Property(c => c.KeyTableNo).ValueGeneratedNever();
            modelBuilder.Entity<T052>().HasKey(c => new { c.KeyTableNo, c.Key, });
            modelBuilder.Entity<T053>().HasKey(c => new { c.LogisticsCritNo, });
            modelBuilder.Entity<T053>().Property(c => c.LogisticsCritNo).ValueGeneratedNever();
            modelBuilder.Entity<T100>().HasKey(c => new { c.ManufacturerNo, });
            modelBuilder.Entity<T100>().Property(c => c.ManufacturerNo).ValueGeneratedNever();
            modelBuilder.Entity<T103>().HasKey(c => new { c.KbaNo, c.ManufacturerNo, });
            modelBuilder.Entity<T110>().HasKey(c => new { c.KModNo, });
            modelBuilder.Entity<T110>().Property(c => c.KModNo).ValueGeneratedNever();
            modelBuilder.Entity<T115>().HasKey(c => new { c.LinkageTargetNo, c.OriginalLinkageTargetType, });
            modelBuilder.Entity<T120>().HasKey(c => new { c.KTypeNo, });
            modelBuilder.Entity<T120>().Property(c => c.KTypeNo).ValueGeneratedNever();
            modelBuilder.Entity<T121>().HasKey(c => new { c.KbaNo, c.KTypeNo, });
            modelBuilder.Entity<T122>().HasKey(c => new { c.KTypeNo, c.CountryCode, });
            modelBuilder.Entity<T123>().HasKey(c => new { c.TypMine, c.KTypeNo, });
            modelBuilder.Entity<T124>().HasKey(c => new { c.KTypeNo, c.CountryCode, });
            modelBuilder.Entity<T125>().HasKey(c => new { c.KTypeNo, c.SeqNo, });
            modelBuilder.Entity<T126>().HasKey(c => new { c.ChTyp, c.KTypeNo, });
            modelBuilder.Entity<T127>().HasKey(c => new { c.NLTyp, c.KTypeNo, });
            modelBuilder.Entity<T128>().HasKey(c => new { c.STyp, c.KTypeNo, });
            modelBuilder.Entity<T129>().HasKey(c => new { c.STyp, c.KTypeNo, });
            modelBuilder.Entity<T140>().HasKey(c => new { c.KModNo, });
            modelBuilder.Entity<T140>().Property(c => c.KModNo).ValueGeneratedNever();
            modelBuilder.Entity<T143>().HasKey(c => new { c.KModNo, c.CountryCode, c.ModelType, });
            modelBuilder.Entity<T144>().HasKey(c => new { c.KTypeNo, });
            modelBuilder.Entity<T144>().Property(c => c.KTypeNo).ValueGeneratedNever();
            modelBuilder.Entity<T145>().HasKey(c => new { c.KTypeNo, c.CountryCode, c.ModelType, });
            modelBuilder.Entity<T146>().HasKey(c => new { c.BodyTypeKey, c.KModNo, });
            modelBuilder.Entity<T147>().HasKey(c => new { c.DriveTypeKey, c.KTypeNo, });
            modelBuilder.Entity<T155>().HasKey(c => new { c.EngineNo, });
            modelBuilder.Entity<T155>().Property(c => c.EngineNo).ValueGeneratedNever();
            modelBuilder.Entity<T156>().HasKey(c => new { c.EngineNo, c.CountryCode, });
            modelBuilder.Entity<T160>().HasKey(c => new { c.AxleNo, });
            modelBuilder.Entity<T160>().Property(c => c.AxleNo).ValueGeneratedNever();
            modelBuilder.Entity<T161>().HasKey(c => new { c.AxleNo, c.SortNo, c.BodyType, });
            modelBuilder.Entity<T162>().HasKey(c => new { c.AxleNo, c.SeqNo, c.SortNo, });
            modelBuilder.Entity<T163>().HasKey(c => new { c.AxleNo, c.SeqNo, });
            modelBuilder.Entity<T164>().HasKey(c => new { c.NTypeNo, c.SeqNo, c.AxleNo, c.CountryCode, });
            modelBuilder.Entity<T180>().HasKey(c => new { c.LinkageTargetType, c.LinkageTargetNo, c.PowerOutputTypeKey, c.FuelTypeKey, });
            modelBuilder.Entity<T200>().HasKey(c => new { c.PartNo, });
            modelBuilder.Entity<T200>().Property(c => c.PartNo).ValueGeneratedNever();
            modelBuilder.Entity<T201>().HasKey(c => new { c.PartNo, c.PriceTypeKey, c.CountryCode, c.CurrencyCode, c.PriceValidFromDateYYYYMMDD, c.PriceUnitKey, c.QuantityUnitKey, });
            modelBuilder.Entity<T202>().HasKey(c => new { c.PartNo, c.CountryCode, });
            modelBuilder.Entity<T203>().HasKey(c => new { c.PartNo, c.ManufacturerNo, c.SortNo, c.CountryCode, });
            modelBuilder.Entity<T204>().HasKey(c => new { c.PartNo, c.SupersededPartNo, c.CountryCode, });
            modelBuilder.Entity<T205>().HasKey(c => new { c.PartNo, c.SeqNo205, });
            modelBuilder.Entity<T206>().HasKey(c => new { c.PartNo, c.SortNo, c.CountryCode, });
            modelBuilder.Entity<T207>().HasKey(c => new { c.PartNo, c.TradeNumber, c.CountryCode, });
            modelBuilder.Entity<T208>().HasKey(c => new { c.PartNo, c.SeqNo205, c.SeqNo, c.SortNo, });
            modelBuilder.Entity<T209>().HasKey(c => new { c.PartNo, c.GTIN, c.CountryCode, });
            modelBuilder.Entity<T210>().HasKey(c => new { c.PartNo, c.SortNo, });
            modelBuilder.Entity<T211>().HasKey(c => new { c.PartNo, c.GenArtNo, });
            modelBuilder.Entity<T212>().HasKey(c => new { c.Id, });
            modelBuilder.Entity<T212>().HasIndex(c => new { c.PartNo, c.CountryCode, });
            modelBuilder.Entity<T213>().HasKey(c => new { c.PartNo, c.SortNo, });
            modelBuilder.Entity<T214>().HasKey(c => new { c.PackArtNo, });
            modelBuilder.Entity<T214>().Property(c => c.PackArtNo).ValueGeneratedNever();
            modelBuilder.Entity<T215>().HasKey(c => new { c.PartNo, c.SeqNo205, c.CountryCode, });
            modelBuilder.Entity<T216>().HasKey(c => new { c.PackArtNo, c.CountryCode, });
            modelBuilder.Entity<T217>().HasKey(c => new { c.PartNo, c.SeqNo205, c.DocNo, c.DocumentType, c.LangNo, });
            modelBuilder.Entity<T218>().HasKey(c => new { c.PackArtNo, c.RecipientID, });
            modelBuilder.Entity<T222>().HasKey(c => new { c.PartNo, c.SeqNo222, c.SortNo222, });
            modelBuilder.Entity<T228>().HasKey(c => new { c.PartNo, c.SeqNo222, c.SortNo222, c.SeqNo, });
            modelBuilder.Entity<T231>().HasKey(c => new { c.DocNo, c.DocumentType, c.LangNo, });
            modelBuilder.Entity<T232>().HasKey(c => new { c.PartNo, c.SortNo, c.CountryCode, });
            modelBuilder.Entity<T233>().HasKey(c => new { c.DocNo, c.DocumentType, c.CoordinateNo, c.SeqNo, });
            modelBuilder.Entity<T301>().HasKey(c => new { c.NodeId, });
            modelBuilder.Entity<T301>().Property(c => c.NodeId).ValueGeneratedNever();
            modelBuilder.Entity<T302>().HasKey(c => new { c.NodeId, c.GenArtNo, });
            modelBuilder.Entity<T304>().HasKey(c => new { c.NodeId, c.GenArtNo, c.CritNo, c.CritVal, });
            modelBuilder.Entity<T305>().HasKey(c => new { c.QuickstartIconId, });
            modelBuilder.Entity<T305>().Property(c => c.QuickstartIconId).ValueGeneratedNever();
            modelBuilder.Entity<T306>().HasKey(c => new { c.TreeTypNo, c.QuickstartIconId, });
            modelBuilder.Entity<T307>().HasKey(c => new { c.TreeTypNo, c.QuickstartIconId, c.NodeId, });
            modelBuilder.Entity<T320>().HasKey(c => new { c.GenArtNo, });
            modelBuilder.Entity<T320>().Property(c => c.GenArtNo).ValueGeneratedNever();
            modelBuilder.Entity<T323>().HasKey(c => new { c.NormGenArtDescNo, });
            modelBuilder.Entity<T323>().Property(c => c.NormGenArtDescNo).ValueGeneratedNever();
            modelBuilder.Entity<T324>().HasKey(c => new { c.AssemblyGroupNo, });
            modelBuilder.Entity<T324>().Property(c => c.AssemblyGroupNo).ValueGeneratedNever();
            modelBuilder.Entity<T325>().HasKey(c => new { c.UsageNo, });
            modelBuilder.Entity<T325>().Property(c => c.UsageNo).ValueGeneratedNever();
            modelBuilder.Entity<T327>().HasKey(c => new { c.GenArtNo, c.SeqNo, c.LangNo, });
            modelBuilder.Entity<T328>().HasKey(c => new { c.GenArtNo, c.SeqNo, });
            modelBuilder.Entity<T329>().HasKey(c => new { c.GenArtNo, c.SeqNo, });
            modelBuilder.Entity<T330>().HasKey(c => new { c.GenArtNo, c.SeqNo, c.CritVal, });
            modelBuilder.Entity<T331>().HasKey(c => new { c.GenArtNo, c.CritNo, });
            modelBuilder.Entity<T332>().HasKey(c => new { c.GenArtNo, c.CritNo, c.CritVal, });
            modelBuilder.Entity<T333>().HasKey(c => new { c.CritNoType, c.CritNo, c.GenArtNo, });
            modelBuilder.Entity<T334>().HasKey(c => new { c.GenArtNo, });
            modelBuilder.Entity<T334>().Property(c => c.GenArtNo).ValueGeneratedNever();
            modelBuilder.Entity<T340>().HasKey(c => new { c.GenArtNo, c.EngineTypeKey, });
            modelBuilder.Entity<T400>().HasKey(c => new { c.LinkageType, c.LinkageValue, c.GenArtNo, c.PartNo, c.SeqNo, });
            modelBuilder.Entity<T401>().HasKey(c => new { c.LinkageType, c.LinkageValue, c.GenArtNo, c.PartNo, c.SeqNo, c.SortNo, c.CountryCode, });
            modelBuilder.Entity<T403>().HasKey(c => new { c.LinkageType, c.LinkageValue, c.GenArtNo, c.PartNo, c.SeqNo, c.CountryCode, });
            modelBuilder.Entity<T404>().HasKey(c => new { c.LinkageType, c.LinkageValue, c.GenArtNo, c.PartNo, });
            modelBuilder.Entity<T410>().HasKey(c => new { c.LinkageType, c.LinkageValue, c.GenArtNo, c.PartNo, c.SeqNo, c.SortNo, });
            modelBuilder.Entity<T432>().HasKey(c => new { c.LinkageType, c.LinkageValue, c.GenArtNo, c.PartNo, c.SeqNo, c.SortNo, c.CountryCode, });
            modelBuilder.Entity<T532>().HasKey(c => new { c.NTypeNo, });
            modelBuilder.Entity<T532>().Property(c => c.NTypeNo).ValueGeneratedNever();
            modelBuilder.Entity<T533>().HasKey(c => new { c.NTypeNo, c.CountryCode, });
            modelBuilder.Entity<T534>().HasKey(c => new { c.NTypeNo, c.CountryCode, });
            modelBuilder.Entity<T535>().HasKey(c => new { c.NTypeNo, c.NSubTypeNo, });
            modelBuilder.Entity<T536>().HasKey(c => new { c.NTypeNo, c.NSubTypeNo, c.CountryCode, });
            modelBuilder.Entity<T537>().HasKey(c => new { c.NTypeNo, c.NSubTypeNo, c.SeqNo, });
            modelBuilder.Entity<T538>().HasKey(c => new { c.NTypeNo, c.NSubTypeNo, c.ManIdNo, });
            modelBuilder.Entity<T539>().HasKey(c => new { c.NTypeNo, c.NSubTypeNo, c.ManIdNo, c.CountryCode, });
            modelBuilder.Entity<T540>().HasKey(c => new { c.NTypeNo, c.NSubTypeNo, c.SeqNo, });
            modelBuilder.Entity<T541>().HasKey(c => new { c.DriverCabNo, });
            modelBuilder.Entity<T541>().Property(c => c.DriverCabNo).ValueGeneratedNever();
            modelBuilder.Entity<T542>().HasKey(c => new { c.DriverCabNo, c.CountryCode, });
            modelBuilder.Entity<T543>().HasKey(c => new { c.NTypeNo, c.NSubTypeNo, c.SeqNo, });
            modelBuilder.Entity<T544>().HasKey(c => new { c.TransmissionNo, });
            modelBuilder.Entity<T544>().Property(c => c.TransmissionNo).ValueGeneratedNever();
            modelBuilder.Entity<T545>().HasKey(c => new { c.TransmissionNo, c.CountryCode, });
            modelBuilder.Entity<T546>().HasKey(c => new { c.NTypeNo, c.NSubTypeNo, c.SeqNo, });
            modelBuilder.Entity<T550>().HasKey(c => new { c.NTypeNo, c.NSubTypeNo, c.SeqNo, });
            modelBuilder.Entity<T551>().HasKey(c => new { c.NTypeNo, c.NSubTypeNo, c.SeqNo, });
            modelBuilder.Entity<T552>().HasKey(c => new { c.NTypeNo, c.NSubTypeNo, c.SeqNo, });
            modelBuilder.Entity<T553>().HasKey(c => new { c.NTypeNo, c.NSubTypeNo, c.SeqNo, });
            modelBuilder.Entity<T554>().HasKey(c => new { c.ManIdNo, });
            modelBuilder.Entity<T554>().Property(c => c.ManIdNo).ValueGeneratedNever();
            modelBuilder.Entity<T555>().HasKey(c => new { c.ManIdNo, c.CountryCode, });
        }

        #region DbSets
        public virtual DbSet<TableDef> TableDef => Set<TableDef>();
        public virtual DbSet<ColDef> ColDef => Set<ColDef>();
        public virtual DbSet<T001> T001 => Set<T001>();
        public virtual DbSet<T005> T005 => Set<T005>();
        public virtual DbSet<T010> T010 => Set<T010>();
        public virtual DbSet<T012> T012 => Set<T012>();
        public virtual DbSet<T013> T013 => Set<T013>();
        public virtual DbSet<T014> T014 => Set<T014>();
        public virtual DbSet<T020> T020 => Set<T020>();
        public virtual DbSet<T030> T030 => Set<T030>();
        public virtual DbSet<T031> T031 => Set<T031>();
        public virtual DbSet<T035> T035 => Set<T035>();
        public virtual DbSet<T040> T040 => Set<T040>();
        public virtual DbSet<T042> T042 => Set<T042>();
        public virtual DbSet<T043> T043 => Set<T043>();
        public virtual DbSet<T050> T050 => Set<T050>();
        public virtual DbSet<T051> T051 => Set<T051>();
        public virtual DbSet<T052> T052 => Set<T052>();
        public virtual DbSet<T053> T053 => Set<T053>();
        public virtual DbSet<T100> T100 => Set<T100>();
        public virtual DbSet<T103> T103 => Set<T103>();
        public virtual DbSet<T110> T110 => Set<T110>();
        public virtual DbSet<T115> T115 => Set<T115>();
        public virtual DbSet<T120> T120 => Set<T120>();
        public virtual DbSet<T121> T121 => Set<T121>();
        public virtual DbSet<T122> T122 => Set<T122>();
        public virtual DbSet<T123> T123 => Set<T123>();
        public virtual DbSet<T124> T124 => Set<T124>();
        public virtual DbSet<T125> T125 => Set<T125>();
        public virtual DbSet<T126> T126 => Set<T126>();
        public virtual DbSet<T127> T127 => Set<T127>();
        public virtual DbSet<T128> T128 => Set<T128>();
        public virtual DbSet<T129> T129 => Set<T129>();
        public virtual DbSet<T140> T140 => Set<T140>();
        public virtual DbSet<T143> T143 => Set<T143>();
        public virtual DbSet<T144> T144 => Set<T144>();
        public virtual DbSet<T145> T145 => Set<T145>();
        public virtual DbSet<T146> T146 => Set<T146>();
        public virtual DbSet<T147> T147 => Set<T147>();
        public virtual DbSet<T155> T155 => Set<T155>();
        public virtual DbSet<T156> T156 => Set<T156>();
        public virtual DbSet<T160> T160 => Set<T160>();
        public virtual DbSet<T161> T161 => Set<T161>();
        public virtual DbSet<T162> T162 => Set<T162>();
        public virtual DbSet<T163> T163 => Set<T163>();
        public virtual DbSet<T164> T164 => Set<T164>();
        public virtual DbSet<T180> T180 => Set<T180>();
        public virtual DbSet<T200> T200 => Set<T200>();
        public virtual DbSet<T201> T201 => Set<T201>();
        public virtual DbSet<T202> T202 => Set<T202>();
        public virtual DbSet<T203> T203 => Set<T203>();
        public virtual DbSet<T204> T204 => Set<T204>();
        public virtual DbSet<T205> T205 => Set<T205>();
        public virtual DbSet<T206> T206 => Set<T206>();
        public virtual DbSet<T207> T207 => Set<T207>();
        public virtual DbSet<T208> T208 => Set<T208>();
        public virtual DbSet<T209> T209 => Set<T209>();
        public virtual DbSet<T210> T210 => Set<T210>();
        public virtual DbSet<T211> T211 => Set<T211>();
        public virtual DbSet<T212> T212 => Set<T212>();
        public virtual DbSet<T213> T213 => Set<T213>();
        public virtual DbSet<T214> T214 => Set<T214>();
        public virtual DbSet<T215> T215 => Set<T215>();
        public virtual DbSet<T216> T216 => Set<T216>();
        public virtual DbSet<T217> T217 => Set<T217>();
        public virtual DbSet<T218> T218 => Set<T218>();
        public virtual DbSet<T222> T222 => Set<T222>();
        public virtual DbSet<T228> T228 => Set<T228>();
        public virtual DbSet<T231> T231 => Set<T231>();
        public virtual DbSet<T232> T232 => Set<T232>();
        public virtual DbSet<T233> T233 => Set<T233>();
        public virtual DbSet<T301> T301 => Set<T301>();
        public virtual DbSet<T302> T302 => Set<T302>();
        public virtual DbSet<T304> T304 => Set<T304>();
        public virtual DbSet<T305> T305 => Set<T305>();
        public virtual DbSet<T306> T306 => Set<T306>();
        public virtual DbSet<T307> T307 => Set<T307>();
        public virtual DbSet<T320> T320 => Set<T320>();
        public virtual DbSet<T323> T323 => Set<T323>();
        public virtual DbSet<T324> T324 => Set<T324>();
        public virtual DbSet<T325> T325 => Set<T325>();
        public virtual DbSet<T327> T327 => Set<T327>();
        public virtual DbSet<T328> T328 => Set<T328>();
        public virtual DbSet<T329> T329 => Set<T329>();
        public virtual DbSet<T330> T330 => Set<T330>();
        public virtual DbSet<T331> T331 => Set<T331>();
        public virtual DbSet<T332> T332 => Set<T332>();
        public virtual DbSet<T333> T333 => Set<T333>();
        public virtual DbSet<T334> T334 => Set<T334>();
        public virtual DbSet<T340> T340 => Set<T340>();
        public virtual DbSet<T400> T400 => Set<T400>();
        public virtual DbSet<T401> T401 => Set<T401>();
        public virtual DbSet<T403> T403 => Set<T403>();
        public virtual DbSet<T404> T404 => Set<T404>();
        public virtual DbSet<T410> T410 => Set<T410>();
        public virtual DbSet<T432> T432 => Set<T432>();
        public virtual DbSet<T532> T532 => Set<T532>();
        public virtual DbSet<T533> T533 => Set<T533>();
        public virtual DbSet<T534> T534 => Set<T534>();
        public virtual DbSet<T535> T535 => Set<T535>();
        public virtual DbSet<T536> T536 => Set<T536>();
        public virtual DbSet<T537> T537 => Set<T537>();
        public virtual DbSet<T538> T538 => Set<T538>();
        public virtual DbSet<T539> T539 => Set<T539>();
        public virtual DbSet<T540> T540 => Set<T540>();
        public virtual DbSet<T541> T541 => Set<T541>();
        public virtual DbSet<T542> T542 => Set<T542>();
        public virtual DbSet<T543> T543 => Set<T543>();
        public virtual DbSet<T544> T544 => Set<T544>();
        public virtual DbSet<T545> T545 => Set<T545>();
        public virtual DbSet<T546> T546 => Set<T546>();
        public virtual DbSet<T550> T550 => Set<T550>();
        public virtual DbSet<T551> T551 => Set<T551>();
        public virtual DbSet<T552> T552 => Set<T552>();
        public virtual DbSet<T553> T553 => Set<T553>();
        public virtual DbSet<T554> T554 => Set<T554>();
        public virtual DbSet<T555> T555 => Set<T555>();
        #endregion
    }
}
