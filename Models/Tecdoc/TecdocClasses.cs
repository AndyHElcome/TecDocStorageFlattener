using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Text;

// This file is automatically generated - manual changes may be lost

namespace TecDocStorageFlattener.Models.Tecdoc
{
    [AttributeUsage(AttributeTargets.Property)]
    public class TecdocFieldAttribute : Attribute
    {
        public string? Name { get; set; }
        public string? OldName { get; set; }
        public int Pos { get; set; }
        public int Length { get; set; }

        public TecdocFieldAttribute() { }

        public TecdocFieldAttribute(string name, int pos, int length)
        {
            Name = name;
            Pos = pos;
            Length = length;
        }
    }

    public partial class TableDef
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        public int Number { get; set; }
        [StringLength(256)]
        public string? Name { get; set; }
        [StringLength(512)]
        public string? Description { get; set; }
        public string? Notes { get; set; }

        public bool IsFromTecDoc { get; set; }
        public bool IsFromSupplier { get; set; }

        public int MaxLength { get; set; }

        public bool UseCustomPrimaryKey { get; set; }
    }

    public partial class ColDef
    {
        public int Table { get; set; }

        [StringLength(32)]
        public string? Name { get; set; }
        [StringLength(64)]
        public string? TdName { get; set; }
        [StringLength(64)]
        public string? TdNameOld { get; set; }
        public int Pos { get; set; }
        public int Length { get; set; }

        public int? SortIndex { get; set; }
        public int? PrimaryKeyIndex { get; set; }
        public int? DeltaKeyIndex { get; set; }

        public bool IsRequired { get; set; }
        public bool IsNumeric { get; set; }
        public bool IsText { get; set; }
        public bool IsUnicode { get; set; }
        public bool IsBool { get; set; }
        public bool IsDate { get; set; }
        public bool IsMonthDate { get; set; }
        public bool IsEndDate { get; set; }

        [StringLength(32)]
        public string? Constant { get; set; }

        public string? Description { get; set; }

        public int? ForeignTable { get; set; }

        public int? KeyTable { get; set; }
    }

    /// <summary>
    /// Header stating version and date
    /// </summary>
    /// <remarks>
    /// (*) Type ‘U’ starting  Data Release 0519 – type ‘C’ until then
    /// Comment:               Exactly 1 data table 001 must be present.
    ///                        The delete-flag in table 001 differs in the treatment from the delete-flags of the other
    ///                        tables. It indicates the deletion of a complete brand.
    /// 3  Reference Data Tables
    /// </remarks>
    public partial class T001 : IEquatable<T001>
    {
        /// <summary>
        /// Data Supplier Number Constant (-&gt; 040)
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DlNr", Pos = 0, Length = 4)]
        public short BrandNo { get; set; }

        /// <summary>
        /// Data Table Constant = 001
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 001;

        /// <summary>
        /// Version (Data Release) in the format xxyy
        /// </summary>
        [TecdocField(Name = @"Data Release", OldName = @"Data Release", Pos = 7, Length = 4)]
        public short Version { get; set; }

        /// <summary>
        /// Version date in the format YYYYMMDD
        /// </summary>
        [TecdocField(Name = @"VersionDate", OldName = @"Datum", Pos = 11, Length = 8)]
        public int VersionDateYYYYMMDD { get; set; }

        /// <summary>
        /// ‘1’ when complete delivery, otherwise ‘0’
        /// </summary>
        [TecdocField(Name = @"Full", OldName = @"KZVoll", Pos = 19, Length = 1)]
        public bool CompleteDelivery { get; set; }

        /// <summary>
        /// Vehicle Manufacturer Number
        /// </summary>
        [TecdocField(Name = @"ManNo", OldName = @"HerNr", Pos = 20, Length = 6)]
        public int ManufacturerNo { get; set; }

        /// <summary>
        /// Brand (specified by TecDoc)
        /// </summary>
        [TecdocField(Name = @"BrandName", OldName = @"Marke", Pos = 26, Length = 20)]
        [Required]
        [StringLength(20)]
        public string BrandName { get; set; } = default!;

        /// <summary>
        /// Reference data version in the format xxyy
        /// </summary>
        [TecdocField(Name = @"RefDataVersion", OldName = @"Referenzdaten", Pos = 46, Length = 4)]
        public short ReferenceVersion { get; set; }

        /// <summary>
        /// Not used anymore
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Vorversion", Pos = 50, Length = 4)]
        public short? PreviousReferenceVersion { get; set; }

        /// <summary>
        /// Constant “&lt;current format version&gt;”
        /// </summary>
        [TecdocField(Name = @"Format", OldName = @"Format", Pos = 54, Length = 3)]
        [Required]
        [StringLength(3)]
        public string Format { get; set; } = default!;

        /// <summary>
        /// 1=Delete all data records of the brand, otherwise ‘0’
        /// </summary>
        [TecdocField(Name = @"DeleteFlag", OldName = @"Lösch-Flag", Pos = 57, Length = 1)]
        public bool DeleteFlag { get; set; }

        #region Equality using primary key

        public bool Equals(T001? other)
            => other != null && BrandNo.Equals(other.BrandNo) && Version.Equals(other.Version) && VersionDateYYYYMMDD.Equals(other.VersionDateYYYYMMDD) && ManufacturerNo.Equals(other.ManufacturerNo) && StringComparer.InvariantCultureIgnoreCase.Equals(BrandName, other.BrandName) && ReferenceVersion.Equals(other.ReferenceVersion);

        public override bool Equals(object? obj)
            => obj is T001 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(BrandNo);
            hash.Add(Version);
            hash.Add(VersionDateYYYYMMDD);
            hash.Add(ManufacturerNo);
            hash.Add(BrandName, StringComparer.InvariantCultureIgnoreCase);
            hash.Add(ReferenceVersion);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Announcements for Reference Data deletions
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T005 : IEquatable<T005>
    {
        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"", Pos = 0, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant= 005
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 005;

        /// <summary>
        /// Type of object to be announced for deletion (-&gt; Key table 748)
        /// </summary>
        [TecdocField(Name = @"DelType", OldName = @"", Pos = 7, Length = 3)]
        [Required]
        [StringLength(3)]
        public string DelTypeKey { get; set; } = default!;

        /// <summary>
        /// ID of object to be announced for deletion
        /// </summary>
        [TecdocField(Name = @"DelNo", OldName = @"", Pos = 10, Length = 9)]
        public int DelNo { get; set; }

        /// <summary>
        /// Status information (-&gt; Key Table 747)
        /// </summary>
        [TecdocField(Name = @"DelStatus", OldName = @"", Pos = 19, Length = 3)]
        public short DelStatusKey { get; set; }

        /// <summary>
        /// Data Release of deletion
        /// </summary>
        [TecdocField(Name = @"DelDataRelease", OldName = @"", Pos = 22, Length = 4)]
        public short DelDataRelease { get; set; }

        /// <summary>
        /// Date of deletion YYYYMMDD (Publication)
        /// </summary>
        [TecdocField(Name = @"DelDate", OldName = @"", Pos = 26, Length = 6)]
        public int? DelDate { get; set; }

        /// <summary>
        /// Number of object the replaces the one that is (proposed to be) deleted
        /// </summary>
        [TecdocField(Name = @"ReplacementNo", OldName = @"", Pos = 35, Length = 9)]
        public int? ReplacementNo { get; set; }

        /// <summary>
        /// Reason for deletion (-&gt; Key Table 749)
        /// </summary>
        [TecdocField(Name = @"Reason", OldName = @"", Pos = 44, Length = 3)]
        [Required]
        [StringLength(3)]
        public string ReasonKey { get; set; } = default!;

        /// <summary>
        /// Additional comment (English)
        /// </summary>
        [TecdocField(Name = @"Comment", OldName = @"", Pos = 47, Length = 100)]
        [StringLength(100)]
        public string? Comment { get; set; }

        #region Equality using primary key

        public bool Equals(T005? other)
            => other != null && StringComparer.InvariantCultureIgnoreCase.Equals(DelTypeKey, other.DelTypeKey) && DelNo.Equals(other.DelNo) && DelStatusKey.Equals(other.DelStatusKey);

        public override bool Equals(object? obj)
            => obj is T005 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(DelTypeKey, StringComparer.InvariantCultureIgnoreCase);
            hash.Add(DelNo);
            hash.Add(DelStatusKey);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Description of all countries and relevant information
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T010 : IEquatable<T010>
    {
        /// <summary>
        /// Constantly blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserviert", Pos = 0, Length = 22)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant = 010
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 010;

        /// <summary>
        /// Country Code (Vehicle Registration Number)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"CountryCode", Pos = 29, Length = 3)]
        [Required]
        [StringLength(3)]
        public string CountryCode { get; set; } = default!;

        /// <summary>
        /// Description Number (-&gt; 030)
        /// </summary>
        [TecdocField(Name = @"TermNo", OldName = @"BezNr", Pos = 32, Length = 9)]
        public int CountryTermNo { get; set; }

        /// <summary>
        /// ‘L’ = Left-hand traffic, ‘R’ = Right-hand traffic
        /// </summary>
        [TecdocField(Name = @"Traffic", OldName = @"Verkehr", Pos = 41, Length = 1)]
        public char? Traffic { get; set; }

        /// <summary>
        /// Int. currency number according to ISO
        /// </summary>
        [TecdocField(Name = @"CurNo", OldName = @"WarNr", Pos = 42, Length = 3)]
        public short? CurrencyNo { get; set; }

        /// <summary>
        /// Currency Code, i.e. EUR
        /// </summary>
        [TecdocField(Name = @"CurCode", OldName = @"WKZ", Pos = 45, Length = 3)]
        [StringLength(3)]
        public string? CurrencyCode { get; set; }

        /// <summary>
        /// Currency Description Number (-&gt; 030)
        /// </summary>
        [TecdocField(Name = @"CurTermNo", OldName = @"WarBezNr", Pos = 48, Length = 9)]
        public int? CurrencyTermNo { get; set; }

        /// <summary>
        /// International Telephone Code
        /// </summary>
        [TecdocField(Name = @"AreaCode", OldName = @"Vorwahl", Pos = 57, Length = 5)]
        [StringLength(5)]
        public string? InternationalCallPrefix { get; set; }

        /// <summary>
        /// Country Groups = 1, otherwise 0
        /// </summary>
        [TecdocField(Name = @"IsGroup", OldName = @"IstGruppe", Pos = 62, Length = 1)]
        public bool IsGroup { get; set; }

        /// <summary>
        /// 2-digit ISO 3166-Code of the country
        /// </summary>
        [TecdocField(Name = @"ISOCode2", OldName = @"ISOCode2", Pos = 63, Length = 2)]
        [StringLength(2)]
        public string? IsoCode2 { get; set; }

        /// <summary>
        /// 3-digit ISO 3166-Code of the country
        /// </summary>
        [TecdocField(Name = @"ISOCode3", OldName = @"ISOCode3", Pos = 65, Length = 3)]
        [StringLength(3)]
        public string? IsoCode3 { get; set; }

        /// <summary>
        /// Numeral ISO 3166-Code of the country
        /// </summary>
        [TecdocField(Name = @"ISOCodeNo", OldName = @"ISOCodeNr", Pos = 68, Length = 3)]
        public short? IsoCodeNo { get; set; }

        #region Equality using primary key

        public bool Equals(T010? other)
            => other != null && StringComparer.InvariantCultureIgnoreCase.Equals(CountryCode, other.CountryCode);

        public override bool Equals(object? obj)
            => obj is T010 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(CountryCode, StringComparer.InvariantCultureIgnoreCase);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Country-dependent descriptions
    /// </summary>
    /// <remarks>
    /// Annotation:
    /// CC is an optional attribute what may be a problem from a technical point of view. Some Database Management
    /// Systems are not able to handle this 1:1. We recommend to implement a lookup on an artificial “CC” that is not
    /// used by TecDoc. We are working on future format generations that will not use constellations like that.
    /// </remarks>
    public partial class T012 : IEquatable<T012>
    {
        /// <summary>
        /// Constantly blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserviert", Pos = 0, Length = 22)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant = 012
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 012;

        /// <summary>
        /// Description Number
        /// </summary>
        [TecdocField(Name = @"CTermNo", OldName = @"LBezNr", Pos = 29, Length = 9)]
        public int CTermNo { get; set; }

        /// <summary>
        /// Country Code (-&gt; 010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"LKZ", Pos = 38, Length = 3)]
        [Required]
        [StringLength(3)]
        public string CountryCode { get; set; } = default!;

        /// <summary>
        /// Language Number (-&gt; 020)
        /// </summary>
        [TecdocField(Name = @"LanguageNo", OldName = @"LangNo", Pos = 41, Length = 3)]
        public short LangNo { get; set; }

        /// <summary>
        /// Descriptions
        /// </summary>
        [TecdocField(Name = @"Term", OldName = @"Bez", Pos = 44, Length = 60)]
        [StringLength(60)]
        public string? Term { get; set; }

        #region Equality using primary key

        public bool Equals(T012? other)
            => other != null && CTermNo.Equals(other.CTermNo) && StringComparer.InvariantCultureIgnoreCase.Equals(CountryCode, other.CountryCode) && LangNo.Equals(other.LangNo);

        public override bool Equals(object? obj)
            => obj is T012 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(CTermNo);
            hash.Add(CountryCode, StringComparer.InvariantCultureIgnoreCase);
            hash.Add(LangNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Allocation of countries to country groups
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T013 : IEquatable<T013>
    {
        /// <summary>
        /// Constantly Blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserviert", Pos = 0, Length = 22)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant = 013
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 013;

        /// <summary>
        /// Country Group Code (-&gt; 010)
        /// </summary>
        [TecdocField(Name = @"CountryGrp", OldName = @"CountryCodeGrp", Pos = 29, Length = 3)]
        [Required]
        [StringLength(3)]
        public string GroupCountryCode { get; set; } = default!;

        /// <summary>
        /// Country Code (-&gt; 010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"LKZ", Pos = 32, Length = 3)]
        [Required]
        [StringLength(3)]
        public string CountryCode { get; set; } = default!;

        #region Equality using primary key

        public bool Equals(T013? other)
            => other != null && StringComparer.InvariantCultureIgnoreCase.Equals(GroupCountryCode, other.GroupCountryCode) && StringComparer.InvariantCultureIgnoreCase.Equals(CountryCode, other.CountryCode);

        public override bool Equals(object? obj)
            => obj is T013 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(GroupCountryCode, StringComparer.InvariantCultureIgnoreCase);
            hash.Add(CountryCode, StringComparer.InvariantCultureIgnoreCase);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Definition of document types
    /// </summary>
    /// <remarks>
    /// Document Types:                               01:   BMP
    ///                                               02:   PDF
    ///                                               03:   JPG
    ///                                               04:   URL
    ///                                               05:   JPG
    ///                                               06:   PNG
    ///                                               07:   GIF (to provide animations – max.  Size  of  3  MB)
    ///                                               08:   ZIP (for 360° product images) (*)
    /// (*) This type is not part of inbound data processing so as a Data Supplier you are not able to choose this
    /// document type via DMM software. It is just set up in case a Data User intends to integrate the 360° images
    /// into TecDoc format tables. Please read the information sheet for 360° grafics in case you like to know more.
    /// </remarks>
    public partial class T014 : IEquatable<T014>
    {
        /// <summary>
        /// Constantly blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserviert", Pos = 0, Length = 22)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant= 014
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 014;

        /// <summary>
        /// Unambiguous key of the document type
        /// </summary>
        [TecdocField(Name = @"DocType", OldName = @"DokumentenArt", Pos = 29, Length = 2)]
        public byte DocumentType { get; set; }

        /// <summary>
        /// Term Number (-&gt;030)
        /// </summary>
        [TecdocField(Name = @"TermNo", OldName = @"BezNr", Pos = 31, Length = 9)]
        public int NameTermNo { get; set; }

        /// <summary>
        /// File Extension (three blanks with document type “URL”)
        /// </summary>
        [TecdocField(Name = @"Extension", OldName = @"Extension", Pos = 40, Length = 3)]
        [StringLength(3)]
        public string? Extension { get; set; }

        #region Equality using primary key

        public bool Equals(T014? other)
            => other != null && DocumentType.Equals(other.DocumentType);

        public override bool Equals(object? obj)
            => obj is T014 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(DocumentType);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Description of the languages used
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T020 : IEquatable<T020>
    {
        /// <summary>
        /// Constantly blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserved", Pos = 0, Length = 22)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant = 020
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 020;

        /// <summary>
        /// Language Number
        /// </summary>
        [TecdocField(Name = @"LangNo", OldName = @"SprachNr", Pos = 29, Length = 3)]
        public short LangNo { get; set; }

        /// <summary>
        /// Description Number (-&gt; 030)
        /// </summary>
        [TecdocField(Name = @"TermNo", OldName = @"BezNr", Pos = 32, Length = 9)]
        public int LanguageTermNo { get; set; }

        /// <summary>
        /// 2-digit ISO 639-Code of the language
        /// </summary>
        [TecdocField(Name = @"ISOCode", OldName = @"ISO Code", Pos = 41, Length = 2)]
        [StringLength(2)]
        public string? IsoCode { get; set; }

        /// <summary>
        /// Number of the Windows-Codepage for this language
        /// </summary>
        [TecdocField(Name = @"Codepage", OldName = @"Codepage", Pos = 43, Length = 4)]
        public short? Codepage { get; set; }

        #region Equality using primary key

        public bool Equals(T020? other)
            => other != null && LangNo.Equals(other.LangNo);

        public override bool Equals(object? obj)
            => obj is T020 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(LangNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Descriptions in different languages
    /// </summary>
    /// <remarks>
    /// Notes:          Text such as article additional descriptions are not saved with the article but are
    ///                 registered                      in  a  separate  language  table  for  reasons  of  international  compatibility.
    ///                 Access to the relevant text is facilitated by means of a description number and the
    ///                 relevant language number.
    ///                 Data suppliers can create their own language-specific texts apart from the data table of
    ///                 description texts provided by TECDOC. The first 100000 numbers are reserved for
    ///                 TECDOC descriptions.
    ///                 A description number should not be repeated within one language.
    /// </remarks>
    public partial class T030 : IEquatable<T030>
    {
        /// <summary>
        /// Constantly blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserved", Pos = 0, Length = 22)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Data Supplier Number Constant and 9999 for reference data
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        public short BrandNo { get; set; }

        /// <summary>
        /// Data Table Constant = 030
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 030;

        /// <summary>
        /// Description Number
        /// </summary>
        [TecdocField(Name = @"TermNo", OldName = @"BezNr", Pos = 29, Length = 9)]
        public int TermNo { get; set; }

        /// <summary>
        /// Language Number (-&gt; 020)
        /// </summary>
        [TecdocField(Name = @"LangNo", OldName = @"SprachNr", Pos = 38, Length = 3)]
        public short LangNo { get; set; }

        /// <summary>
        /// Descriptions
        /// </summary>
        [TecdocField(Name = @"Term", OldName = @"Bez", Pos = 41, Length = 60)]
        [Required]
        [StringLength(60)]
        public string Term { get; set; } = default!;

        /// <summary>
        /// Const = 0
        /// </summary>
        [TecdocField(Name = @"DeleteFlag", OldName = @"Lösch-Flag", Pos = 101, Length = 1)]
        //[NotMapped]
        public bool _DeleteFlag => false;

        #region Equality using primary key

        public bool Equals(T030? other)
            => other != null && TermNo.Equals(other.TermNo) && LangNo.Equals(other.LangNo);

        public override bool Equals(object? obj)
            => obj is T030 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(TermNo);
            hash.Add(LangNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Descriptions in different languages
    /// </summary>
    /// <remarks>
    /// Notes:              Text such as article additional descriptions are not saved with the article but are
    ///                     registered                  in   a  separate  language  table  for  reasons  of  international  compatibility.
    ///                     Access to the relevant text is facilitated by means of a description number and the
    ///                     relevant language number.
    ///                     Data suppliers can create their own language-specific texts apart from the data table of
    ///                     description texts provided by TECDOC. The first 100000 numbers are reserved for
    ///                     TECDOC descriptions.
    ///                     A description number should not be repeated within one language.
    /// Version 2.5 annotation:
    /// This is not a 1:1 copy of table 30 as those parts of table 30 are removed that are not used anymore (reserved
    /// characters at the beginning, DeleteFlag)
    /// </remarks>
    public partial class T031 : IEquatable<T031>
    {
        /// <summary>
        /// Data Supplier Number Constant and 9999 for reference data
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 0, Length = 4)]
        public short BrandNo { get; set; }

        /// <summary>
        /// Data Table Constant = 031
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 031;

        /// <summary>
        /// Description Number
        /// </summary>
        [TecdocField(Name = @"TermNo", OldName = @"BezNr", Pos = 7, Length = 9)]
        public int LogisticsTermNo { get; set; }

        /// <summary>
        /// Language Number (-&gt; 020)
        /// </summary>
        [TecdocField(Name = @"LangNo", OldName = @"SprachNr", Pos = 16, Length = 3)]
        public short LangNo { get; set; }

        /// <summary>
        /// Descriptions
        /// </summary>
        [TecdocField(Name = @"Term", OldName = @"Bez", Pos = 19, Length = 60)]
        [Required]
        [StringLength(60)]
        public string Term { get; set; } = default!;

        #region Equality using primary key

        public bool Equals(T031? other)
            => other != null && LogisticsTermNo.Equals(other.LogisticsTermNo) && LangNo.Equals(other.LangNo);

        public override bool Equals(object? obj)
            => obj is T031 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(LogisticsTermNo);
            hash.Add(LangNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Text modules in various languages
    /// </summary>
    /// <remarks>
    /// Notes:                 A text module may contain blank lines but may not consist of blank lines only.
    ///                        The sequential number starts at 001 and increases with one for each text line of a
    ///                        module.
    ///                        A sequential number should not be repeated within one language and text module.
    /// </remarks>
    public partial class T035 : IEquatable<T035>
    {
        /// <summary>
        /// Constantly Blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserved", Pos = 0, Length = 22)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Data Supplier Number Constant
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        public short BrandNo { get; set; }

        /// <summary>
        /// Data Table Constant ‘035’
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 035;

        /// <summary>
        /// Match code of the text module
        /// </summary>
        [TecdocField(Name = @"TxtModNo", OldName = @"TBSNr", Pos = 29, Length = 6)]
        [Required]
        [StringLength(6)]
        public string TextModuleNo { get; set; } = default!;

        /// <summary>
        /// Language Number (-&gt; 020)
        /// </summary>
        [TecdocField(Name = @"LangNo", OldName = @"SprachNr", Pos = 35, Length = 3)]
        public short LangNo { get; set; }

        /// <summary>
        /// Fixed font = ‘1’: A non-proportional font is used to display such a text module on the CD system.
        /// </summary>
        [TecdocField(Name = @"Fixed", OldName = @"Fixed", Pos = 38, Length = 1)]
        public bool FixedFont { get; set; }

        /// <summary>
        /// Sequential number (= Line) of text
        /// </summary>
        [TecdocField(Name = @"SeqNo", OldName = @"LfdNr", Pos = 39, Length = 3)]
        public short SeqNo { get; set; }

        /// <summary>
        /// Text Line
        /// </summary>
        [TecdocField(Name = @"Text", OldName = @"Text", Pos = 42, Length = 60)]
        [StringLength(60)]
        public string? Text { get; set; }

        /// <summary>
        /// Const = 0
        /// </summary>
        [TecdocField(Name = @"DeleteFlag", OldName = @"Lösch-Flag", Pos = 102, Length = 1)]
        //[NotMapped]
        public bool _DeleteFlag => false;

        #region Equality using primary key

        public bool Equals(T035? other)
            => other != null && StringComparer.InvariantCultureIgnoreCase.Equals(TextModuleNo, other.TextModuleNo) && LangNo.Equals(other.LangNo) && SeqNo.Equals(other.SeqNo);

        public override bool Equals(object? obj)
            => obj is T035 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(TextModuleNo, StringComparer.InvariantCultureIgnoreCase);
            hash.Add(LangNo);
            hash.Add(SeqNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Main address of the data supplier
    /// </summary>
    /// <remarks>
    /// Note:                  One data record that contains the address type ‘General Address’ must be present.
    /// </remarks>
    public partial class T040 : IEquatable<T040>
    {
        /// <summary>
        /// Data Supplier Number Constant (-&gt;040), must correspond with the data supplier number from DT 001
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 0, Length = 4)]
        public short BrandNo { get; set; }

        /// <summary>
        /// Data Table Constant ‘040’
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 040;

        /// <summary>
        /// Description 1
        /// </summary>
        [TecdocField(Name = @"Term1", OldName = @"Bez", Pos = 7, Length = 40)]
        [StringLength(40)]
        public string? Name { get; set; }

        /// <summary>
        /// Description 2
        /// </summary>
        [TecdocField(Name = @"Term2", OldName = @"Bez2", Pos = 47, Length = 40)]
        [StringLength(40)]
        public string? Name2 { get; set; }

        /// <summary>
        /// Street 1
        /// </summary>
        [TecdocField(Name = @"Street1", OldName = @"Straße", Pos = 87, Length = 40)]
        [StringLength(40)]
        public string? Street1 { get; set; }

        /// <summary>
        /// Street 2
        /// </summary>
        [TecdocField(Name = @"Street2", OldName = @"Strasse2", Pos = 127, Length = 40)]
        [StringLength(40)]
        public string? Street2 { get; set; }

        /// <summary>
        /// P. O. Box
        /// </summary>
        [TecdocField(Name = @"POBox", OldName = @"Postfach", Pos = 167, Length = 10)]
        [StringLength(10)]
        public string? PoBox { get; set; }

        /// <summary>
        /// Country code for postal code PLZ, i.e. D-22926 (-&gt; 010)
        /// </summary>
        [TecdocField(Name = @"CountryPrefix", OldName = @"PLZLKZ", Pos = 177, Length = 3)]
        [StringLength(3)]
        public string? PostcodeCountryPrefix { get; set; }

        /// <summary>
        /// Postal code
        /// </summary>
        [TecdocField(Name = @"PostCode", OldName = @"PLZOrt", Pos = 180, Length = 8)]
        [StringLength(8)]
        public string? Postcode { get; set; }

        /// <summary>
        /// Postal code P.O. Box
        /// </summary>
        [TecdocField(Name = @"PostCodePOBox", OldName = @"PLZPf", Pos = 188, Length = 8)]
        [StringLength(8)]
        public string? PostcodePoBox { get; set; }

        /// <summary>
        /// Postal code key customer
        /// </summary>
        [TecdocField(Name = @"PostCodeCus", OldName = @"PLZGr", Pos = 196, Length = 8)]
        [StringLength(8)]
        public string? PostcodeKeyCustomer { get; set; }

        /// <summary>
        /// City 1
        /// </summary>
        [TecdocField(Name = @"City1", OldName = @"Ort", Pos = 204, Length = 40)]
        [StringLength(40)]
        public string? City1 { get; set; }

        /// <summary>
        /// City 2
        /// </summary>
        [TecdocField(Name = @"City2", OldName = @"Ort2", Pos = 244, Length = 40)]
        [StringLength(40)]
        public string? City2 { get; set; }

        /// <summary>
        /// Telephone
        /// </summary>
        [TecdocField(Name = @"Phone", OldName = @"Telefon", Pos = 284, Length = 20)]
        [StringLength(20)]
        public string? Telephone { get; set; }

        /// <summary>
        /// Fax
        /// </summary>
        [TecdocField(Name = @"Fax", OldName = @"Fax", Pos = 304, Length = 20)]
        [StringLength(20)]
        public string? Fax { get; set; }

        /// <summary>
        /// Email Address
        /// </summary>
        [TecdocField(Name = @"Email", OldName = @"Email", Pos = 324, Length = 60)]
        [StringLength(60)]
        public string? Email { get; set; }

        /// <summary>
        /// Web Site
        /// </summary>
        [TecdocField(Name = @"Web", OldName = @"Web", Pos = 384, Length = 60)]
        [StringLength(60)]
        public string? Web { get; set; }

        /// <summary>
        /// Address type from KT 59 (-&gt; SA 052)
        /// </summary>
        [TecdocField(Name = @"AdrType", OldName = @"Adressart", Pos = 444, Length = 3)]
        public short AddressTypeKey { get; set; }

        /// <summary>
        /// Const = 0
        /// </summary>
        [TecdocField(Name = @"DeleteFlag", OldName = @"Lösch-Flag", Pos = 447, Length = 1)]
        //[NotMapped]
        public bool _DeleteFlag => false;

        #region Equality using primary key

        public bool Equals(T040? other)
            => other != null && BrandNo.Equals(other.BrandNo) && AddressTypeKey.Equals(other.AddressTypeKey);

        public override bool Equals(object? obj)
            => obj is T040 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(BrandNo);
            hash.Add(AddressTypeKey);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Logo of the Data Supplier
    /// </summary>
    /// <remarks>
    /// Notes:                      CountryCode ‘Blank’ takes the main address from the DT 040
    ///                             The combination BildNr, Dokumentenart must be contained in the DT 231.
    ///                             The usage of “DokumentenArt” URL is not permitted (-&gt; DT 014)
    ///                             The BildNr used in the DT 042 must be of the document type ‘Logo’ in the DT 231.
    ///                             (KT 143, Entry 02)
    ///                             Maximum size of Logo is 130 x 90 Pixel
    /// </remarks>
    public partial class T042 : IEquatable<T042>
    {
        /// <summary>
        /// Data Supplier Number Constant
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 0, Length = 4)]
        public short BrandNo { get; set; }

        /// <summary>
        /// Data Table Constant "042"
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 042;

        /// <summary>
        /// Country Code (-&gt; 010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"LKZ", Pos = 7, Length = 3)]
        [Required]
        [StringLength(3)]
        public string CountryCode { get; set; } = default!;

        /// <summary>
        /// Unambiguous Graphic Number (DT 231) ( 100.00 * DatSupNo, &lt; 100.000 * (DatSupNo + 1))
        /// </summary>
        [TecdocField(Name = @"DocNo", OldName = @"BildNr", Pos = 10, Length = 9)]
        public int DocNo { get; set; }

        /// <summary>
        /// -&gt; DT 014
        /// </summary>
        [TecdocField(Name = @"DocType", OldName = @"DokumentenArt", Pos = 19, Length = 2)]
        public byte DocumentType { get; set; }

        /// <summary>
        /// Const = 0
        /// </summary>
        [TecdocField(Name = @"DeleteFlag", OldName = @"Lösch-Flag", Pos = 21, Length = 1)]
        //[NotMapped]
        public bool _DeleteFlag => false;

        #region Equality using primary key

        public bool Equals(T042? other)
            => other != null && StringComparer.InvariantCultureIgnoreCase.Equals(CountryCode, other.CountryCode);

        public override bool Equals(object? obj)
            => obj is T042 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(CountryCode, StringComparer.InvariantCultureIgnoreCase);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Addresses of the Data Supplier
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T043 : IEquatable<T043>
    {
        /// <summary>
        /// Data Supplier Number Constant (-&gt;040), must correspond with the data supplier number from DT 001
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"", Pos = 0, Length = 4)]
        public short BrandNo { get; set; }

        /// <summary>
        /// Data Table Constant "043"
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 043;

        /// <summary>
        /// Address type from KT 59 (KT 59, DT 052)
        /// </summary>
        [TecdocField(Name = @"AdrType", OldName = @"", Pos = 7, Length = 3)]
        public short AddressTypeKey { get; set; }

        /// <summary>
        /// Country Code (-&gt; 010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"", Pos = 10, Length = 3)]
        [Required]
        [StringLength(3)]
        public string CountryCode { get; set; } = default!;

        /// <summary>
        /// Description 1
        /// </summary>
        [TecdocField(Name = @"Term1", OldName = @"", Pos = 13, Length = 40)]
        [StringLength(40)]
        public string? Name { get; set; }

        /// <summary>
        /// Description 2
        /// </summary>
        [TecdocField(Name = @"Term2", OldName = @"", Pos = 53, Length = 40)]
        [StringLength(40)]
        public string? Name2 { get; set; }

        /// <summary>
        /// Street 1
        /// </summary>
        [TecdocField(Name = @"Street1", OldName = @"", Pos = 93, Length = 40)]
        [StringLength(40)]
        public string? Street1 { get; set; }

        /// <summary>
        /// Street 2
        /// </summary>
        [TecdocField(Name = @"Street2", OldName = @"", Pos = 133, Length = 40)]
        [StringLength(40)]
        public string? Street2 { get; set; }

        /// <summary>
        /// P. O. Box
        /// </summary>
        [TecdocField(Name = @"POBox", OldName = @"", Pos = 173, Length = 10)]
        [StringLength(10)]
        public string? PoBox { get; set; }

        /// <summary>
        /// Country code for postal code PLZ, i.e. D-22926 (-&gt; 010)
        /// </summary>
        [TecdocField(Name = @"CountryPrefix", OldName = @"", Pos = 183, Length = 3)]
        [StringLength(3)]
        public string? PostcodeCountryPrefix { get; set; }

        /// <summary>
        /// Postal code
        /// </summary>
        [TecdocField(Name = @"PostCode", OldName = @"", Pos = 186, Length = 8)]
        [StringLength(8)]
        public string? Postcode { get; set; }

        /// <summary>
        /// Postal code for P.O. Box
        /// </summary>
        [TecdocField(Name = @"PostCodePOBox", OldName = @"", Pos = 194, Length = 8)]
        [StringLength(8)]
        public string? PostcodePoBox { get; set; }

        /// <summary>
        /// Postal code for key customer
        /// </summary>
        [TecdocField(Name = @"PostCodeCus", OldName = @"", Pos = 202, Length = 8)]
        [StringLength(8)]
        public string? PostcodeKeyCustomer { get; set; }

        /// <summary>
        /// City 1
        /// </summary>
        [TecdocField(Name = @"City1", OldName = @"", Pos = 210, Length = 40)]
        [StringLength(40)]
        public string? City1 { get; set; }

        /// <summary>
        /// City 2
        /// </summary>
        [TecdocField(Name = @"City2", OldName = @"", Pos = 250, Length = 40)]
        [StringLength(40)]
        public string? City2 { get; set; }

        /// <summary>
        /// Telephone
        /// </summary>
        [TecdocField(Name = @"Phone", OldName = @"", Pos = 290, Length = 20)]
        [StringLength(20)]
        public string? Telephone { get; set; }

        /// <summary>
        /// Fax
        /// </summary>
        [TecdocField(Name = @"Fax", OldName = @"", Pos = 310, Length = 20)]
        [StringLength(20)]
        public string? Fax { get; set; }

        /// <summary>
        /// E-mail Address
        /// </summary>
        [TecdocField(Name = @"Email", OldName = @"", Pos = 330, Length = 60)]
        [StringLength(60)]
        public string? Email { get; set; }

        /// <summary>
        /// Web Site
        /// </summary>
        [TecdocField(Name = @"Web", OldName = @"", Pos = 390, Length = 60)]
        [StringLength(60)]
        public string? Web { get; set; }

        /// <summary>
        /// Const = 0
        /// </summary>
        [TecdocField(Name = @"DeleteFlag", OldName = @"", Pos = 450, Length = 1)]
        //[NotMapped]
        public bool _DeleteFlag => false;

        #region Equality using primary key

        public bool Equals(T043? other)
            => other != null && BrandNo.Equals(other.BrandNo) && AddressTypeKey.Equals(other.AddressTypeKey) && StringComparer.InvariantCultureIgnoreCase.Equals(CountryCode, other.CountryCode);

        public override bool Equals(object? obj)
            => obj is T043 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(BrandNo);
            hash.Add(AddressTypeKey);
            hash.Add(CountryCode, StringComparer.InvariantCultureIgnoreCase);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Description of all criteria
    /// </summary>
    /// <remarks>
    /// Notes:                The criteria table contains a selection of fixedly defined attributes; i.e. criterion 3
    ///                       describes the equipment variation.
    ///                       Any     Data              Supplier  may  request  TecDoc  to  create     new   criteria  needed     for  their
    ///                       articles/linkages. Such new criteria then also become available to all the other Data
    ///                       Suppliers.
    ///                       A flag OK-Transporter is currently not planned. All attribute types with the flag OK-PC
    ///                       are permitted for the use with LCV linkages.
    ///                       A flag OK-Motorcycle is currently not planned. All attribute types with the flag OK-PC are
    ///                       permitted for the use with MC linkages.
    ///                       Criteria of type 'D' (date) must be given in the format 'yyyymm' (four-digit year, two-digit
    ///                       month, e.g. 202110 for October 2021)
    ///                       Further standardisation of criteria usage depending on generic article is part of the DQM
    ///                       measures and might further restrict the usage of criteria (e.g. in tables 331, 332 and
    ///                       333)
    /// General validation rules on numeric criteria (type = ‘N’):
    /// 1.    Characters "0" to "9", comma "," as well as plus "" and minus "-" are permitted
    /// 2.    A comma may not be used at the beginning or end of the value
    /// 3.    A comma may only be used once within a value
    /// 4.    Only the comma may be used as the decimal separator
    /// 5.    Thousands seperators must not be used
    /// 6.    Exactly one "+" or exactly one "-" may only be used at the beginning of a numeric value
    /// 7.    Spaces must not be used
    /// 8.    All(!) characters are part of the maximum length of an attribute.
    /// Please note that further standardisation of permitted values in criteria is given as Regular Expression  in  table
    /// 333.
    /// </remarks>
    public partial class T050 : IEquatable<T050>
    {
        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 0, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant= 050
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 050;

        /// <summary>
        /// Criterion Number
        /// </summary>
        [TecdocField(Name = @"CritNo", OldName = @"KritNr", Pos = 7, Length = 4)]
        public short CritNo { get; set; }

        /// <summary>
        /// Description Number (-&gt; 030)
        /// </summary>
        [TecdocField(Name = @"TermNo", OldName = @"BezNr", Pos = 11, Length = 9)]
        public int CriteriaTermNo { get; set; }

        /// <summary>
        /// Criterion Type (‘A’ = Alphanumerical, ‘N’ = Numerical, ‘D’ = Date ‘K’ = Key, ‘V’ = without value)
        /// </summary>
        [TecdocField(Name = @"Type", OldName = @"Typ", Pos = 20, Length = 1)]
        public char Type { get; set; }

        /// <summary>
        /// Maximum length of criterion value
        /// </summary>
        [TecdocField(Name = @"MaxLen", OldName = @"MaxLen", Pos = 21, Length = 2)]
        public byte? MaxLen { get; set; }

        /// <summary>
        /// Criterion may be used for article (SA 210) (0 = No, 1 = Yes)
        /// </summary>
        [TecdocField(Name = @"OKArticle", OldName = @"OK-Artikel", Pos = 23, Length = 1)]
        public bool ForArticle { get; set; }

        /// <summary>
        /// Number of the Key Table for type ‘K’
        /// </summary>
        [TecdocField(Name = @"TabNo", OldName = @"TabNr", Pos = 24, Length = 3)]
        public short? KeyTableNo { get; set; }

        /// <summary>
        /// Criterion may be used for CV linkages (0 = No, 1 = Yes)
        /// </summary>
        [TecdocField(Name = @"OKCV", OldName = @"OK-NKW", Pos = 27, Length = 1)]
        public bool ForCV { get; set; }

        /// <summary>
        /// Criterion may be used for PC linkages (0 = No, 1 = Yes)
        /// </summary>
        [TecdocField(Name = @"OKPC", OldName = @"OK-PKW", Pos = 28, Length = 1)]
        public bool ForPC { get; set; }

        /// <summary>
        /// Criterion may be used for engine linkages (0 = No, 1 = Yes)
        /// </summary>
        [TecdocField(Name = @"OKEngine", OldName = @"OK-Motor", Pos = 29, Length = 1)]
        public bool ForEngine { get; set; }

        /// <summary>
        /// Criterion may be used for Driver Cab linkages (0 = No, 1 = Yes)
        /// </summary>
        [TecdocField(Name = @"OKDrivCab", OldName = @"OK-Fahrerhaus", Pos = 30, Length = 1)]
        public bool ForDriverCab { get; set; }

        /// <summary>
        /// Criterion may be used as Parts List criterion (SA208) (0 = No, 1 = Yes)
        /// </summary>
        [TecdocField(Name = @"PartLstCrit", OldName = @"Stücklisten-Criterion", Pos = 31, Length = 1)]
        public bool ForPartsList { get; set; }

        /// <summary>
        /// Criterion may be used as Accessory List criterion. (DT228) (0 = No, 1 = Yes)
        /// </summary>
        [TecdocField(Name = @"AccCrit", OldName = @"Zubehör-Criterion", Pos = 32, Length = 1)]
        public bool ForAccessoryList { get; set; }

        /// <summary>
        /// Criterion may be used more than once within a linkage (0 = No, 1 = Yes)
        /// </summary>
        [TecdocField(Name = @"Multiple", OldName = @"Mehrfach-verwendung", Pos = 33, Length = 1)]
        public bool AllowMultiple { get; set; }

        /// <summary>
        /// Description number for the abbreviation (-&gt;030)
        /// </summary>
        [TecdocField(Name = @"TermNoAbbr", OldName = @"BezNrAbk", Pos = 34, Length = 9)]
        public int? AbbreviationTermNo { get; set; }

        /// <summary>
        /// BezNr for the unit (-&gt;030)
        /// </summary>
        [TecdocField(Name = @"TermNoUnit", OldName = @"BezNrEinheit", Pos = 43, Length = 9)]
        public int? UnitTermNo { get; set; }

        /// <summary>
        /// Criterion is an interval criterion (0 = No, 1 = Yes)
        /// </summary>
        [TecdocField(Name = @"IntervalCrit", OldName = @"IntervallCriterion", Pos = 52, Length = 1)]
        public bool RangeCriteria { get; set; }

        /// <summary>
        /// Criterion is successor to...
        /// </summary>
        [TecdocField(Name = @"SuccCrit", OldName = @"Nachfolge-Criterion", Pos = 53, Length = 4)]
        public short? RangeEndCritNo { get; set; }

        /// <summary>
        /// 1: Criterion is proposed for deletion, otherwise 0
        /// </summary>
        [TecdocField(Name = @"Delete", OldName = @"Delete", Pos = 57, Length = 1)]
        public bool Delete { get; set; }

        /// <summary>
        /// Criterion may be used for Axle linkages (0 = No, 1 = Yes)
        /// </summary>
        [TecdocField(Name = @"OKAxle", OldName = @"OK-Achse", Pos = 58, Length = 1)]
        public bool ForAxle { get; set; }

        #region Equality using primary key

        public bool Equals(T050? other)
            => other != null && CritNo.Equals(other.CritNo);

        public override bool Equals(object? obj)
            => obj is T050 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(CritNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Table definition
    /// </summary>
    /// <remarks>
    ///       1 References to Key Tables within this format description are  designated by ‘KT’
    /// </remarks>
    public partial class T051 : IEquatable<T051>
    {
        /// <summary>
        /// Constantly blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserviert", Pos = 0, Length = 22)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant = 051
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 051;

        /// <summary>
        /// Key Table Number
        /// </summary>
        [TecdocField(Name = @"KeyTabNo", OldName = @"TabNr", Pos = 29, Length = 3)]
        public short KeyTableNo { get; set; }

        /// <summary>
        /// Key Table Name1 -&gt; SA 30
        /// </summary>
        [TecdocField(Name = @"TermNo", OldName = @"BezNr", Pos = 32, Length = 9)]
        public int TableTermNo { get; set; }

        /// <summary>
        /// ‘A’ = Alphanumerical, ‘N’ = Numerical
        /// </summary>
        [TecdocField(Name = @"KeyTabType", OldName = @"TabTyp", Pos = 41, Length = 1)]
        public char AlphaNumType { get; set; }

        /// <summary>
        /// 1: Key Table is proposed for deletion, otherwise 0
        /// </summary>
        [TecdocField(Name = @"Delete", OldName = @"Delete", Pos = 42, Length = 1)]
        public bool Delete { get; set; }

        #region Equality using primary key

        public bool Equals(T051? other)
            => other != null && KeyTableNo.Equals(other.KeyTableNo);

        public override bool Equals(object? obj)
            => obj is T051 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(KeyTableNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Key Table Entries
    /// </summary>
    /// <remarks>
    ///       Reference Data for Logistics                    Information
    /// </remarks>
    public partial class T052 : IEquatable<T052>
    {
        /// <summary>
        /// Constantly blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserviert", Pos = 0, Length = 22)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant = 052
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 052;

        /// <summary>
        /// Key Table Number (-&gt;051)
        /// </summary>
        [TecdocField(Name = @"KeyTabNo", OldName = @"TabNr", Pos = 29, Length = 3)]
        public short KeyTableNo { get; set; }

        /// <summary>
        /// Key Table Entry (numerical or alphanumerical depending on the Key Table type)
        /// </summary>
        [TecdocField(Name = @"Key", OldName = @"Key", Pos = 32, Length = 3)]
        [Required]
        [StringLength(3)]
        public string Key { get; set; } = default!;

        /// <summary>
        /// Description Number (-&gt;030)
        /// </summary>
        [TecdocField(Name = @"TermNo", OldName = @"BezNr", Pos = 35, Length = 9)]
        public int ValueTermNo { get; set; }

        /// <summary>
        /// Sort-Key for Sorting
        /// </summary>
        [TecdocField(Name = @"SortNo", OldName = @"SortNr", Pos = 44, Length = 3)]
        public short SortNo { get; set; }

        /// <summary>
        /// 1: Key Table Entry is proposed for deletion, otherwise 0
        /// </summary>
        [TecdocField(Name = @"Delete", OldName = @"Delete", Pos = 47, Length = 1)]
        public bool Delete { get; set; }

        #region Equality using primary key

        public bool Equals(T052? other)
            => other != null && KeyTableNo.Equals(other.KeyTableNo) && StringComparer.InvariantCultureIgnoreCase.Equals(Key, other.Key);

        public override bool Equals(object? obj)
            => obj is T052 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(KeyTableNo);
            hash.Add(Key, StringComparer.InvariantCultureIgnoreCase);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Description of all criteria
    /// </summary>
    /// <remarks>
    /// Notes:                    Any    Data           Supplier  may  request  TecDoc  to  create  new  criteria  needed  for     their
    ///                           articles/linkages. Such new criteria then also become available to all the other Data
    ///                           Suppliers.
    ///                           Criteria of type 'D' (date) must be given in the format 'yyyymm' (four-digit year, two-digit
    ///                           month, e.g. 202110 for October 2021)
    /// (*) This is         for future use if more criteria on packaging level items will be needed as given in table. With start
    /// of 2.6 this is const=0
    /// Validation rules on numeric criteria (type = ‘N’):
    /// 1.  Characters "0" to "9", comma "," as well as plus "" and minus "-" are permitted
    /// 2.  A comma may not be used at the beginning or end of the value
    /// 3.  A comma may only be used once within a value
    /// 4.  Only the comma may be used as the decimal separator
    /// 5.  Thousands seperators must not be used
    /// 6.  Exactly one "+" or exactly one "-" may only be used at the beginning of a numeric value
    /// 7.  Spaces must not be used
    /// All(!) characters are part of the maximum length of an attribute.
    /// Version 2.5 annotation:
    /// In version 2.5 only article criteria are added. As this may be extended to linkage criteria in the future the “OK-xxx”
    /// field remain part of the table.
    /// </remarks>
    public partial class T053 : IEquatable<T053>
    {
        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 0, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant= 053
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 053;

        /// <summary>
        /// Criterion Number
        /// </summary>
        [TecdocField(Name = @"CritNo", OldName = @"KritNr", Pos = 7, Length = 4)]
        public short LogisticsCritNo { get; set; }

        /// <summary>
        /// Description Number (-&gt; 031)
        /// </summary>
        [TecdocField(Name = @"TermNo", OldName = @"BezNr", Pos = 11, Length = 9)]
        public int LogisticsTermNo { get; set; }

        /// <summary>
        /// Criterion Type (‘A’ = Alphanumerical, ‘N’ = Numerical, ‘D’ = Date ‘K’ = Key, ‘V’ = without value)
        /// </summary>
        [TecdocField(Name = @"Type", OldName = @"Typ", Pos = 20, Length = 1)]
        public char Type { get; set; }

        /// <summary>
        /// Maximum length of criterion value
        /// </summary>
        [TecdocField(Name = @"MaxLen", OldName = @"MaxLen", Pos = 21, Length = 2)]
        public byte? MaxLen { get; set; }

        /// <summary>
        /// Criterion may be used for article (SA 213) (0 = No, 1 = Yes) --- const = 1
        /// </summary>
        [TecdocField(Name = @"OKArtikel", OldName = @"OK-Artikel", Pos = 23, Length = 1)]
        //[NotMapped]
        public bool ForArticle => true;

        /// <summary>
        /// Number of the Key Table for type ‘K’
        /// </summary>
        [TecdocField(Name = @"TabNo", OldName = @"TabNr", Pos = 24, Length = 3)]
        public short? KeyTableNo { get; set; }

        /// <summary>
        /// const = 0
        /// </summary>
        [TecdocField(Name = @"OKCV", OldName = @"OK-NKW", Pos = 27, Length = 1)]
        //[NotMapped]
        public bool ForCV => false;

        /// <summary>
        /// const = 0
        /// </summary>
        [TecdocField(Name = @"OKPC", OldName = @"OK-PKW", Pos = 28, Length = 1)]
        //[NotMapped]
        public bool ForPC => false;

        /// <summary>
        /// const = 0
        /// </summary>
        [TecdocField(Name = @"OKEngine", OldName = @"OK-Motor", Pos = 29, Length = 1)]
        //[NotMapped]
        public bool ForEngine => false;

        /// <summary>
        /// const = 0
        /// </summary>
        [TecdocField(Name = @"OKDrivCab", OldName = @"OK-Fahrerhaus", Pos = 30, Length = 1)]
        //[NotMapped]
        public bool ForDriverCab => false;

        /// <summary>
        /// const = 0
        /// </summary>
        [TecdocField(Name = @"PartLstCrit", OldName = @"Stücklisten-Criterion", Pos = 31, Length = 1)]
        //[NotMapped]
        public bool ForPartsList => false;

        /// <summary>
        /// const = 0
        /// </summary>
        [TecdocField(Name = @"AccCrit", OldName = @"Zubehör-Criterion", Pos = 32, Length = 1)]
        //[NotMapped]
        public bool ForAccessoryList => false;

        /// <summary>
        /// Criterion may be used more than once within a criteria (0 = No, 1 = Yes)
        /// </summary>
        [TecdocField(Name = @"Multiple", OldName = @"Mehrfach-verwendung", Pos = 33, Length = 1)]
        public bool AllowMultiple { get; set; }

        /// <summary>
        /// Description number for the abbreviation (-&gt;031)
        /// </summary>
        [TecdocField(Name = @"TermNoAbbr", OldName = @"BezNrAbk", Pos = 34, Length = 9)]
        public int? AbbreviationLogisticsTermNo { get; set; }

        /// <summary>
        /// BezNr for the unit (-&gt;031)
        /// </summary>
        [TecdocField(Name = @"TermNoUnit", OldName = @"BezNrEinheit", Pos = 43, Length = 9)]
        public int? UnitLogisticsTermNo { get; set; }

        /// <summary>
        /// Criterion is an interval criterion (0 = No, 1 = Yes)
        /// </summary>
        [TecdocField(Name = @"IntervalCrit", OldName = @"IntervallCriterion", Pos = 52, Length = 1)]
        public bool RangeCriteria { get; set; }

        /// <summary>
        /// Criterion is successor to...
        /// </summary>
        [TecdocField(Name = @"SuccCrit", OldName = @"Nachfolge-Criterion", Pos = 53, Length = 4)]
        public short? RangeEndCritNo { get; set; }

        /// <summary>
        /// 1: Criterion is proposed for deletion, otherwise 0
        /// </summary>
        [TecdocField(Name = @"Delete", OldName = @"Delete", Pos = 57, Length = 1)]
        public bool Delete { get; set; }

        /// <summary>
        /// Logistic criterion may be used: (new in Format Version 2.6 0: For end user unit (table 213) 1: For packaging items (table 214) (*) 2: For end user and packaging items (*)
        /// </summary>
        [TecdocField(Name = @"CritUsage", OldName = @"n/a", Pos = 58, Length = 1)]
        public byte CriteriaUsage { get; set; }

        #region Equality using primary key

        public bool Equals(T053? other)
            => other != null && LogisticsCritNo.Equals(other.LogisticsCritNo);

        public override bool Equals(object? obj)
            => obj is T053 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(LogisticsCritNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Description of all manufacturers
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T100 : IEquatable<T100>
    {
        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 0, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant = 100
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 100;

        /// <summary>
        /// Manufacturer Number
        /// </summary>
        [TecdocField(Name = @"ManNo", OldName = @"HerNr", Pos = 7, Length = 6)]
        public int ManufacturerNo { get; set; }

        /// <summary>
        /// Manufacturer Short Code
        /// </summary>
        [TecdocField(Name = @"ManCode", OldName = @"HKZ", Pos = 13, Length = 10)]
        [Required]
        [StringLength(10)]
        public string ManufacturerCode { get; set; } = default!;

        /// <summary>
        /// Description Number (-&gt;012)
        /// </summary>
        [TecdocField(Name = @"CTermNo", OldName = @"LBezNr", Pos = 23, Length = 9)]
        public int NameCTermNo { get; set; }

        /// <summary>
        /// PC Manufacturer (0 = No, 1 = Yes)
        /// </summary>
        [TecdocField(Name = @"PC", OldName = @"PKW", Pos = 32, Length = 1)]
        public bool PC { get; set; }

        /// <summary>
        /// CV Manufacturer (0 = No, 1 = Yes)
        /// </summary>
        [TecdocField(Name = @"CV", OldName = @"NKW", Pos = 33, Length = 1)]
        public bool CV { get; set; }

        /// <summary>
        /// Comparative Manufacturer (0 = No, 1 = Yes)
        /// </summary>
        [TecdocField(Name = @"Compare", OldName = @"VGL", Pos = 34, Length = 1)]
        public bool ComparativeManufacturer { get; set; }

        /// <summary>
        /// Axle Manufacturer (0 = No, 1 = Yes)
        /// </summary>
        [TecdocField(Name = @"Axle", OldName = @"Achse", Pos = 35, Length = 1)]
        public bool Axle { get; set; }

        /// <summary>
        /// Engine Manufacturer (0 = No, 1 = Yes)
        /// </summary>
        [TecdocField(Name = @"Engine", OldName = @"Motor", Pos = 36, Length = 1)]
        public bool Engine { get; set; }

        /// <summary>
        /// Transmission Manufacturer (0 = No, 1 = Yes)
        /// </summary>
        [TecdocField(Name = @"Transmission", OldName = @"Getriebe", Pos = 37, Length = 1)]
        public bool Transmission { get; set; }

        /// <summary>
        /// LCV manufacturer ( 0 = no, 1 = yes )
        /// </summary>
        [TecdocField(Name = @"LCV", OldName = @"Transporter", Pos = 38, Length = 1)]
        public bool LCV { get; set; }

        /// <summary>
        /// 1: Manufacturer is proposed for deletion, otherwise 0
        /// </summary>
        [TecdocField(Name = @"Delete", OldName = @"Delete", Pos = 39, Length = 1)]
        public bool Delete { get; set; }

        #region Equality using primary key

        public bool Equals(T100? other)
            => other != null && ManufacturerNo.Equals(other.ManufacturerNo);

        public override bool Equals(object? obj)
            => obj is T100 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(ManufacturerNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Allocation of KBA code to manufacturer
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T103 : IEquatable<T103>
    {
        /// <summary>
        /// Constantly blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserviert", Pos = 0, Length = 22)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant = 103
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 103;

        /// <summary>
        /// KBA Manufacturer Code
        /// </summary>
        [TecdocField(Name = @"KBANo", OldName = @"KBANr", Pos = 29, Length = 4)]
        public short KbaNo { get; set; }

        /// <summary>
        /// Manufacturer Number
        /// </summary>
        [TecdocField(Name = @"ManNo", OldName = @"HerNr", Pos = 33, Length = 6)]
        public int ManufacturerNo { get; set; }

        #region Equality using primary key

        public bool Equals(T103? other)
            => other != null && KbaNo.Equals(other.KbaNo) && ManufacturerNo.Equals(other.ManufacturerNo);

        public override bool Equals(object? obj)
            => obj is T103 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(KbaNo);
            hash.Add(ManufacturerNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Description of all vehicle model series
    /// </summary>
    /// <remarks>
    ///       Note:                  PC/CV: One of theses fields must contain the value =1; both fields can also be set
    ///                              to the value = 1.
    /// </remarks>
    public partial class T110 : IEquatable<T110>
    {
        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 0, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant= 110
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 110;

        /// <summary>
        /// Unambiguous number of the vehicle model series
        /// </summary>
        [TecdocField(Name = @"KModNo", OldName = @"KModNr", Pos = 7, Length = 5)]
        public int KModNo { get; set; }

        /// <summary>
        /// Description Number (-&gt; 012)
        /// </summary>
        [TecdocField(Name = @"CTermNo", OldName = @"LBezNr", Pos = 12, Length = 9)]
        public int ModelCTermNo { get; set; }

        /// <summary>
        /// Manufacturer (-&gt; 100)
        /// </summary>
        [TecdocField(Name = @"ManNo", OldName = @"HerNr", Pos = 21, Length = 6)]
        public int ManufacturerNo { get; set; }

        /// <summary>
        /// Sorting key for the sorting within one manufacturer (ManNo)
        /// </summary>
        [TecdocField(Name = @"SortNo", OldName = @"SortNr", Pos = 27, Length = 3)]
        public short SortNo { get; set; }

        /// <summary>
        /// Model year from YYYYMM – Production Date
        /// </summary>
        [TecdocField(Name = @"ModYFrom", OldName = @"Bjvon", Pos = 30, Length = 6)]
        public int? DateFromYYYYMM { get; set; }

        /// <summary>
        /// Model year to YYYYMM – Production Date
        /// </summary>
        [TecdocField(Name = @"ModYTo", OldName = @"BJBis", Pos = 36, Length = 6)]
        public int? DateToYYYYMM { get; set; }

        /// <summary>
        /// PC model series =’1’
        /// </summary>
        [TecdocField(Name = @"PC", OldName = @"PKW", Pos = 42, Length = 1)]
        public bool PC { get; set; }

        /// <summary>
        /// CV model series =’1’
        /// </summary>
        [TecdocField(Name = @"CV", OldName = @"NKW", Pos = 43, Length = 1)]
        public bool CV { get; set; }

        /// <summary>
        /// Axel model series =’1’
        /// </summary>
        [TecdocField(Name = @"Axle", OldName = @"Achse", Pos = 44, Length = 1)]
        public bool Axle { get; set; }

        /// <summary>
        /// 1: Model series is proposed for deletion, otherwise 0
        /// </summary>
        [TecdocField(Name = @"Delete", OldName = @"Delete", Pos = 45, Length = 1)]
        public bool Delete { get; set; }

        /// <summary>
        /// LCV model series
        /// </summary>
        [TecdocField(Name = @"LCV", OldName = @"Transporter", Pos = 46, Length = 1)]
        public bool LCV { get; set; }

        #region Equality using primary key

        public bool Equals(T110? other)
            => other != null && KModNo.Equals(other.KModNo);

        public override bool Equals(object? obj)
            => obj is T110 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(KModNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Mapping from kTyp/nTyp to more detailed vehicle classes
    /// </summary>
    /// <remarks>
    /// The entries in the LTTypeExtended field allow a more detailed differentiation of vehicles in the links (tables
    /// 400ff). The following link target types are possible by using the mappings of table 115
    /// 2    TecDoc PC
    /// 3    TecDoc Motorcycle
    /// 4    TecDoc E-PC
    /// 5    TecDoc E-LCV
    /// 6    TecDoc E-Motorcycle
    /// 16   TecDoc CV
    /// 17   TecDoc Bus
    /// 18   TecDoc Tractor
    /// 20   TecDoc E-Bus
    /// 999  TecDoc LCV
    /// If you as a data user want to make use of this extended option in your systems, you can replace the entry in the
    /// VKNZielArt field in the provided linkage tables (400ff) according to the mapping in table 115. To do this,
    /// proceed as follows:
    /// 1)              Find the pair of values VKNZielNo/VKNZielArt of linkage in table 115 (VKNZielNo/VKZielArt_Original)
    /// 2)              In the linkage (tables 400ff), replace the value in the VKNZielArt field with the value in table 115 in the
    ///                 VKNZielArtExtended field.
    /// As a result, you receive link tables according to the new, more detailed system.
    /// The breakup of the kTyp/nTyp system represents a fundamental paradigm shift, which can be accompanied
    /// by extensive consequences for interfaces and application systems. For this reason, we provide this mapping
    /// rule as an optional supplement. There is no obligation to use it.
    /// This information is available to all recipients of data packets.
    /// </remarks>
    public partial class T115 : IEquatable<T115>
    {
        /// <summary>
        /// Data Supplier No. constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"", Pos = 0, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table constant = 115
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 115;

        /// <summary>
        /// Unique number of vehicle type (kTyp or nTyp)
        /// </summary>
        [TecdocField(Name = @"LinkageTargetNo", OldName = @"", Pos = 7, Length = 9)]
        public int LinkageTargetNo { get; set; }

        /// <summary>
        /// Table where LinkageTargetNo is located (120 or 532)
        /// </summary>
        [TecdocField(Name = @"LinkageTargetTable", OldName = @"", Pos = 16, Length = 3)]
        public short LinkageTargetTable { get; set; }

        /// <summary>
        /// „Classic“ view on linkage targets 2: for table 120 records 120/kTyp 16: for table 532 records 532/nTyp
        /// </summary>
        [TecdocField(Name = @"LTTypeOriginal", OldName = @"", Pos = 19, Length = 3)]
        public short OriginalLinkageTargetType { get; set; }

        /// <summary>
        /// Linkage Target Type (KT 271) – extended classification according to chapter „Vehicle Classes“
        /// </summary>
        [TecdocField(Name = @"LTTypeExtended", OldName = @"", Pos = 22, Length = 3)]
        public short ExtendedLinkageTargetTypeKey { get; set; }

        #region Equality using primary key

        public bool Equals(T115? other)
            => other != null && LinkageTargetNo.Equals(other.LinkageTargetNo) && OriginalLinkageTargetType.Equals(other.OriginalLinkageTargetType);

        public override bool Equals(object? obj)
            => obj is T115 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(LinkageTargetNo);
            hash.Add(OriginalLinkageTargetType);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Description of all vehicle types
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T120 : IEquatable<T120>
    {
        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 0, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant= 120
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 120;

        /// <summary>
        /// Unambiguous number of the vehicle type
        /// </summary>
        [TecdocField(Name = @"KTypNo", OldName = @"KTypNr", Pos = 7, Length = 9)]
        public int KTypeNo { get; set; }

        /// <summary>
        /// Description number (-&gt; 012)
        /// </summary>
        [TecdocField(Name = @"CTermNo", OldName = @"LbezNr", Pos = 16, Length = 9)]
        public int TrimCTermNo { get; set; }

        /// <summary>
        /// Model Series (-&gt; 110)
        /// </summary>
        [TecdocField(Name = @"KModNo", OldName = @"KModNr", Pos = 25, Length = 5)]
        public int KModNo { get; set; }

        /// <summary>
        /// General Sorting Field
        /// </summary>
        [TecdocField(Name = @"SortNo", OldName = @"SortNr", Pos = 30, Length = 2)]
        public byte SortNo { get; set; }

        /// <summary>
        /// Model Year from (YYYYMM) – Production Date
        /// </summary>
        [TecdocField(Name = @"ModYFrom", OldName = @"Bjvon", Pos = 32, Length = 6)]
        public int? DateFromYYYYMM { get; set; }

        /// <summary>
        /// Model Year to (YYYYMM) – Production Date
        /// </summary>
        [TecdocField(Name = @"ModYTo", OldName = @"Bjbis", Pos = 38, Length = 6)]
        public int? DateToYYYYMM { get; set; }

        /// <summary>
        /// Engine output in kW (*)
        /// </summary>
        [TecdocField(Name = @"KW", OldName = @"KW", Pos = 44, Length = 4)]
        public short? PowerKw { get; set; }

        /// <summary>
        /// Engine output in HP
        /// </summary>
        [TecdocField(Name = @"HP", OldName = @"PS", Pos = 48, Length = 4)]
        public short? Horsepower { get; set; }

        /// <summary>
        /// Engine capacity in cc (taxation value)
        /// </summary>
        [TecdocField(Name = @"ccmTax", OldName = @"ccmSteuer", Pos = 52, Length = 5)]
        public int? EngineCcTax { get; set; }

        /// <summary>
        /// Engine capacity in cc (technical value)
        /// </summary>
        [TecdocField(Name = @"ccmTech", OldName = @"ccmTech", Pos = 57, Length = 5)]
        public int? EngineCcTech { get; set; }

        /// <summary>
        /// Engine capacity in litre *100 (99V99)
        /// </summary>
        [TecdocField(Name = @"Lit", OldName = @"Lit", Pos = 62, Length = 4)]
        public short? EngineLitre100 { get; set; }

        /// <summary>
        /// Number of cylinders
        /// </summary>
        [TecdocField(Name = @"Cyl", OldName = @"Zyl", Pos = 66, Length = 2)]
        public byte? Cylinders { get; set; }

        /// <summary>
        /// Number of doors
        /// </summary>
        [TecdocField(Name = @"Doors", OldName = @"Tueren", Pos = 68, Length = 1)]
        public byte? Doors { get; set; }

        /// <summary>
        /// Fuel tank capacity
        /// </summary>
        [TecdocField(Name = @"TankCap", OldName = @"TankInhalt", Pos = 69, Length = 4)]
        public short? FuelTankCapacity { get; set; }

        /// <summary>
        /// Main current voltage
        /// </summary>
        [TecdocField(Name = @"Voltage", OldName = @"Spannung", Pos = 73, Length = 2)]
        public byte? Voltage { get; set; }

        /// <summary>
        /// 0 = no, 1 = yes, 2 = optional, 9 = unknown
        /// </summary>
        [TecdocField(Name = @"ABS", OldName = @"ABS", Pos = 75, Length = 1)]
        public byte? ABS { get; set; }

        /// <summary>
        /// 0 = no, 1 = yes, 2 = optional, 9 = unknown
        /// </summary>
        [TecdocField(Name = @"TCS", OldName = @"ASR", Pos = 76, Length = 1)]
        public byte? TCS { get; set; }

        /// <summary>
        /// Engine type (KT 080)
        /// </summary>
        [TecdocField(Name = @"EngType", OldName = @"MotArt", Pos = 77, Length = 3)]
        public short? EngineTypeKey { get; set; }

        /// <summary>
        /// Fuel mixture formation (KT 097)
        /// </summary>
        [TecdocField(Name = @"FuelMixForm", OldName = @"Kraftstoffaufbereitungsprinzip", Pos = 80, Length = 3)]
        public short? FuelInjectionKey { get; set; }

        /// <summary>
        /// Drive type (KT 082)
        /// </summary>
        [TecdocField(Name = @"DriveType", OldName = @"AntrArt", Pos = 83, Length = 3)]
        public short? DriveTypeKey { get; set; }

        /// <summary>
        /// Brake type (KT 083)
        /// </summary>
        [TecdocField(Name = @"BrakeType", OldName = @"BremsArt", Pos = 86, Length = 3)]
        public short? BrakeTypeKey { get; set; }

        /// <summary>
        /// Brake system (KT 084)
        /// </summary>
        [TecdocField(Name = @"BrakeSys", OldName = @"BremsSys", Pos = 89, Length = 3)]
        public short? BrakeSystemKey { get; set; }

        /// <summary>
        /// Number of valves
        /// </summary>
        [TecdocField(Name = @"Valves", OldName = @"Ventile/Brennraum", Pos = 92, Length = 2)]
        public byte? Valves { get; set; }

        /// <summary>
        /// Fuel type (KT 182)
        /// </summary>
        [TecdocField(Name = @"FuelType", OldName = @"KrStoffArt", Pos = 94, Length = 3)]
        public short? FuelTypeKey { get; set; }

        /// <summary>
        /// Catalyst converter type (KT 089)
        /// </summary>
        [TecdocField(Name = @"CatType", OldName = @"KatArt", Pos = 97, Length = 3)]
        public short? ExhaustFilterKey { get; set; }

        /// <summary>
        /// Transmission type (KT 085)
        /// </summary>
        [TecdocField(Name = @"TransmType", OldName = @"GetrArt", Pos = 100, Length = 3)]
        public short? TransmissionTypeKey { get; set; }

        /// <summary>
        /// Body type (KT 086)
        /// </summary>
        [TecdocField(Name = @"BodyType", OldName = @"AufbauArt", Pos = 103, Length = 3)]
        public short? BodyTypeKey { get; set; }

        /// <summary>
        /// 1: K-TypNr series is proposed for deletion, otherwise 0
        /// </summary>
        [TecdocField(Name = @"Delete", OldName = @"Delete", Pos = 106, Length = 1)]
        public bool Delete { get; set; }

        #region Equality using primary key

        public bool Equals(T120? other)
            => other != null && KTypeNo.Equals(other.KTypeNo);

        public override bool Equals(object? obj)
            => obj is T120 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(KTypeNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Allocation of KBA codes to vehicle types
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T121 : IEquatable<T121>
    {
        /// <summary>
        /// Constantly blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserviert", Pos = 0, Length = 22)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant= 121
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 121;

        /// <summary>
        /// German KBA No. (9999999)
        /// </summary>
        [TecdocField(Name = @"KBANo", OldName = @"KBANr", Pos = 29, Length = 7)]
        [Required]
        [StringLength(7)]
        public string KbaNo { get; set; } = default!;

        /// <summary>
        /// Vehicle type number (-&gt; 120)
        /// </summary>
        [TecdocField(Name = @"KTypNo", OldName = @"KTypNr", Pos = 36, Length = 9)]
        public int KTypeNo { get; set; }

        /// <summary>
        /// Body type (KT 086)
        /// </summary>
        [TecdocField(Name = @"BodyType", OldName = @"AufbauArt", Pos = 45, Length = 3)]
        public short? BodyTypeKey { get; set; }

        /// <summary>
        /// General Approval Number
        /// </summary>
        [TecdocField(Name = @"ABENo", OldName = @"ABENr", Pos = 48, Length = 25)]
        [StringLength(25)]
        public string? AbeNo { get; set; }

        /// <summary>
        /// ABE Month (YYYYMM)
        /// </summary>
        [TecdocField(Name = @"ABEfrom", OldName = @"ABEvon", Pos = 73, Length = 6)]
        public int? AbeDateFromYYYYMM { get; set; }

        /// <summary>
        /// Stat. Manufacturer Description
        /// </summary>
        [TecdocField(Name = @"StatMan", OldName = @"StatHer", Pos = 79, Length = 25)]
        [StringLength(25)]
        public string? StatManufacturer { get; set; }

        /// <summary>
        /// Stat. Type Description
        /// </summary>
        [TecdocField(Name = @"StatType", OldName = @"StatTyp", Pos = 104, Length = 25)]
        [StringLength(25)]
        public string? StatType { get; set; }

        #region Equality using primary key

        public bool Equals(T121? other)
            => other != null && StringComparer.InvariantCultureIgnoreCase.Equals(KbaNo, other.KbaNo) && KTypeNo.Equals(other.KTypeNo);

        public override bool Equals(object? obj)
            => obj is T121 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(KbaNo, StringComparer.InvariantCultureIgnoreCase);
            hash.Add(KTypeNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Inclusion/Exclusion of certain countries for a vehicle
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T122 : IEquatable<T122>
    {
        /// <summary>
        /// Constantly blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserviert", Pos = 0, Length = 22)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant =122
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 122;

        /// <summary>
        /// Unambiguous number of the vehicle type
        /// </summary>
        [TecdocField(Name = @"KTypNo", OldName = @"KTypNr", Pos = 29, Length = 9)]
        public int KTypeNo { get; set; }

        /// <summary>
        /// Country Code (-&gt; 010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"LKZ", Pos = 38, Length = 3)]
        [Required]
        [StringLength(3)]
        public string CountryCode { get; set; } = default!;

        /// <summary>
        /// ‘1’ = Country Code is an exclusion, ‘0’ = Country Code is an inclusion.
        /// </summary>
        [TecdocField(Name = @"Exclude", OldName = @"Exclude", Pos = 41, Length = 1)]
        public bool Exclude { get; set; }

        #region Equality using primary key

        public bool Equals(T122? other)
            => other != null && KTypeNo.Equals(other.KTypeNo) && StringComparer.InvariantCultureIgnoreCase.Equals(CountryCode, other.CountryCode);

        public override bool Equals(object? obj)
            => obj is T122 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(KTypeNo);
            hash.Add(CountryCode, StringComparer.InvariantCultureIgnoreCase);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Allocation of Type Mine numbers to vehicle types
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T123 : IEquatable<T123>
    {
        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 0, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant= 123
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 123;

        /// <summary>
        /// French Type Mine Number
        /// </summary>
        [TecdocField(Name = @"TypMine", OldName = @"TypMine", Pos = 7, Length = 15)]
        [Required]
        [StringLength(15)]
        public string TypMine { get; set; } = default!;

        /// <summary>
        /// Vehicle type number (-&gt; 120)
        /// </summary>
        [TecdocField(Name = @"KTypNo", OldName = @"KTypNr", Pos = 22, Length = 9)]
        public int KTypeNo { get; set; }

        #region Equality using primary key

        public bool Equals(T123? other)
            => other != null && StringComparer.InvariantCultureIgnoreCase.Equals(TypMine, other.TypMine) && KTypeNo.Equals(other.KTypeNo);

        public override bool Equals(object? obj)
            => obj is T123 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(TypMine, StringComparer.InvariantCultureIgnoreCase);
            hash.Add(KTypeNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Description of all country specific deviations of vehicle types
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T124 : IEquatable<T124>
    {
        /// <summary>
        /// Constantly blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserved", Pos = 0, Length = 22)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant= 124
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TaleNo => 124;

        /// <summary>
        /// Unambiguous number of the vehicle type
        /// </summary>
        [TecdocField(Name = @"KTypNo", OldName = @"KTypNr", Pos = 29, Length = 9)]
        public int KTypeNo { get; set; }

        /// <summary>
        /// Country Code (-&gt; 010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"LKZ", Pos = 38, Length = 3)]
        [Required]
        [StringLength(3)]
        public string CountryCode { get; set; } = default!;

        /// <summary>
        /// Model year from (YYYYMM) – Production Date
        /// </summary>
        [TecdocField(Name = @"ModYFrom", OldName = @"Bjvon", Pos = 41, Length = 6)]
        public int? DateFromYYYYMM { get; set; }

        /// <summary>
        /// Model year to (YYYYMM) – Production Date
        /// </summary>
        [TecdocField(Name = @"ModYTo", OldName = @"Bjbis", Pos = 47, Length = 6)]
        public int? DateToYYYYMM { get; set; }

        /// <summary>
        /// Engine capacity in cc (taxation value)
        /// </summary>
        [TecdocField(Name = @"ccmTax", OldName = @"ccmSteuer", Pos = 53, Length = 5)]
        public int? EngineCcTax { get; set; }

        /// <summary>
        /// Engine capacity in litre (99,99)
        /// </summary>
        [TecdocField(Name = @"Lit", OldName = @"Lit", Pos = 58, Length = 4)]
        public short? EngineLitre100 { get; set; }

        /// <summary>
        /// Number of cylinders
        /// </summary>
        [TecdocField(Name = @"Cyl", OldName = @"Zyl", Pos = 62, Length = 2)]
        public byte? Cylinders { get; set; }

        /// <summary>
        /// Number of doors
        /// </summary>
        [TecdocField(Name = @"Doors", OldName = @"Tueren", Pos = 64, Length = 1)]
        public byte? Doors { get; set; }

        /// <summary>
        /// Fuel tank capacity
        /// </summary>
        [TecdocField(Name = @"TankCap", OldName = @"TankInhalt", Pos = 65, Length = 4)]
        public short? FuelTankCapacity { get; set; }

        /// <summary>
        /// Main current voltage
        /// </summary>
        [TecdocField(Name = @"Voltage", OldName = @"Spannung", Pos = 69, Length = 2)]
        public byte? Voltage { get; set; }

        /// <summary>
        /// 0 = no, 1 = yes, 2 = optional, 9 = unknown
        /// </summary>
        [TecdocField(Name = @"ABS", OldName = @"ABS", Pos = 71, Length = 1)]
        public byte? ABS { get; set; }

        /// <summary>
        /// 0 = no, 1 = yes, 2 = optional, 9 = unknown
        /// </summary>
        [TecdocField(Name = @"TCS", OldName = @"ASR", Pos = 72, Length = 1)]
        public byte? TCS { get; set; }

        /// <summary>
        /// Fuel type (KT 182)
        /// </summary>
        [TecdocField(Name = @"FuelType", OldName = @"KrStoffArt", Pos = 73, Length = 3)]
        public short? FuelTypeKey { get; set; }

        /// <summary>
        /// Catalyst converter type (KT 089)
        /// </summary>
        [TecdocField(Name = @"CatType", OldName = @"KatArt", Pos = 76, Length = 3)]
        public short? ExhaustFilterKey { get; set; }

        /// <summary>
        /// Transmission type (KT 085)
        /// </summary>
        [TecdocField(Name = @"TransmType", OldName = @"GetrArt", Pos = 79, Length = 3)]
        public short? TransmissionTypeKey { get; set; }

        /// <summary>
        /// Brake type (KT 083)
        /// </summary>
        [TecdocField(Name = @"BrakeType", OldName = @"BremsArt", Pos = 82, Length = 3)]
        public short? BrakeTypeKey { get; set; }

        /// <summary>
        /// Brake system (KT 084)
        /// </summary>
        [TecdocField(Name = @"BrakeSys", OldName = @"BremsSys", Pos = 85, Length = 3)]
        public short? BrakeSystemKey { get; set; }

        #region Equality using primary key

        public bool Equals(T124? other)
            => other != null && KTypeNo.Equals(other.KTypeNo) && StringComparer.InvariantCultureIgnoreCase.Equals(CountryCode, other.CountryCode);

        public override bool Equals(object? obj)
            => obj is T124 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(KTypeNo);
            hash.Add(CountryCode, StringComparer.InvariantCultureIgnoreCase);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Allocation of engine numbers to vehicle types
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T125 : IEquatable<T125>
    {
        /// <summary>
        /// Constantly blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserviert", Pos = 0, Length = 22)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant = 125
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 125;

        /// <summary>
        /// Vehicle type number (-&gt; 120)
        /// </summary>
        [TecdocField(Name = @"KTypNo", OldName = @"KTypNr", Pos = 29, Length = 9)]
        public int KTypeNo { get; set; }

        /// <summary>
        /// Sequential number within the type
        /// </summary>
        [TecdocField(Name = @"SeqNo", OldName = @"LfdNr", Pos = 38, Length = 3)]
        public short SeqNo { get; set; }

        /// <summary>
        /// Engine number (-&gt; 155)
        /// </summary>
        [TecdocField(Name = @"EngNo", OldName = @"MotNr", Pos = 41, Length = 5)]
        public int EngineNo { get; set; }

        /// <summary>
        /// Model Year from (YYYYMM) – Production Date
        /// </summary>
        [TecdocField(Name = @"ModYFrom", OldName = @"Bjvon", Pos = 46, Length = 6)]
        public int? DateFromYYYYMM { get; set; }

        /// <summary>
        /// Model Year to (YYYYMM) – Production Date
        /// </summary>
        [TecdocField(Name = @"ModYTo", OldName = @"Bjbis", Pos = 52, Length = 6)]
        public int? DateToYYYYMM { get; set; }

        /// <summary>
        /// Country Code (-&gt; 010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"LKZ", Pos = 58, Length = 3)]
        [StringLength(3)]
        public string? CountryCode { get; set; }

        /// <summary>
        /// ‘1’ = Country Code is an exclusion, ‘0’ = Country Code is an inclusion.
        /// </summary>
        [TecdocField(Name = @"Exclude", OldName = @"Exclude", Pos = 61, Length = 1)]
        public bool? Exclude { get; set; }

        #region Equality using primary key

        public bool Equals(T125? other)
            => other != null && KTypeNo.Equals(other.KTypeNo) && SeqNo.Equals(other.SeqNo);

        public override bool Equals(object? obj)
            => obj is T125 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(KTypeNo);
            hash.Add(SeqNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Allocation of Swiss type numbers to vehicle types
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T126 : IEquatable<T126>
    {
        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 0, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant= 126
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 126;

        /// <summary>
        /// Swiss Type Number
        /// </summary>
        [TecdocField(Name = @"ChTyp", OldName = @"ChTyp", Pos = 7, Length = 7)]
        [Required]
        [StringLength(7)]
        public string ChTyp { get; set; } = default!;

        /// <summary>
        /// Vehicle Type Number (-&gt; 120)
        /// </summary>
        [TecdocField(Name = @"KTypNo", OldName = @"KTypNr", Pos = 14, Length = 9)]
        public int KTypeNo { get; set; }

        #region Equality using primary key

        public bool Equals(T126? other)
            => other != null && StringComparer.InvariantCultureIgnoreCase.Equals(ChTyp, other.ChTyp) && KTypeNo.Equals(other.KTypeNo);

        public override bool Equals(object? obj)
            => obj is T126 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(ChTyp, StringComparer.InvariantCultureIgnoreCase);
            hash.Add(KTypeNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Allocation of Netherlands number plates to vehicle types
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T127 : IEquatable<T127>
    {
        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 0, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant = 127
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 127;

        /// <summary>
        /// Netherlands Number Plate
        /// </summary>
        [TecdocField(Name = @"NLTyp", OldName = @"NLTyp", Pos = 7, Length = 6)]
        [Required]
        [StringLength(6)]
        public string NLTyp { get; set; } = default!;

        /// <summary>
        /// Vehicle type number (-&gt; 120)
        /// </summary>
        [TecdocField(Name = @"KTypNo", OldName = @"KTypNr", Pos = 13, Length = 9)]
        public int KTypeNo { get; set; }

        #region Equality using primary key

        public bool Equals(T127? other)
            => other != null && StringComparer.InvariantCultureIgnoreCase.Equals(NLTyp, other.NLTyp) && KTypeNo.Equals(other.KTypeNo);

        public override bool Equals(object? obj)
            => obj is T127 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(NLTyp, StringComparer.InvariantCultureIgnoreCase);
            hash.Add(KTypeNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Allocation of Swedish number plates to vehicle types
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T128 : IEquatable<T128>
    {
        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 0, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant= 128
        /// </summary>
        [TecdocField(Name = @"tableNo", OldName = @"SA", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 128;

        /// <summary>
        /// Swedish Number Plate
        /// </summary>
        [TecdocField(Name = @"STyp", OldName = @"STyp", Pos = 7, Length = 6)]
        [Required]
        [StringLength(6)]
        public string STyp { get; set; } = default!;

        /// <summary>
        /// Vehicle type number (-&gt; 120)
        /// </summary>
        [TecdocField(Name = @"KTypNo", OldName = @"KTypNr", Pos = 13, Length = 9)]
        public int KTypeNo { get; set; }

        #region Equality using primary key

        public bool Equals(T128? other)
            => other != null && StringComparer.InvariantCultureIgnoreCase.Equals(STyp, other.STyp) && KTypeNo.Equals(other.KTypeNo);

        public override bool Equals(object? obj)
            => obj is T128 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(STyp, StringComparer.InvariantCultureIgnoreCase);
            hash.Add(KTypeNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Allocation of Austrian NatCodes to vehicle types
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T129 : IEquatable<T129>
    {
        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 0, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant= 129
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 129;

        /// <summary>
        /// Austrian NatCode
        /// </summary>
        [TecdocField(Name = @"STyp", OldName = @"STyp", Pos = 7, Length = 6)]
        [Required]
        [StringLength(6)]
        public string STyp { get; set; } = default!;

        /// <summary>
        /// Vehicle type number (-&gt; 120)
        /// </summary>
        [TecdocField(Name = @"KTypNo", OldName = @"KTypNr", Pos = 13, Length = 9)]
        public int KTypeNo { get; set; }

        #region Equality using primary key

        public bool Equals(T129? other)
            => other != null && StringComparer.InvariantCultureIgnoreCase.Equals(STyp, other.STyp) && KTypeNo.Equals(other.KTypeNo);

        public override bool Equals(object? obj)
            => obj is T129 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(STyp, StringComparer.InvariantCultureIgnoreCase);
            hash.Add(KTypeNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Additional information on all vehicle model series
    /// </summary>
    /// <remarks>
    /// Notes on LbezNr1 and LbezNr2: One of the fields is always filled. When only one field is filled, the other one
    /// contains ‘000000000’.
    /// </remarks>
    public partial class T140 : IEquatable<T140>
    {
        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 0, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant= 140
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 140;

        /// <summary>
        /// Unambiguous number of the vehicle model series
        /// </summary>
        [TecdocField(Name = @"KModNo", OldName = @"KModNr", Pos = 7, Length = 5)]
        public int KModNo { get; set; }

        /// <summary>
        /// Description Number (-&gt;012) of the sales description
        /// </summary>
        [TecdocField(Name = @"CTermNo1", OldName = @"LbezNr1", Pos = 12, Length = 9)]
        public int SalesDescriptionCTermNo { get; set; }

        /// <summary>
        /// Description Number (-&gt;012) of the model generation
        /// </summary>
        [TecdocField(Name = @"CTermNo2", OldName = @"LbezNr2", Pos = 21, Length = 9)]
        public int ModelGenerationCTermNo { get; set; }

        #region Equality using primary key

        public bool Equals(T140? other)
            => other != null && KModNo.Equals(other.KModNo);

        public override bool Equals(object? obj)
            => obj is T140 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(KModNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Allocation of model types to model series
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T143 : IEquatable<T143>
    {
        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 0, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant= 143
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 143;

        /// <summary>
        /// Unambiguous number of the vehicle model series
        /// </summary>
        [TecdocField(Name = @"KmodNo", OldName = @"KmodNr", Pos = 7, Length = 5)]
        public int KModNo { get; set; }

        /// <summary>
        /// Country Code (-&gt; 010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"CountryCode", Pos = 12, Length = 3)]
        [Required]
        [StringLength(3)]
        public string CountryCode { get; set; } = default!;

        /// <summary>
        /// Display sequence of the sample within one (Model Series, CountryCode) – Group
        /// </summary>
        [TecdocField(Name = @"SortNo", OldName = @"SortNr", Pos = 15, Length = 4)]
        public short SortNo { get; set; }

        /// <summary>
        /// Sample
        /// </summary>
        [TecdocField(Name = @"ModelType", OldName = @"Muster", Pos = 19, Length = 10)]
        [Required]
        [StringLength(10)]
        public string ModelType { get; set; } = default!;

        #region Equality using primary key

        public bool Equals(T143? other)
            => other != null && KModNo.Equals(other.KModNo) && StringComparer.InvariantCultureIgnoreCase.Equals(CountryCode, other.CountryCode) && StringComparer.InvariantCultureIgnoreCase.Equals(ModelType, other.ModelType);

        public override bool Equals(object? obj)
            => obj is T143 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(KModNo);
            hash.Add(CountryCode, StringComparer.InvariantCultureIgnoreCase);
            hash.Add(ModelType, StringComparer.InvariantCultureIgnoreCase);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Additional information on all vehicle types
    /// </summary>
    /// <remarks>
    /// Note on CTermNo1 and CTermNo2: One of the fields is always filled. When only one field is filled, the              other
    /// contains ‘000000000’.
    /// </remarks>
    public partial class T144 : IEquatable<T144>
    {
        /// <summary>
        /// Constantly blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserviert", Pos = 0, Length = 22)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant = 144
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 144;

        /// <summary>
        /// Unambiguous number of the vehicle type
        /// </summary>
        [TecdocField(Name = @"KTypNo", OldName = @"KTypNr", Pos = 29, Length = 9)]
        public int KTypeNo { get; set; }

        /// <summary>
        /// Description Number (-&gt;012) of the type description
        /// </summary>
        [TecdocField(Name = @"CTermNo1", OldName = @"LbezNr1", Pos = 38, Length = 9)]
        public int TypeDescriptionCTermNo { get; set; }

        /// <summary>
        /// Description Number (-&gt;012) of the Note
        /// </summary>
        [TecdocField(Name = @"CTErmNo2", OldName = @"LbezNr2", Pos = 47, Length = 9)]
        public int NoteCTermNo { get; set; }

        #region Equality using primary key

        public bool Equals(T144? other)
            => other != null && KTypeNo.Equals(other.KTypeNo);

        public override bool Equals(object? obj)
            => obj is T144 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(KTypeNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Allocation of model types to vehicle types
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T145 : IEquatable<T145>
    {
        /// <summary>
        /// Constantly blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserviert", Pos = 0, Length = 22)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant= 145
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 145;

        /// <summary>
        /// Unambiguous number of the vehicle type
        /// </summary>
        [TecdocField(Name = @"KTypNo", OldName = @"KTypNr", Pos = 29, Length = 9)]
        public int KTypeNo { get; set; }

        /// <summary>
        /// Country code (-&gt; 010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"CountryCode", Pos = 38, Length = 3)]
        [Required]
        [StringLength(3)]
        public string CountryCode { get; set; } = default!;

        /// <summary>
        /// Display sequence of the sample within one (Model Series, CountryCode) – Group
        /// </summary>
        [TecdocField(Name = @"SortNo", OldName = @"SortNr", Pos = 41, Length = 4)]
        public short SortNo { get; set; }

        /// <summary>
        /// Model Type
        /// </summary>
        [TecdocField(Name = @"ModelType", OldName = @"Muster", Pos = 45, Length = 10)]
        [Required]
        [StringLength(10)]
        public string ModelType { get; set; } = default!;

        #region Equality using primary key

        public bool Equals(T145? other)
            => other != null && KTypeNo.Equals(other.KTypeNo) && StringComparer.InvariantCultureIgnoreCase.Equals(CountryCode, other.CountryCode) && StringComparer.InvariantCultureIgnoreCase.Equals(ModelType, other.ModelType);

        public override bool Equals(object? obj)
            => obj is T145 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(KTypeNo);
            hash.Add(CountryCode, StringComparer.InvariantCultureIgnoreCase);
            hash.Add(ModelType, StringComparer.InvariantCultureIgnoreCase);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Body Type Synonyms
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T146 : IEquatable<T146>
    {
        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 0, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant= 146
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 146;

        /// <summary>
        /// Body Type (KT 086)
        /// </summary>
        [TecdocField(Name = @"BodyType", OldName = @"AufbauArt", Pos = 7, Length = 3)]
        public short BodyTypeKey { get; set; }

        /// <summary>
        /// Unambiguous number of the vehicle model series
        /// </summary>
        [TecdocField(Name = @"KModNo", OldName = @"KmodNr", Pos = 10, Length = 5)]
        public int KModNo { get; set; }

        /// <summary>
        /// Description Number (-&gt;012) of the synonym
        /// </summary>
        [TecdocField(Name = @"CTermNo", OldName = @"LbezNr", Pos = 15, Length = 9)]
        public int SynonymCTermNo { get; set; }

        #region Equality using primary key

        public bool Equals(T146? other)
            => other != null && BodyTypeKey.Equals(other.BodyTypeKey) && KModNo.Equals(other.KModNo);

        public override bool Equals(object? obj)
            => obj is T146 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(BodyTypeKey);
            hash.Add(KModNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Drive Type Synonyms
    /// </summary>
    /// <remarks>
    /// Commercial Vehicle                              Information
    /// </remarks>
    public partial class T147 : IEquatable<T147>
    {
        /// <summary>
        /// Constantly blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserviert", Pos = 0, Length = 22)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant = 147
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 147;

        /// <summary>
        /// Drive Type (082)
        /// </summary>
        [TecdocField(Name = @"DriveType", OldName = @"AntrArt", Pos = 29, Length = 3)]
        public short DriveTypeKey { get; set; }

        /// <summary>
        /// Unambiguous number of the vehicle type
        /// </summary>
        [TecdocField(Name = @"KTypNo", OldName = @"KTypNr", Pos = 32, Length = 9)]
        public int KTypeNo { get; set; }

        /// <summary>
        /// Description Number (-&gt;012) of the synonym
        /// </summary>
        [TecdocField(Name = @"CTermNo", OldName = @"LbezNr", Pos = 41, Length = 9)]
        public int SynonymCTermNo { get; set; }

        #region Equality using primary key

        public bool Equals(T147? other)
            => other != null && DriveTypeKey.Equals(other.DriveTypeKey) && KTypeNo.Equals(other.KTypeNo);

        public override bool Equals(object? obj)
            => obj is T147 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(DriveTypeKey);
            hash.Add(KTypeNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Description of all engine types
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T155 : IEquatable<T155>
    {
        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 0, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant= 155
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 155;

        /// <summary>
        /// Engine Manufacturer Number
        /// </summary>
        [TecdocField(Name = @"ManNo", OldName = @"HerNr", Pos = 7, Length = 6)]
        public int ManufacturerNo { get; set; }

        /// <summary>
        /// Unambiguous engine number
        /// </summary>
        [TecdocField(Name = @"EngNo", OldName = @"MotNr", Pos = 13, Length = 5)]
        public int EngineNo { get; set; }

        /// <summary>
        /// Engine description
        /// </summary>
        [TecdocField(Name = @"EngCode", OldName = @"MCode", Pos = 18, Length = 60)]
        [Required]
        [StringLength(60)]
        public string EngineCode { get; set; } = default!;

        /// <summary>
        /// Model Year from (YYYYMM) – Production Date
        /// </summary>
        [TecdocField(Name = @"ModYFrom", OldName = @"BJvon", Pos = 78, Length = 6)]
        public int? DateFromYYYYMM { get; set; }

        /// <summary>
        /// Model Year to (YYYYMM) – Production Date
        /// </summary>
        [TecdocField(Name = @"ModYTo", OldName = @"BJbis", Pos = 84, Length = 6)]
        public int? DateToYYYYMM { get; set; }

        /// <summary>
        /// Engine output in kW from
        /// </summary>
        [TecdocField(Name = @"kWFrom", OldName = @"kWvon", Pos = 90, Length = 4)]
        public short? PowerKwFrom { get; set; }

        /// <summary>
        /// Engine output in kW to
        /// </summary>
        [TecdocField(Name = @"kWTo", OldName = @"kWbis", Pos = 94, Length = 4)]
        public short? PowerKwTo { get; set; }

        /// <summary>
        /// Engine output in HP from
        /// </summary>
        [TecdocField(Name = @"HPFrom", OldName = @"PSvon", Pos = 98, Length = 4)]
        public short? HorsepowerFrom { get; set; }

        /// <summary>
        /// Engine output in HP to
        /// </summary>
        [TecdocField(Name = @"HPTo", OldName = @"PSbis", Pos = 102, Length = 4)]
        public short? HorsepowerTo { get; set; }

        /// <summary>
        /// Number of valves
        /// </summary>
        [TecdocField(Name = @"Valves", OldName = @"Ventile", Pos = 106, Length = 2)]
        public byte? Valves { get; set; }

        /// <summary>
        /// Number of cylinders
        /// </summary>
        [TecdocField(Name = @"Cyl", OldName = @"Zyl", Pos = 108, Length = 2)]
        public byte? Cylinders { get; set; }

        /// <summary>
        /// Compression * 100
        /// </summary>
        [TecdocField(Name = @"ComprFrom", OldName = @"VerdichtV", Pos = 110, Length = 4)]
        public short? CompressionFrom100 { get; set; }

        /// <summary>
        /// Compression to * 100
        /// </summary>
        [TecdocField(Name = @"ComprTo", OldName = @"VerdichtB", Pos = 114, Length = 5)]
        public int? CompressionTo100 { get; set; }

        /// <summary>
        /// Torque from
        /// </summary>
        [TecdocField(Name = @"TorqFrom", OldName = @"DrehmV", Pos = 119, Length = 4)]
        public short? TorqueFrom { get; set; }

        /// <summary>
        /// Torque to
        /// </summary>
        [TecdocField(Name = @"TorqTo", OldName = @"DrehmB", Pos = 123, Length = 5)]
        public int? TorqueTo { get; set; }

        /// <summary>
        /// Engine capacity in cc (taxation) from
        /// </summary>
        [TecdocField(Name = @"ccTaxFrom", OldName = @"ccmSteuerV", Pos = 128, Length = 5)]
        public int? EngineCcTaxFrom { get; set; }

        /// <summary>
        /// Engine capacity in cc (taxation) to
        /// </summary>
        [TecdocField(Name = @"ccTaxTo", OldName = @"ccmSteuerB", Pos = 133, Length = 5)]
        public int? EngineCcTaxTo { get; set; }

        /// <summary>
        /// Engine capacity in cc (technical) from
        /// </summary>
        [TecdocField(Name = @"ccTechFrom", OldName = @"ccmTechV", Pos = 138, Length = 5)]
        public int? EngineCcTechFrom { get; set; }

        /// <summary>
        /// Engine capacity in cc (technical) to
        /// </summary>
        [TecdocField(Name = @"ccTechTo", OldName = @"ccmTechB", Pos = 143, Length = 5)]
        public int? EngineCcTechTo { get; set; }

        /// <summary>
        /// Engine capacity in litre (taxation) from
        /// </summary>
        [TecdocField(Name = @"litTaxFrom", OldName = @"LitSteuerV", Pos = 148, Length = 4)]
        public short? EngineLitreTaxFrom100 { get; set; }

        /// <summary>
        /// Engine capacity in litre (taxation) to
        /// </summary>
        [TecdocField(Name = @"litTaxTo", OldName = @"LitSteuerB", Pos = 152, Length = 4)]
        public short? EngineLitreTaxTo100 { get; set; }

        /// <summary>
        /// Engine capacity in litre (technical) from
        /// </summary>
        [TecdocField(Name = @"litTechFrom", OldName = @"LitTechV", Pos = 156, Length = 4)]
        public short? EngineLitreTechFrom100 { get; set; }

        /// <summary>
        /// Engine capacity in litre (technical) to
        /// </summary>
        [TecdocField(Name = @"litTechTo", OldName = @"LitTechB", Pos = 160, Length = 4)]
        public short? EngineLitreTechTo100 { get; set; }

        /// <summary>
        /// Engine usage (-&gt;KT 098)
        /// </summary>
        [TecdocField(Name = @"EngUse", OldName = @"MotVerw", Pos = 164, Length = 3)]
        public short? EngineUsageKey { get; set; }

        /// <summary>
        /// Engine Design (-&gt;KT 096)
        /// </summary>
        [TecdocField(Name = @"EngDesign", OldName = @"MotBauForm", Pos = 167, Length = 3)]
        public short? EngineDesignKey { get; set; }

        /// <summary>
        /// Fuel Type (-&gt;KT 088)
        /// </summary>
        [TecdocField(Name = @"FuelType", OldName = @"KrStoffArt", Pos = 170, Length = 3)]
        public short? FuelTypeKey { get; set; }

        /// <summary>
        /// Fuel Mixture Formation (-&gt;KT 097)
        /// </summary>
        [TecdocField(Name = @"FuelMixForm", OldName = @"KrStoffAuf", Pos = 173, Length = 3)]
        public short? FuelInjectionKey { get; set; }

        /// <summary>
        /// Engine aspiration (-&gt;KT 099); charger
        /// </summary>
        [TecdocField(Name = @"EngAsp", OldName = @"MotBeatm", Pos = 176, Length = 3)]
        public short? EngineAspirationKey { get; set; }

        /// <summary>
        /// RPM kW from
        /// </summary>
        [TecdocField(Name = @"RPMkWFrom", OldName = @"UminKwV", Pos = 179, Length = 5)]
        public int? RpmKwFrom { get; set; }

        /// <summary>
        /// RPM kW to
        /// </summary>
        [TecdocField(Name = @"RPMkWTo", OldName = @"UminKwB", Pos = 184, Length = 5)]
        public int? RpmKwTo { get; set; }

        /// <summary>
        /// RPM torque from
        /// </summary>
        [TecdocField(Name = @"RPMTorqFrom", OldName = @"UminDrehmV", Pos = 189, Length = 5)]
        public int? RpmTorqueFrom { get; set; }

        /// <summary>
        /// RPM torque to
        /// </summary>
        [TecdocField(Name = @"RPMTorqTo", OldName = @"UminDrehmB", Pos = 194, Length = 5)]
        public int? RpmTorqueTo { get; set; }

        /// <summary>
        /// Number of crankshaft bearings
        /// </summary>
        [TecdocField(Name = @"CrankBearQuant", OldName = @"Kurbel", Pos = 199, Length = 2)]
        public byte? CrankshaftBearings { get; set; }

        /// <summary>
        /// Bore * 1000
        /// </summary>
        [TecdocField(Name = @"Bore", OldName = @"Bohrung", Pos = 201, Length = 6)]
        public int? Bore1000 { get; set; }

        /// <summary>
        /// Stroke * 1000
        /// </summary>
        [TecdocField(Name = @"Stroke", OldName = @"Hub", Pos = 207, Length = 6)]
        public int? Stroke1000 { get; set; }

        /// <summary>
        /// Engine type (-&gt;KT 080)
        /// </summary>
        [TecdocField(Name = @"EngType", OldName = @"Motorart", Pos = 213, Length = 3)]
        public short? EngineTypeKey { get; set; }

        /// <summary>
        /// Exhaust norm (-&gt; KT 63)
        /// </summary>
        [TecdocField(Name = @"ExhNorm", OldName = @"Abgasnorm", Pos = 216, Length = 3)]
        public short? EmissionStandardKey { get; set; }

        /// <summary>
        /// Cylinder design (-&gt; KT 79)
        /// </summary>
        [TecdocField(Name = @"CylDesign", OldName = @"ZylBauForm", Pos = 219, Length = 3)]
        public short? CylinderDesignKey { get; set; }

        /// <summary>
        /// Engine management (-&gt; KT 77)
        /// </summary>
        [TecdocField(Name = @"EngMngmnt", OldName = @"MotSteuer", Pos = 222, Length = 3)]
        public short? EngineTimingKey { get; set; }

        /// <summary>
        /// Valve control (-&gt; KT 78)
        /// </summary>
        [TecdocField(Name = @"ValveCtrl", OldName = @"VentilSteuer", Pos = 225, Length = 3)]
        public short? ValveControlKey { get; set; }

        /// <summary>
        /// Cooling type (-&gt; KT 76)
        /// </summary>
        [TecdocField(Name = @"CoolType", OldName = @"KuehlArt", Pos = 228, Length = 3)]
        public short? CoolingTypeKey { get; set; }

        /// <summary>
        /// Sales description
        /// </summary>
        [TecdocField(Name = @"SalesTerm", OldName = @"VkBez", Pos = 231, Length = 30)]
        [StringLength(30)]
        public string? SalesDescription { get; set; }

        /// <summary>
        /// 0 = Inclusion, 1 = Exclusion of countries (→ DT 156)
        /// </summary>
        [TecdocField(Name = @"Exclude", OldName = @"Exclude", Pos = 261, Length = 1)]
        public bool? Exclude { get; set; }

        /// <summary>
        /// 1: Engine series is proposed for deletion, otherwise 0
        /// </summary>
        [TecdocField(Name = @"Delete", OldName = @"Delete", Pos = 262, Length = 1)]
        public bool Delete { get; set; }

        #region Equality using primary key

        public bool Equals(T155? other)
            => other != null && EngineNo.Equals(other.EngineNo);

        public override bool Equals(object? obj)
            => obj is T155 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(EngineNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Country restrictions for engines
    /// </summary>
    /// <remarks>
    ///    Notes:            Country codes may not overlap.
    ///                      The country code field CountryCode               must contain a valid country code (&lt;&gt; Blank).
    /// </remarks>
    public partial class T156 : IEquatable<T156>
    {
        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 0, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant "156"
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 156;

        /// <summary>
        /// Unambiguous engine numbers (DT 155)
        /// </summary>
        [TecdocField(Name = @"EngNo", OldName = @"MotNr", Pos = 7, Length = 5)]
        public int EngineNo { get; set; }

        /// <summary>
        /// Country Code (Key 010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"LKZ", Pos = 12, Length = 3)]
        [Required]
        [StringLength(3)]
        public string CountryCode { get; set; } = default!;

        #region Equality using primary key

        public bool Equals(T156? other)
            => other != null && EngineNo.Equals(other.EngineNo) && StringComparer.InvariantCultureIgnoreCase.Equals(CountryCode, other.CountryCode);

        public override bool Equals(object? obj)
            => obj is T156 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(EngineNo);
            hash.Add(CountryCode, StringComparer.InvariantCultureIgnoreCase);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Description of all Axle types
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T160 : IEquatable<T160>
    {
        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 0, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant = 160
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 160;

        /// <summary>
        /// Unambiguous Axle number
        /// </summary>
        [TecdocField(Name = @"ATypNo", OldName = @"ATypNr", Pos = 7, Length = 5)]
        public int AxleNo { get; set; }

        /// <summary>
        /// Description (Axle type)
        /// </summary>
        [TecdocField(Name = @"Term", OldName = @"Bezeichnung", Pos = 12, Length = 30)]
        [Required]
        [StringLength(30)]
        public string Description { get; set; } = default!;

        /// <summary>
        /// Model-Key (-&gt; 110)
        /// </summary>
        [TecdocField(Name = @"KmodNo", OldName = @"KmodNr", Pos = 42, Length = 5)]
        public int KModNo { get; set; }

        /// <summary>
        /// Sort-Key for Sorting
        /// </summary>
        [TecdocField(Name = @"SortNo", OldName = @"SortNr", Pos = 47, Length = 4)]
        public short SortNo { get; set; }

        /// <summary>
        /// Model Year from (YYYYMM) – Production Date
        /// </summary>
        [TecdocField(Name = @"ModYFrom", OldName = @"Bjvon", Pos = 51, Length = 6)]
        public int? DateFromYYYYMM { get; set; }

        /// <summary>
        /// Model Year to (YYYYMM) – Production Date
        /// </summary>
        [TecdocField(Name = @"ModYTo", OldName = @"Bjbis", Pos = 57, Length = 6)]
        public int? DateToYYYYMM { get; set; }

        /// <summary>
        /// Axle type (KT 68)
        /// </summary>
        [TecdocField(Name = @"AxleType", OldName = @"AchsArt", Pos = 63, Length = 3)]
        public short AxleTypeKey { get; set; }

        /// <summary>
        /// Style (KT 95)
        /// </summary>
        [TecdocField(Name = @"AxleStyle", OldName = @"Ausführung", Pos = 66, Length = 3)]
        public short AxleStyleKey { get; set; }

        /// <summary>
        /// Brake type (KT 83)
        /// </summary>
        [TecdocField(Name = @"BrakeType", OldName = @"BremsAusf", Pos = 69, Length = 3)]
        public short? BrakeTypeKey { get; set; }

        /// <summary>
        /// Axle-body (KT 214)
        /// </summary>
        [TecdocField(Name = @"AxleBody", OldName = @"Achskörper", Pos = 72, Length = 3)]
        public short? AxleBodyKey { get; set; }

        /// <summary>
        /// Maximum Axle Load in Kg from
        /// </summary>
        [TecdocField(Name = @"MaxLoadFrom", OldName = @"ZulLastVon", Pos = 75, Length = 5)]
        public int? MaxKgLoadFrom { get; set; }

        /// <summary>
        /// Maximum Axle Load in Kg to
        /// </summary>
        [TecdocField(Name = @"MaxLoadTo", OldName = @"ZulLastBis", Pos = 80, Length = 5)]
        public int? MaxKgLoadTo { get; set; }

        /// <summary>
        /// Wheel mounting (KT 213)
        /// </summary>
        [TecdocField(Name = @"WheelMount", OldName = @"RadBefestigung", Pos = 85, Length = 3)]
        public short? WheelMountingKey { get; set; }

        /// <summary>
        /// Track width (mm)
        /// </summary>
        [TecdocField(Name = @"TrWidth", OldName = @"Spurweite", Pos = 88, Length = 4)]
        public short? TrackWidth { get; set; }

        /// <summary>
        /// Hub system
        /// </summary>
        [TecdocField(Name = @"HubWidth", OldName = @"Nabensystem", Pos = 92, Length = 20)]
        [StringLength(20)]
        public string? HubSystem { get; set; }

        /// <summary>
        /// Distance between road pavement and vehicle frame from
        /// </summary>
        [TecdocField(Name = @"DrivHeightFrom", OldName = @"Fahrhöhe von", Pos = 112, Length = 4)]
        public short? DrivingHeightFrom { get; set; }

        /// <summary>
        /// Distance between road pavement and vehicle frame to
        /// </summary>
        [TecdocField(Name = @"DdrivHeightTo", OldName = @"Fahrhöhe bis", Pos = 116, Length = 4)]
        public short? DrivingHeightTo { get; set; }

        /// <summary>
        /// 1: ATypNr series is proposed for deletion, otherwise 0
        /// </summary>
        [TecdocField(Name = @"Delete", OldName = @"Delete", Pos = 120, Length = 1)]
        public bool Delete { get; set; }

        #region Equality using primary key

        public bool Equals(T160? other)
            => other != null && AxleNo.Equals(other.AxleNo);

        public override bool Equals(object? obj)
            => obj is T160 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(AxleNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Allocation of body types to Axle types
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T161 : IEquatable<T161>
    {
        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 0, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant = 161
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 161;

        /// <summary>
        /// Unambiguous Axle number
        /// </summary>
        [TecdocField(Name = @"ATypNo", OldName = @"AtypNr", Pos = 7, Length = 5)]
        public int AxleNo { get; set; }

        /// <summary>
        /// Country Code (-&gt; 010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"CountryCode", Pos = 12, Length = 3)]
        [StringLength(3)]
        public string? CountryCode { get; set; }

        /// <summary>
        /// Display sequence of the sample within one Axle-type
        /// </summary>
        [TecdocField(Name = @"SortNo", OldName = @"SortNr", Pos = 15, Length = 4)]
        public short SortNo { get; set; }

        /// <summary>
        /// Axle Body Type
        /// </summary>
        [TecdocField(Name = @"BodyType", OldName = @"Muster", Pos = 19, Length = 20)]
        [Required]
        [StringLength(20)]
        public string BodyType { get; set; } = default!;

        #region Equality using primary key

        public bool Equals(T161? other)
            => other != null && AxleNo.Equals(other.AxleNo) && SortNo.Equals(other.SortNo) && StringComparer.InvariantCultureIgnoreCase.Equals(BodyType, other.BodyType);

        public override bool Equals(object? obj)
            => obj is T161 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(AxleNo);
            hash.Add(SortNo);
            hash.Add(BodyType, StringComparer.InvariantCultureIgnoreCase);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Allocation of wheelbases to Axle
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T162 : IEquatable<T162>
    {
        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 0, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant = 162
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 162;

        /// <summary>
        /// Unambiguous Axle number
        /// </summary>
        [TecdocField(Name = @"ATypNo", OldName = @"AtypNr", Pos = 7, Length = 5)]
        public int AxleNo { get; set; }

        /// <summary>
        /// Sequential number for the Axle-position within the Axle-type
        /// </summary>
        [TecdocField(Name = @"SeqNo", OldName = @"LfdNr", Pos = 12, Length = 3)]
        public short SeqNo { get; set; }

        /// <summary>
        /// Sequential number for the wheelbases within the Axle-position
        /// </summary>
        [TecdocField(Name = @"SortNo", OldName = @"SortNr", Pos = 15, Length = 3)]
        public short SortNo { get; set; }

        /// <summary>
        /// Axle-position (KT 064)
        /// </summary>
        [TecdocField(Name = @"AxlePos", OldName = @"AchsPos", Pos = 18, Length = 3)]
        [Required]
        [StringLength(3)]
        public string AxlePositionKey { get; set; } = default!;

        /// <summary>
        /// Wheelbase (mm)
        /// </summary>
        [TecdocField(Name = @"Wheelbase", OldName = @"Radstand", Pos = 21, Length = 6)]
        public int Wheelbase { get; set; }

        #region Equality using primary key

        public bool Equals(T162? other)
            => other != null && AxleNo.Equals(other.AxleNo) && SeqNo.Equals(other.SeqNo) && SortNo.Equals(other.SortNo);

        public override bool Equals(object? obj)
            => obj is T162 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(AxleNo);
            hash.Add(SeqNo);
            hash.Add(SortNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Allocation of Brake-sizes to Axles
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T163 : IEquatable<T163>
    {
        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 0, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant = 163
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 163;

        /// <summary>
        /// Unambiguous axle number
        /// </summary>
        [TecdocField(Name = @"ATypNo", OldName = @"AtypNr", Pos = 7, Length = 5)]
        public int AxleNo { get; set; }

        /// <summary>
        /// Sequential number for the brake-size within the axle-type
        /// </summary>
        [TecdocField(Name = @"SeqNo", OldName = @"LfdNr", Pos = 12, Length = 3)]
        public short SeqNo { get; set; }

        /// <summary>
        /// brake-size (KT 216)
        /// </summary>
        [TecdocField(Name = @"BrakeSze", OldName = @"Bremsengröße", Pos = 15, Length = 3)]
        public short BrakeSizeKey { get; set; }

        /// <summary>
        /// brake-size description
        /// </summary>
        [TecdocField(Name = @"BrTerm", OldName = @"Bezeichnung", Pos = 18, Length = 20)]
        [StringLength(20)]
        public string? BrakeSizeDescription { get; set; }

        #region Equality using primary key

        public bool Equals(T163? other)
            => other != null && AxleNo.Equals(other.AxleNo) && SeqNo.Equals(other.SeqNo);

        public override bool Equals(object? obj)
            => obj is T163 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(AxleNo);
            hash.Add(SeqNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Allocation of Axle-types to primary CV Types
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T164 : IEquatable<T164>
    {
        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 0, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant = 163
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 164;

        /// <summary>
        /// Unambiguous CV Type number
        /// </summary>
        [TecdocField(Name = @"NTypNo", OldName = @"NtypNr", Pos = 7, Length = 9)]
        public int NTypeNo { get; set; }

        /// <summary>
        /// Sequential number within the NtypNr
        /// </summary>
        [TecdocField(Name = @"SeqNo", OldName = @"LfdNr", Pos = 16, Length = 3)]
        public short SeqNo { get; set; }

        /// <summary>
        /// Sorting of the linkage within the Axle-position
        /// </summary>
        [TecdocField(Name = @"SortNo", OldName = @"SortNr", Pos = 19, Length = 3)]
        public short SortNo { get; set; }

        /// <summary>
        /// Axle-type-number (-&gt; 160)
        /// </summary>
        [TecdocField(Name = @"ATypNo", OldName = @"ATypNr", Pos = 22, Length = 5)]
        public int AxleNo { get; set; }

        /// <summary>
        /// Axle-position (KT 064)
        /// </summary>
        [TecdocField(Name = @"AxlePos", OldName = @"AchsPos", Pos = 27, Length = 3)]
        public short AxlePositionKey { get; set; }

        /// <summary>
        /// Model Year from (YYYYMM) – Production Date
        /// </summary>
        [TecdocField(Name = @"ModYFrom", OldName = @"BJvon", Pos = 30, Length = 6)]
        public int? DateFromYYYYMM { get; set; }

        /// <summary>
        /// Model Year to (YYYYMM) – Production Date
        /// </summary>
        [TecdocField(Name = @"ModYTo", OldName = @"BJbis", Pos = 36, Length = 6)]
        public int? DateToYYYYMM { get; set; }

        /// <summary>
        /// Country Code (-&gt; 010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"LKZ", Pos = 42, Length = 3)]
        [Required]
        [StringLength(3)]
        public string CountryCode { get; set; } = default!;

        /// <summary>
        /// = Inclusion, 1 = Exclusion of countries
        /// </summary>
        [TecdocField(Name = @"Exclude", OldName = @"Exclude", Pos = 45, Length = 1)]
        public bool? Exclude { get; set; }

        #region Equality using primary key

        public bool Equals(T164? other)
            => other != null && NTypeNo.Equals(other.NTypeNo) && SeqNo.Equals(other.SeqNo) && AxleNo.Equals(other.AxleNo) && StringComparer.InvariantCultureIgnoreCase.Equals(CountryCode, other.CountryCode);

        public override bool Equals(object? obj)
            => obj is T164 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(NTypeNo);
            hash.Add(SeqNo);
            hash.Add(AxleNo);
            hash.Add(CountryCode, StringComparer.InvariantCultureIgnoreCase);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Power Output
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T180 : IEquatable<T180>
    {
        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"", Pos = 0, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant= 180
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 180;

        /// <summary>
        /// 2: KTyp vehicle in table 120 16: NTyp vehicle in table 532 14: EngNo in table 155
        /// </summary>
        [TecdocField(Name = @"LnkTargetType", OldName = @"", Pos = 7, Length = 3)]
        public short LinkageTargetType { get; set; }

        /// <summary>
        /// KTyp, NTyp or EngNo
        /// </summary>
        [TecdocField(Name = @"LnkTargetNo", OldName = @"", Pos = 10, Length = 9)]
        public int LinkageTargetNo { get; set; }

        /// <summary>
        /// → KT 87
        /// </summary>
        [TecdocField(Name = @"PowerOutputType", OldName = @"", Pos = 19, Length = 3)]
        public short PowerOutputTypeKey { get; set; }

        /// <summary>
        /// → KT 182
        /// </summary>
        [TecdocField(Name = @"FuelType", OldName = @"", Pos = 22, Length = 3)]
        public short FuelTypeKey { get; set; }

        /// <summary>
        /// Power output
        /// </summary>
        [TecdocField(Name = @"KW", OldName = @"", Pos = 25, Length = 5)]
        public int PowerKw { get; set; }

        #region Equality using primary key

        public bool Equals(T180? other)
            => other != null && LinkageTargetType.Equals(other.LinkageTargetType) && LinkageTargetNo.Equals(other.LinkageTargetNo) && PowerOutputTypeKey.Equals(other.PowerOutputTypeKey) && FuelTypeKey.Equals(other.FuelTypeKey);

        public override bool Equals(object? obj)
            => obj is T180 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(LinkageTargetType);
            hash.Add(LinkageTargetNo);
            hash.Add(PowerOutputTypeKey);
            hash.Add(FuelTypeKey);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Main Article Data Table
    /// </summary>
    /// <remarks>
    ///                  (*) Type  ‘U’ starting       Data Release 0519 – type ‘C’ until then
    ///                  Notes:                         Every article should have an article-status in table 212 (Country-Specific
    ///                                                 Article-data). Article-numbers, without any article-status in table 212, will
    ///                                                 get the default article-status 1 (Normal-status) per DVM (Data Validation
    ///                                                 Modul).
    /// </remarks>
    public partial class T200 : IEquatable<T200>
    {
        /// <summary>
        /// Article Number in the data supplier format
        /// </summary>
        [TecdocField(Name = @"ArtNo", OldName = @"ArtNr", Pos = 0, Length = 22)]
        [Required]
        [StringLength(22)]
        public string PartNo { get; set; } = default!;

        /// <summary>
        /// Data Supplier Number Constant (-&gt; 040)
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        public short BrandNo { get; set; }

        /// <summary>
        /// Data Table Constant « 200 »
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 200;

        /// <summary>
        /// Description text number in the language key table
        /// </summary>
        [TecdocField(Name = @"TermNo", OldName = @"BezNr", Pos = 29, Length = 9)]
        public int? DescriptionTermNo { get; set; }

        /// <summary>
        /// Self-service packing = 1, otherwise 0
        /// </summary>
        [TecdocField(Name = @"SelfServ", OldName = @"KZSB", Pos = 38, Length = 1)]
        public bool? SelfServicePacking { get; set; }

        /// <summary>
        /// Mandatory material certification = 1, otherwise 0
        /// </summary>
        [TecdocField(Name = @"MatCert", OldName = @"KZMat", Pos = 39, Length = 1)]
        public bool? MandatoryMaterialCertification { get; set; }

        /// <summary>
        /// Exchange Part = 1, otherwise 0
        /// </summary>
        [TecdocField(Name = @"Remanufact", OldName = @"KZAT", Pos = 40, Length = 1)]
        public bool? RemanufacturedPart { get; set; }

        /// <summary>
        /// Accessory = 1, otherwise 0
        /// </summary>
        [TecdocField(Name = @"Accessory", OldName = @"KZZub", Pos = 41, Length = 1)]
        public bool? Accessory { get; set; }

        /// <summary>
        /// Batch size 1 (multiple of VPE)
        /// </summary>
        [TecdocField(Name = @"BatchSize1", OldName = @"LosGr1", Pos = 42, Length = 5)]
        public int? BatchSize1 { get; set; }

        /// <summary>
        /// Batch size 2 (multiple of LosGr1)
        /// </summary>
        [TecdocField(Name = @"BatchSize2", OldName = @"LosGr2", Pos = 47, Length = 5)]
        public int? BatchSize2 { get; set; }

        /// <summary>
        /// const = 0
        /// </summary>
        [TecdocField(Name = @"DeleteFlag", OldName = @"Lösch-Flag", Pos = 52, Length = 1)]
        //[NotMapped]
        public bool _DeleteFlag => false;

        #region Equality using primary key

        public bool Equals(T200? other)
            => other != null && StringComparer.InvariantCultureIgnoreCase.Equals(PartNo, other.PartNo);

        public override bool Equals(object? obj)
            => obj is T200 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(PartNo, StringComparer.InvariantCultureIgnoreCase);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Article price table
    /// </summary>
    /// <remarks>
    /// Notes:                      Each article may contain more than one valid price information record for different
    ///                             countries, price types, currencies, and dates of validity.
    ///                                  Only  individual      countries  and  no  country  groups  may  be  entered  in  the      field
    ///                                  CountryCode.
    ///                                  Price validity dates for the same country (currency) must be    individually conclusive.
    ///                                  Each ArtNo must be contained in the data table (-&gt;DT200).
    /// </remarks>
    public partial class T201 : IEquatable<T201>
    {
        /// <summary>
        /// Article Number in the data supplier format
        /// </summary>
        [TecdocField(Name = @"ArtNo", OldName = @"ArtNr", Pos = 0, Length = 22)]
        [Required]
        [StringLength(22)]
        public string PartNo { get; set; } = default!;

        /// <summary>
        /// Data Supplier Number Constant
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        public short BrandNo { get; set; }

        /// <summary>
        /// Data Table Constant « 201 »
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 201;

        /// <summary>
        /// Gross price with two decimal spaces or blank for price on demand
        /// </summary>
        [TecdocField(Name = @"Price", OldName = @"Preis", Pos = 29, Length = 10)]
        public long? Price { get; set; }

        /// <summary>
        /// Price Unit (KT 070)
        /// </summary>
        [TecdocField(Name = @"PrUnit", OldName = @"PENr", Pos = 39, Length = 3)]
        public short PriceUnitKey { get; set; }

        /// <summary>
        /// Quantity Unit (KT 071)
        /// </summary>
        [TecdocField(Name = @"PrQuantUnit", OldName = @"MENr", Pos = 42, Length = 3)]
        [Required]
        [StringLength(3)]
        public string QuantityUnitKey { get; set; } = default!;

        /// <summary>
        /// Price valid from YYYYMMDD.
        /// </summary>
        [TecdocField(Name = @"ValidFrom", OldName = @"Datvon", Pos = 45, Length = 8)]
        public int PriceValidFromDateYYYYMMDD { get; set; }

        /// <summary>
        /// Price valid to YYYYMMDD
        /// </summary>
        [TecdocField(Name = @"ValidTo", OldName = @"Datbis", Pos = 53, Length = 8)]
        public int? PriceValidToDateYYYYMMDD { get; set; }

        /// <summary>
        /// Country code for currency country (-&gt; 010).
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"LKZ", Pos = 61, Length = 3)]
        [Required]
        [StringLength(3)]
        public string CountryCode { get; set; } = default!;

        /// <summary>
        /// Price Type (KT 074).
        /// </summary>
        [TecdocField(Name = @"PrType", OldName = @"PrArt", Pos = 64, Length = 3)]
        public short PriceTypeKey { get; set; }

        /// <summary>
        /// Constantly blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserved", Pos = 67, Length = 10)]
        //[NotMapped]
        public string? _Reserved => "";

        /// <summary>
        /// Currency Code
        /// </summary>
        [TecdocField(Name = @"CurCode", OldName = @"WKZ", Pos = 77, Length = 3)]
        [Required]
        [StringLength(3)]
        public string CurrencyCode { get; set; } = default!;

        /// <summary>
        /// Discount group
        /// </summary>
        [TecdocField(Name = @"DiscGroup", OldName = @"Rabattgruppe", Pos = 80, Length = 5)]
        [StringLength(5)]
        public string? DiscountGroup { get; set; }

        /// <summary>
        /// Discount
        /// </summary>
        [TecdocField(Name = @"Dicount", OldName = @"Minderrabatt", Pos = 85, Length = 1)]
        public bool? Discount { get; set; }

        /// <summary>
        /// const = 0
        /// </summary>
        [TecdocField(Name = @"DeleteFlag", OldName = @"Lösch-Flag", Pos = 86, Length = 1)]
        //[NotMapped]
        public bool _DeleteFlag => false;

        #region Equality using primary key

        public bool Equals(T201? other)
            => other != null && StringComparer.InvariantCultureIgnoreCase.Equals(PartNo, other.PartNo) && PriceTypeKey.Equals(other.PriceTypeKey) && StringComparer.InvariantCultureIgnoreCase.Equals(CountryCode, other.CountryCode) && StringComparer.InvariantCultureIgnoreCase.Equals(CurrencyCode, other.CurrencyCode) && PriceValidFromDateYYYYMMDD.Equals(other.PriceValidFromDateYYYYMMDD) && PriceUnitKey.Equals(other.PriceUnitKey) && StringComparer.InvariantCultureIgnoreCase.Equals(QuantityUnitKey, other.QuantityUnitKey);

        public override bool Equals(object? obj)
            => obj is T201 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(PartNo, StringComparer.InvariantCultureIgnoreCase);
            hash.Add(PriceTypeKey);
            hash.Add(CountryCode, StringComparer.InvariantCultureIgnoreCase);
            hash.Add(CurrencyCode, StringComparer.InvariantCultureIgnoreCase);
            hash.Add(PriceValidFromDateYYYYMMDD);
            hash.Add(PriceUnitKey);
            hash.Add(QuantityUnitKey, StringComparer.InvariantCultureIgnoreCase);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Inclusion/Exclusion of certain countries for an article
    /// </summary>
    /// <remarks>
    /// Notes:                 An article is normally valid worldwide. If the validity of an article is to be restricted to
    ///                        one or more countries, this data table (-&gt; 202) can be used to specify such information.
    ///                        Certain pre-defined country groups may also be used.
    ///                        It is also possible to state that an article is valid for all countries except ….
    ///                        In such a case one should set the code Exclude to ‘1’. Country codes may not overlap.
    ///                        When, for instance, three records are delivered for one article with the inclusion set for
    ///                        ‘EU’, ‘USA’, and ‘D’, this will not be permissible since D (Germany) is a member of the EU
    ///                        and this was already specified as an inclusion.
    ///                        All country codes for one article must either be set as inclusion or as exclusion. The
    ///                        mixing of these specifications is not allowed.
    ///                        Each ArtNo must be contained in the data table (-&gt;200).
    /// </remarks>
    public partial class T202 : IEquatable<T202>
    {
        /// <summary>
        /// Article Number in the data supplier format
        /// </summary>
        [TecdocField(Name = @"ArtNo", OldName = @"ArtNr", Pos = 0, Length = 22)]
        [Required]
        [StringLength(22)]
        public string PartNo { get; set; } = default!;

        /// <summary>
        /// Data Supplier Number Constant
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        public short BrandNo { get; set; }

        /// <summary>
        /// Data Table Constant « 202 »
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 202;

        /// <summary>
        /// Country Code (-&gt; 010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"LKZ", Pos = 29, Length = 3)]
        [Required]
        [StringLength(3)]
        public string CountryCode { get; set; } = default!;

        /// <summary>
        /// ‘1’ = Country Code is an exclusion, ‘0’ = Country Code is an inclusion.
        /// </summary>
        [TecdocField(Name = @"Exclude", OldName = @"Exclude", Pos = 32, Length = 1)]
        public bool Exclude { get; set; }

        /// <summary>
        /// const = 0
        /// </summary>
        [TecdocField(Name = @"DeleteFlag", OldName = @"Lösch-Flag", Pos = 33, Length = 1)]
        //[NotMapped]
        public bool _DeleteFlag => false;

        #region Equality using primary key

        public bool Equals(T202? other)
            => other != null && StringComparer.InvariantCultureIgnoreCase.Equals(PartNo, other.PartNo) && StringComparer.InvariantCultureIgnoreCase.Equals(CountryCode, other.CountryCode);

        public override bool Equals(object? obj)
            => obj is T202 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(PartNo, StringComparer.InvariantCultureIgnoreCase);
            hash.Add(CountryCode, StringComparer.InvariantCultureIgnoreCase);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Reference numbers for articles by vehicle manufacturers
    /// </summary>
    /// <remarks>
    /// (*) Type ‘U’ starting  Data Release 0519 – type ‘C’ until then
    /// Notes:                 Country in-/exclusions for the same reference number may not contradict one another.
    ///                        Country codes may not overlap. When, for instance, three records are delivered for one
    ///                        Article Number/OE Number combination with the inclusion set for ‘EU’, ‘USA’, and ‘D’,
    ///                        this will not be permissible since D (Germany) is a member of the EU and this was
    ///                        already specified as an inclusion.
    ///                        Each ArtNo must be contained in the data table (-&gt; 200).
    ///                     All country codes for an Article/reference number combination must either be set as
    ///                     inclusion or as exclusion. The mixing of these specifications is not allowed.
    ///                     The column Sort allow the sorting of the reference numbers (RefNo) below the Article-
    ///                     number (ArtNo). The DMM R2 / PMD R2 allocate the Sort-numbers automatic, when
    ///                     there’s not given a specified sequence by the user.
    ///                     The „Additive-Function“ allows to reference product-groups like repairing-sets (sealing
    ///                     kits) on single products (like head gasket).
    ///                     The ReferenzInfo allows to further define an article reference, e.g. if an article differs in
    ///                     the scope of delivery from the part it refers to.
    ///                     References to manufacturers represent OE numbers, provided that the manufacturer
    ///                     has set one of the flags PC, CV, Axle, Engie, Transmission, LCV in Table 100.
    /// </remarks>
    public partial class T203 : IEquatable<T203>
    {
        /// <summary>
        /// Article Number in the data supplier format
        /// </summary>
        [TecdocField(Name = @"ArtNo", OldName = @"ArtNr", Pos = 0, Length = 22)]
        [Required]
        [StringLength(22)]
        public string PartNo { get; set; } = default!;

        /// <summary>
        /// Data Supplier Number Constant
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        public short BrandNo { get; set; }

        /// <summary>
        /// Data Table Constant= 203
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 203;

        /// <summary>
        /// Manufacturer (-&gt; 100)
        /// </summary>
        [TecdocField(Name = @"ManNo", OldName = @"HerNr", Pos = 29, Length = 6)]
        public int ManufacturerNo { get; set; }

        /// <summary>
        /// Country Code (-&gt; 010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"LKZ", Pos = 35, Length = 3)]
        [Required]
        [StringLength(3)]
        public string CountryCode { get; set; } = default!;

        /// <summary>
        /// Reference number for this manufacturer
        /// </summary>
        [TecdocField(Name = @"RefNo", OldName = @"RefNr", Pos = 38, Length = 22)]
        [Required]
        [StringLength(22)]
        public string ReferencePartNo { get; set; } = default!;

        /// <summary>
        /// ‘1’ = Country Code is an exclusion, ‘0’ = Country Code is an inclusion.
        /// </summary>
        [TecdocField(Name = @"Exclude", OldName = @"Exclude", Pos = 60, Length = 1)]
        public bool? Exclude { get; set; }

        /// <summary>
        /// Display sequence of this record
        /// </summary>
        [TecdocField(Name = @"SortNo", OldName = @"Sort", Pos = 61, Length = 5)]
        public int SortNo { get; set; }

        /// <summary>
        /// 0/1: Record builds a block with the parent
        /// </summary>
        [TecdocField(Name = @"Additive", OldName = @"Additiv", Pos = 66, Length = 1)]
        public bool Additive { get; set; }

        /// <summary>
        /// Reference type (KT 270)
        /// </summary>
        [TecdocField(Name = @"ReferenceInfo", OldName = @"ReferenzInfo", Pos = 67, Length = 3)]
        [StringLength(3)]
        public string? ReferenceTypeKey { get; set; }

        /// <summary>
        /// const = 0
        /// </summary>
        [TecdocField(Name = @"DeleteFlag", OldName = @"Lösch-Flag", Pos = 70, Length = 1)]
        //[NotMapped]
        public bool _DeleteFlag => false;

        #region Equality using primary key

        public bool Equals(T203? other)
            => other != null && StringComparer.InvariantCultureIgnoreCase.Equals(PartNo, other.PartNo) && ManufacturerNo.Equals(other.ManufacturerNo) && SortNo.Equals(other.SortNo) && StringComparer.InvariantCultureIgnoreCase.Equals(CountryCode, other.CountryCode);

        public override bool Equals(object? obj)
            => obj is T203 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(PartNo, StringComparer.InvariantCultureIgnoreCase);
            hash.Add(ManufacturerNo);
            hash.Add(SortNo);
            hash.Add(CountryCode, StringComparer.InvariantCultureIgnoreCase);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// The numbers of superseding articles
    /// </summary>
    /// <remarks>
    /// (*) Type ‘U’ starting Data Release 0519 – type ‘C’ until then
    /// Notes:
    /// This data table is to be used when the current article number supersedes another article SupersNo. Both the
    /// superseding as well as the superseded articles must be contained in the data table (-&gt; 200).
    /// Country          codes  may  not  overlap.           When,  for  instance,  three  records  are  delivered  for  one  Article
    /// Number/Superseded Number combination with the inclusion set for ‘EU’, ‘USA’, and ‘D’, this will                       not be
    /// permissible since D (Germany) is a member of the EU and this was already specified as an inclusion.
    /// Each ArtNo must be contained in the data table (-&gt; 200).
    /// All country codes for an Article/Superseded Number must either be set as inclusion or as exclusion. The
    /// mixing of these specifications is not allowed.
    /// Recursion is not permitted (i.e. article A supersedes B, B supersedes C, C supersedes A).
    /// The column Sort allow the sorting of the Trade-numbers (GebrNr) below the Article-number (ArtNr). The DMM
    /// R2 / PMD R2 allocate the Sort-numbers automatic, when there’s not given a specified sequence by the user.
    /// </remarks>
    public partial class T204 : IEquatable<T204>
    {
        /// <summary>
        /// Article Number in the data supplier format
        /// </summary>
        [TecdocField(Name = @"ArtNo", OldName = @"ArtNr", Pos = 0, Length = 22)]
        [Required]
        [StringLength(22)]
        public string PartNo { get; set; } = default!;

        /// <summary>
        /// Data Supplier Number Constant
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        public short BrandNo { get; set; }

        /// <summary>
        /// Data Table Constant « 204 »
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 204;

        /// <summary>
        /// Country Code (-&gt; 010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"LKZ", Pos = 29, Length = 3)]
        [Required]
        [StringLength(3)]
        public string CountryCode { get; set; } = default!;

        /// <summary>
        /// Article ArtNr supersedes Article SupersNo
        /// </summary>
        [TecdocField(Name = @"SupersNo", OldName = @"ErsatzNr", Pos = 32, Length = 22)]
        [Required]
        [StringLength(22)]
        public string SupersededPartNo { get; set; } = default!;

        /// <summary>
        /// ‘1’ = Country Code is an exclusion, ‘0’ = Country Code is an inclusion.
        /// </summary>
        [TecdocField(Name = @"Exclude", OldName = @"Exclude", Pos = 54, Length = 1)]
        public bool? Exclude { get; set; }

        /// <summary>
        /// Display sequence of this record
        /// </summary>
        [TecdocField(Name = @"SortNo", OldName = @"Sort", Pos = 55, Length = 5)]
        public int SortNo { get; set; }

        /// <summary>
        /// const = 0
        /// </summary>
        [TecdocField(Name = @"DeleteFlag", OldName = @"Lösch-Flag", Pos = 60, Length = 1)]
        //[NotMapped]
        public bool _DeleteFlag => false;

        #region Equality using primary key

        public bool Equals(T204? other)
            => other != null && StringComparer.InvariantCultureIgnoreCase.Equals(PartNo, other.PartNo) && StringComparer.InvariantCultureIgnoreCase.Equals(SupersededPartNo, other.SupersededPartNo) && StringComparer.InvariantCultureIgnoreCase.Equals(CountryCode, other.CountryCode);

        public override bool Equals(object? obj)
            => obj is T204 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(PartNo, StringComparer.InvariantCultureIgnoreCase);
            hash.Add(SupersededPartNo, StringComparer.InvariantCultureIgnoreCase);
            hash.Add(CountryCode, StringComparer.InvariantCultureIgnoreCase);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Parts list information on articles
    /// </summary>
    /// <remarks>
    ///    (*) Type ‘U’ starting  Data Release 0519 – type ‘C’ until then
    ///    Notes:                 Describes what component parts PartNo makes up the main article ArtNo. Both article
    ///                           numbers must be contained in the DT 200. The component part may contain further
    ///                           parts lists, so that it may be contained again in the position ArtNo in the data table     (-&gt;
    ///                           205). Interleaving is random, a recursion (i.e. article A contains article B, article B
    ///                           contains article C and article C again contains article A) is not permitted.
    ///                           Country codes may not overlap. When, for instance, three records are delivered for one
    ///                           Article Number/Parts List Article combination with the inclusion set for ‘EU’, ‘USA’, and
    ///                           ‘D’, this will not be permissible since D (Germany) is a member of the EU and this was
    ///                           already specified as an inclusion.
    ///                           Each ArtNo must be contained in the data table (-&gt; 200).
    ///                  All country codes for one Article/Parts List combination must either be set as inclusion
    ///                  or as exclusion. The mixing of these specifications is not allowed.
    ///                  A further use of this table is to create pseudo articles, which are then linked to vehicles
    ///                  (or to other linkage targets). The components of a pseudo article should generally not
    ///                  be linked as single components, but may only be shown in context with the other
    ///                  components of the pseudo article. Two examples:
    ///                  •  A manufacturer offers motor oil in different package sizes and would like to
    ///                     present them clearly. He therefore defines a pseudo article “Oil XY 10W40” and
    ///                     add it as parts list components in table 205 the single package sizes which can be
    ///                     ordered. By linking the pseudo article to a vehicle, the package sizes do not have
    ///                     to be linked separately. If the manufacturer adds a further package size, it is
    ///                     already added automatically to all vehicles of the pseudo article. In this case, it
    ///                     could be that the 22 characters of the article number are not sufficient to describe
    ///                     the pseudo article. In this case the additional article description of the pseudo
    ///                     article should be used accordingly but the brand name should not be contained in
    ///                     the additional article description.
    ///                  •  A manufacturer of exhaust systems offers different exhaust pipes and fitting
    ///                     brackets for a vehicle, which may not be interchanged. The semantic is then “if the
    ///                     exhaust pipe 456.7 is used, only fitting bracket 123.4 fits“. This case also requires
    ///                     that a pseudo article is defined the parts list of which lists the exhaust pipes and
    ///                     fitting brackets which can be used. The pseudo article is linked to a vehicle, the
    ///                     exhaust                     pipes  and  fitting  brackets  are  not  linked.  This  ensures  that  only
    ///                     compatible parts are shown with the vehicle. In this case, there is the possibility to
    ///                     add vehicle-specific attributes for a parts list component in table 208 (in the
    ///                     example for the exhaust pipe or for the fitting bracket). This may be necessary as
    ///                     the single part itself is not linked in table 400 (but only via its pseudo article).
    /// </remarks>
    public partial class T205 : IEquatable<T205>
    {
        /// <summary>
        /// Article Number in the data supplier format
        /// </summary>
        [TecdocField(Name = @"ArtNo", OldName = @"ArtNr", Pos = 0, Length = 22)]
        [Required]
        [StringLength(22)]
        public string PartNo { get; set; } = default!;

        /// <summary>
        /// Data Supplier Number Constant (Key 040)
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        public short BrandNo { get; set; }

        /// <summary>
        /// Data Table Constant « 205 »
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 205;

        /// <summary>
        /// Unambiguous number of the Part-Generic Article
        /// </summary>
        [TecdocField(Name = @"PartGenArtNo", OldName = @"PartGenArtNr", Pos = 29, Length = 5)]
        public int ComponentGenArtNo { get; set; }

        /// <summary>
        /// Sequential number for sorting
        /// </summary>
        [TecdocField(Name = @"SeqNo", OldName = @"LfdNr", Pos = 34, Length = 3)]
        public short SeqNo205 { get; set; }

        /// <summary>
        /// Relevant component part
        /// </summary>
        [TecdocField(Name = @"PartNo", OldName = @"PartNr", Pos = 37, Length = 22)]
        [Required]
        [StringLength(22)]
        public string ComponentPartNo { get; set; } = default!;

        /// <summary>
        /// Quantity of component part
        /// </summary>
        [TecdocField(Name = @"Quantity", OldName = @"Menge", Pos = 59, Length = 3)]
        public short Quantity { get; set; }

        /// <summary>
        /// const = 0
        /// </summary>
        [TecdocField(Name = @"DeleteFlag", OldName = @"Lösch-Flag", Pos = 62, Length = 1)]
        //[NotMapped]
        public bool _DeleteFlag => false;

        #region Equality using primary key

        public bool Equals(T205? other)
            => other != null && StringComparer.InvariantCultureIgnoreCase.Equals(PartNo, other.PartNo) && SeqNo205.Equals(other.SeqNo205);

        public override bool Equals(object? obj)
            => obj is T205 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(PartNo, StringComparer.InvariantCultureIgnoreCase);
            hash.Add(SeqNo205);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Information text for articles
    /// </summary>
    /// <remarks>
    /// (*) Type ‘U’ starting  Data Release 0519 – type ‘C’ until then
    /// Notes:                 Information texts on articles that could not be specified with criteria, (-&gt; 210). The usage
    ///                        of the data table (-&gt; 210) for such information is always preferred.
    ///                        Only information that relates exclusively to the article, irrespective of what vehicle the
    ///                        article is linked to, may be specified here.
    ///                        Text may be defined with different information types. The display sequence of the text
    ///                        with different information types is regulated by means of the SortNr.
    ///                  Country codes may not overlap. When, for instance, three records are delivered for one
    ///                  Article/Sorting Number combination with the inclusion set for ‘EU’, ‘USA’, and ‘D’, this
    ///                  will not be permissible since D (Germany) is a member of the EU and this was already
    ///                  specified as an inclusion.
    ///                  All country codes for one Article/Sort. No. combination must either be set as an
    ///                  inclusion or as exclusion. The mixing of these specifications is not allowed. Each article
    ///                  must be contained in the data table 200.
    /// Primary Key change in Data Release 2223
    /// This table is about text-modules on articles. If more than one text module is existing they are identified and
    /// sorted by a unique SortNo field entry.
    /// In case a text module is valid for multiple countries, the record is repeated with different country codes (usual
    /// procedure in TecDoc tables).
    /// Content of the table might look like this:
    /// ArtNo                         TextModule        SortNo     Country
    /// 0001                          Txt_1             1
    /// 0001                          Txt_2             2          CountryCode_1
    /// 0001                          Txt_2             2          CountryCode_2
    /// 0001                          Txt_2             2          CountryCode_3
    /// 0002                          Txt_3             1
    /// 0003                          Txt_4             1          CountryCode_1
    /// 0003                          Txt_4             1          CountryCode_4
    /// </remarks>
    public partial class T206 : IEquatable<T206>
    {
        /// <summary>
        /// Article Number in the data supplier format
        /// </summary>
        [TecdocField(Name = @"ArtNo", OldName = @"ArtNr", Pos = 0, Length = 22)]
        [Required]
        [StringLength(22)]
        public string PartNo { get; set; } = default!;

        /// <summary>
        /// Data Supplier Number Constant
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        public short BrandNo { get; set; }

        /// <summary>
        /// Data Table Constant « 206 »
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 206;

        /// <summary>
        /// Country Code (-&gt; 010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"LKZ", Pos = 34, Length = 3)]
        [Required]
        [StringLength(3)]
        public string CountryCode { get; set; } = default!;

        /// <summary>
        /// Sorting for display
        /// </summary>
        [TecdocField(Name = @"SortNo", OldName = @"SortNr", Pos = 37, Length = 2)]
        public byte SortNo { get; set; }

        /// <summary>
        /// Information Type (KT 072)
        /// </summary>
        [TecdocField(Name = @"InfType", OldName = @"InfArt", Pos = 39, Length = 3)]
        public short InfoTypeKey { get; set; }

        /// <summary>
        /// Immediate Display = 1: Information is displayed on the 1st article page on the presentation medium and is repeated boldly on the 2nd page.
        /// </summary>
        [TecdocField(Name = @"FirstPage", OldName = @"AnzSofort", Pos = 42, Length = 1)]
        public bool FirstPage { get; set; }

        /// <summary>
        /// Text Module Number
        /// </summary>
        [TecdocField(Name = @"TXTModNo", OldName = @"TBSNr", Pos = 43, Length = 6)]
        [Required]
        [StringLength(6)]
        public string TextModuleNo { get; set; } = default!;

        /// <summary>
        /// ‘1’ = Country Code is an exclusion, ‘0’ = Country Code is an inclusion.
        /// </summary>
        [TecdocField(Name = @"Exclude", OldName = @"Exclude", Pos = 49, Length = 1)]
        public bool? Exclude { get; set; }

        /// <summary>
        /// const = 0
        /// </summary>
        [TecdocField(Name = @"DeleteFlag", OldName = @"Lösch-Flag", Pos = 50, Length = 1)]
        //[NotMapped]
        public bool _DeleteFlag => false;

        #region Equality using primary key

        public bool Equals(T206? other)
            => other != null && StringComparer.InvariantCultureIgnoreCase.Equals(PartNo, other.PartNo) && SortNo.Equals(other.SortNo) && StringComparer.InvariantCultureIgnoreCase.Equals(CountryCode, other.CountryCode);

        public override bool Equals(object? obj)
            => obj is T206 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(PartNo, StringComparer.InvariantCultureIgnoreCase);
            hash.Add(SortNo);
            hash.Add(CountryCode, StringComparer.InvariantCultureIgnoreCase);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Trade Numbers
    /// </summary>
    /// <remarks>
    /// (*) Type ‘U’ starting  Data Release 0519 – type ‘C’ until then
    /// Notes:                 Entry of generally accepted trade numbers (short codes) for the articles ArtNo that must
    ///                        be contained in the data table (-&gt; 200). This number can be used to search for the article
    ///                        in the parts catalogue.
    ///                        Trade numbers should not be duplicated for one article within one country.
    ///                        Country codes may not overlap. When, for instance, three records are delivered for one
    ///                        Article Number/Trade Number combination with the inclusion set for ‘EU’, ‘USA’, and ‘D’,
    ///                        this will not be permissible since D (Germany) is a member of the EU and this was
    ///                        already specified as an inclusion.
    ///                  All country codes for one Article/Trade Number combination must either be set as an
    ///                  inclusion or as exclusion. The mixing of these specifications is not allowed. Each article
    ///                  must be contained in the data table 200.
    ///                  The column Sort allow the sorting of the Trade-numbers (TradeNo) below the Article-
    ///                  number (ArtNo). The DMM R2 / PMD R2 allocate the Sort-numbers automatic, when
    ///                  there’s not given a specified sequence by the user.
    /// </remarks>
    public partial class T207 : IEquatable<T207>
    {
        /// <summary>
        /// Article Number in the data supplier format
        /// </summary>
        [TecdocField(Name = @"ArtNo", OldName = @"ArtNr", Pos = 0, Length = 22)]
        [Required]
        [StringLength(22)]
        public string PartNo { get; set; } = default!;

        /// <summary>
        /// Data Supplier Number Constant
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        public short BrandNo { get; set; }

        /// <summary>
        /// Data Table Constant « 207 »
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 207;

        /// <summary>
        /// Country Code (-&gt; 010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"LKZ", Pos = 29, Length = 3)]
        [Required]
        [StringLength(3)]
        public string CountryCode { get; set; } = default!;

        /// <summary>
        /// Trade number of the article (short code)
        /// </summary>
        [TecdocField(Name = @"TradeNo", OldName = @"GebrNr", Pos = 32, Length = 35)]
        [Required]
        [StringLength(35)]
        public string TradeNumber { get; set; } = default!;

        /// <summary>
        /// ‘1’ = Country Code is an exclusion, ‘0’ = Country Code is an inclusion.
        /// </summary>
        [TecdocField(Name = @"Exclude", OldName = @"Exclude", Pos = 67, Length = 1)]
        public bool? Exclude { get; set; }

        /// <summary>
        /// 0 = Trade number is only shown on the 2nd article page, 1 = Trade number is shown on the 1st article page.
        /// </summary>
        [TecdocField(Name = @"FirstPage", OldName = @"AnzSofort", Pos = 68, Length = 1)]
        public bool? FirstPage { get; set; }

        /// <summary>
        /// Display sequence of this record
        /// </summary>
        [TecdocField(Name = @"SortNo", OldName = @"Sort", Pos = 69, Length = 5)]
        public int SortNo { get; set; }

        /// <summary>
        /// const = 0
        /// </summary>
        [TecdocField(Name = @"DeleteFlag", OldName = @"Lösch-Flag", Pos = 74, Length = 1)]
        //[NotMapped]
        public bool _DeleteFlag => false;

        #region Equality using primary key

        public bool Equals(T207? other)
            => other != null && StringComparer.InvariantCultureIgnoreCase.Equals(PartNo, other.PartNo) && StringComparer.InvariantCultureIgnoreCase.Equals(TradeNumber, other.TradeNumber) && StringComparer.InvariantCultureIgnoreCase.Equals(CountryCode, other.CountryCode);

        public override bool Equals(object? obj)
            => obj is T207 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(PartNo, StringComparer.InvariantCultureIgnoreCase);
            hash.Add(TradeNumber, StringComparer.InvariantCultureIgnoreCase);
            hash.Add(CountryCode, StringComparer.InvariantCultureIgnoreCase);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Criteria for component parts in a parts list
    /// </summary>
    /// <remarks>
    ///    (*) Type ‘U’ starting  Data Release 0519 – type ‘C’ until then
    ///    Note:                  The combination ArtNo and SeqNo1                 must be contained in the DT205.
    /// </remarks>
    public partial class T208 : IEquatable<T208>
    {
        /// <summary>
        /// Article Number in the data supplier format
        /// </summary>
        [TecdocField(Name = @"ArtNo", OldName = @"ArtNr", Pos = 0, Length = 22)]
        [Required]
        [StringLength(22)]
        public string PartNo { get; set; } = default!;

        /// <summary>
        /// Data Supplier Number Constant (Key 040)
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        public short BrandNo { get; set; }

        /// <summary>
        /// Data Table Constant « 208 »
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 208;

        /// <summary>
        /// Sequential Number
        /// </summary>
        [TecdocField(Name = @"SeqNo", OldName = @"LfdNr", Pos = 32, Length = 5)]
        public int SeqNo { get; set; }

        /// <summary>
        /// Sorting Order
        /// </summary>
        [TecdocField(Name = @"SortNo", OldName = @"SortNr", Pos = 37, Length = 3)]
        public short SortNo { get; set; }

        /// <summary>
        /// Criterion Number (Key 050)
        /// </summary>
        [TecdocField(Name = @"CritNo", OldName = @"KritNr", Pos = 40, Length = 4)]
        public short CritNo { get; set; }

        /// <summary>
        /// Criterion Value
        /// </summary>
        [TecdocField(Name = @"CritVal", OldName = @"KritWert", Pos = 44, Length = 20)]
        [StringLength(20)]
        public string? CritVal { get; set; }

        /// <summary>
        /// LfdNr from DT205
        /// </summary>
        [TecdocField(Name = @"SeqNo1", OldName = @"LfdNr1", Pos = 65, Length = 3)]
        public short SeqNo205 { get; set; }

        /// <summary>
        /// const = 0
        /// </summary>
        [TecdocField(Name = @"DeleteFlag", OldName = @"Lösch-Flag", Pos = 68, Length = 1)]
        //[NotMapped]
        public bool _DeleteFlag => false;

        #region Equality using primary key

        public bool Equals(T208? other)
            => other != null && StringComparer.InvariantCultureIgnoreCase.Equals(PartNo, other.PartNo) && SeqNo205.Equals(other.SeqNo205) && SeqNo.Equals(other.SeqNo) && SortNo.Equals(other.SortNo);

        public override bool Equals(object? obj)
            => obj is T208 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(PartNo, StringComparer.InvariantCultureIgnoreCase);
            hash.Add(SeqNo205);
            hash.Add(SeqNo);
            hash.Add(SortNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// GTIN (Global Trade Item Number)
    /// </summary>
    /// <remarks>
    /// (*) Type ‘U’ starting Data Release 0519 – type ‘C’ until then
    /// Notes:
    /// Entry of generally accepted GTIN for the articles ArtNo which must be contained in the data table (-&gt; 200). This
    /// number can be used to search for the article in the parts catalogue.
    /// GTIN should not be duplicated for one article. A GTIN may have 8, 12, 13 or 14 digits. Further details can be
    /// found at https://www.gs1.org/standards/id-keys/gtin
    /// Leading ‘0’ must not be ignored. Otherwise the result in general is not valid.
    /// Country             codes  may  not    overlap.  When,  for  instance,  three  records  are  delivered  for  one  Article/GTIN
    /// combination with the inclusion set for ‘EU’, ‘USA’, and ‘D’, this will not be permissible since D (Germany) is a
    /// member of the EU and this was already specified as an inclusion.
    /// All country codes for one Article/GTIN combination must either be set as inclusion or as exclusion. The mixing
    /// of these specifications is not allowed.
    /// Each ArtNo must be contained in the data table (-&gt; 200).
    /// </remarks>
    public partial class T209 : IEquatable<T209>
    {
        /// <summary>
        /// Article Number in the data supplier format
        /// </summary>
        [TecdocField(Name = @"ArtNo", OldName = @"ArtNr", Pos = 0, Length = 22)]
        [Required]
        [StringLength(22)]
        public string PartNo { get; set; } = default!;

        /// <summary>
        /// Data Supplier Number Constant
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        public short BrandNo { get; set; }

        /// <summary>
        /// Data Table Constant « 209 »
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 209;

        /// <summary>
        /// Country Code (-&gt; 010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"LKZ", Pos = 29, Length = 3)]
        [Required]
        [StringLength(3)]
        public string CountryCode { get; set; } = default!;

        /// <summary>
        /// GTIN of articles
        /// </summary>
        [TecdocField(Name = @"GTIN", OldName = @"GTIN", Pos = 32, Length = 14)]
        public long GTIN { get; set; }

        /// <summary>
        /// ‘1’ = Country Code is an exclusion, ‘0’ = Country Code is an inclusion.
        /// </summary>
        [TecdocField(Name = @"Exclude", OldName = @"Exclude", Pos = 46, Length = 1)]
        public bool? Exclude { get; set; }

        /// <summary>
        /// const = 0
        /// </summary>
        [TecdocField(Name = @"DeleteFlag", OldName = @"Lösch-Flag", Pos = 47, Length = 1)]
        //[NotMapped]
        public bool _DeleteFlag => false;

        #region Equality using primary key

        public bool Equals(T209? other)
            => other != null && StringComparer.InvariantCultureIgnoreCase.Equals(PartNo, other.PartNo) && GTIN.Equals(other.GTIN) && StringComparer.InvariantCultureIgnoreCase.Equals(CountryCode, other.CountryCode);

        public override bool Equals(object? obj)
            => obj is T209 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(PartNo, StringComparer.InvariantCultureIgnoreCase);
            hash.Add(GTIN);
            hash.Add(CountryCode, StringComparer.InvariantCultureIgnoreCase);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Fixed article criteria that are not related to vehicle links
    /// </summary>
    /// <remarks>
    /// (*) Type ‘U’ starting  Data Release 0519 – type ‘C’ until then
    /// Notes:                 Entry of explanatory criteria for an article ArtNo that must be contained in the data table
    ///                        (-&gt; 200).
    ///                        Country codes may not overlap. When, for instance, three records are delivered for one
    ///                        Article/Criteria combination with the inclusion set for ‘EU’, ‘USA’, and ‘D’, this will not be
    ///                        permissible since D (Germany) is a member of the EU and this was already specified as
    ///                        an inclusion.
    ///                     All country codes for an Article must either be set as inclusion or as exclusion. The
    ///                     mixing of these specifications is not allowed.
    ///                     Criteria may be used more than once within one country, but may then not contain
    ///                     identical values.
    ///                     Only criteria that are allowed for (-&gt; 210) may be used (OK-Article = 1, -&gt; 050).
    ///                     1Criteria                   with  this  code  are  displayed  immediately  on  the  first  article  page  in  the
    ///                     presentation system, (Article Overview window).
    /// </remarks>
    public partial class T210 : IEquatable<T210>
    {
        /// <summary>
        /// Article Number in the data supplier format
        /// </summary>
        [TecdocField(Name = @"ArtNo", OldName = @"ArtNr", Pos = 0, Length = 22)]
        [Required]
        [StringLength(22)]
        public string PartNo { get; set; } = default!;

        /// <summary>
        /// Data Supplier Number Constant
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        public short BrandNo { get; set; }

        /// <summary>
        /// Data Table Constant « 210 »
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 210;

        /// <summary>
        /// Country Code (Key 010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"LKZ", Pos = 34, Length = 3)]
        [StringLength(3)]
        public string? CountryCode { get; set; }

        /// <summary>
        /// Display Sequence
        /// </summary>
        [TecdocField(Name = @"SortNo", OldName = @"SortNr", Pos = 37, Length = 3)]
        public short SortNo { get; set; }

        /// <summary>
        /// Criterion Number (-&gt; 050)
        /// </summary>
        [TecdocField(Name = @"CritNo", OldName = @"KritNr", Pos = 40, Length = 4)]
        public short CritNo { get; set; }

        /// <summary>
        /// Criterion Value
        /// </summary>
        [TecdocField(Name = @"CritVal", OldName = @"KritWert", Pos = 44, Length = 20)]
        [StringLength(20)]
        public string? CritVal { get; set; }

        /// <summary>
        /// Immediate Display = ‘1’, otherwise ‘0’
        /// </summary>
        [TecdocField(Name = @"FirstPage", OldName = @"AnzSofort", Pos = 64, Length = 1)]
        public bool FirstPage { get; set; }

        /// <summary>
        /// ‘1’ = Country Code is an exclusion, ‘0’ = Country Code is an inclusion.
        /// </summary>
        [TecdocField(Name = @"Exclude", OldName = @"Exclude", Pos = 65, Length = 1)]
        public bool? Exclude { get; set; }

        /// <summary>
        /// const = 0
        /// </summary>
        [TecdocField(Name = @"DeleteFlag", OldName = @"Lösch-Flag", Pos = 66, Length = 1)]
        //[NotMapped]
        public bool _DeleteFlag => false;

        #region Equality using primary key

        public bool Equals(T210? other)
            => other != null && StringComparer.InvariantCultureIgnoreCase.Equals(PartNo, other.PartNo) && SortNo.Equals(other.SortNo);

        public override bool Equals(object? obj)
            => obj is T210 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(PartNo, StringComparer.InvariantCultureIgnoreCase);
            hash.Add(SortNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Allocation of generic articles to data supplier article numbers
    /// </summary>
    /// <remarks>
    /// (*) Type ‘U’ starting Data Release 0519 – type ‘C’ until then
    /// Notes:                     Note: Each article has at least one generic article associated with it.
    ///                            If more than one generic article is assigned to an article, these generic articles must
    ///                            have the same standard name (320.NArtNo).
    /// </remarks>
    public partial class T211 : IEquatable<T211>
    {
        /// <summary>
        /// Article Number in the data supplier format
        /// </summary>
        [TecdocField(Name = @"ArtNo", OldName = @"ArtNr", Pos = 0, Length = 22)]
        [Required]
        [StringLength(22)]
        public string PartNo { get; set; } = default!;

        /// <summary>
        /// Data Supplier Number Constant
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        public short BrandNo { get; set; }

        /// <summary>
        /// Data Table Constant 211
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 211;

        /// <summary>
        /// Unambiguous number of the generic article (-&gt;320)
        /// </summary>
        [TecdocField(Name = @"GenArtNo", OldName = @"GenArtNr", Pos = 29, Length = 5)]
        public int GenArtNo { get; set; }

        /// <summary>
        /// const = 0
        /// </summary>
        [TecdocField(Name = @"DeleteFlag", OldName = @"Lösch-Flag", Pos = 34, Length = 1)]
        //[NotMapped]
        public bool _DeleteFlag => false;

        #region Equality using primary key

        public bool Equals(T211? other)
            => other != null && StringComparer.InvariantCultureIgnoreCase.Equals(PartNo, other.PartNo) && GenArtNo.Equals(other.GenArtNo);

        public override bool Equals(object? obj)
            => obj is T211 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(PartNo, StringComparer.InvariantCultureIgnoreCase);
            hash.Add(GenArtNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Country-Specific Article-data
    /// </summary>
    /// <remarks>
    /// (*) Type ‘U’ starting  Data Release 0519 – type ‘C’ until then
    /// Notes:                 The field CountryCode must be filled with a correct Country Code ( a blank is allowed for
    ///                        “worldwide”).
    ///                        If the field QuantPerUnit is filled, the field QuantUnit must be filled, too.
    ///                        If the field StatusDat is filled, the field ArtStat must be filled, too.
    ///                        If  the  fields          QuantUnit  and/or  ArtStat  are  filled,  it  is  not  imperative  to  fill  the  fields
    ///                        QuantPerUnit and/or StatusDat too, but it is strongly recommended
    ///                        Every article should have an article-status in table 212 (Country-Specific Article-data).
    ///                        Article-numbers, without any article-status in table 212, will get the default article-status 1
    ///                        (Normal-status) per DVM (Data Validation Modul).
    /// </remarks>
    public partial class T212
    {
        public long Id { get; set; }

        /// <summary>
        /// Article Number in the data supplier’s format
        /// </summary>
        [TecdocField(Name = @"ArtNo", OldName = @"ArtNr", Pos = 0, Length = 22)]
        [Required]
        [StringLength(22)]
        public string PartNo { get; set; } = default!;

        /// <summary>
        /// Data Supplier Number Constant
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        public short BrandNo { get; set; }

        /// <summary>
        /// Data Table Constant 212
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 212;

        /// <summary>
        /// Country Code (Key 010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"LKZ", Pos = 29, Length = 3)]
        [StringLength(3)]
        public string? CountryCode { get; set; }

        /// <summary>
        /// Packing unit (quantity per package)
        /// </summary>
        [TecdocField(Name = @"QuantUnit", OldName = @"VPE", Pos = 32, Length = 5)]
        public int? QuantityPerPackage { get; set; }

        /// <summary>
        /// Quantity /part per unit
        /// </summary>
        [TecdocField(Name = @"QuantPerUnit", OldName = @"MengeProVPE", Pos = 37, Length = 5)]
        public int? QuantityPartPerUnit { get; set; }

        /// <summary>
        /// Article Status (KT 073)
        /// </summary>
        [TecdocField(Name = @"ArtStat", OldName = @"ArtStat", Pos = 42, Length = 3)]
        public short? ArticleStatusKey { get; set; }

        /// <summary>
        /// Article status valid from YYYYMMDD
        /// </summary>
        [TecdocField(Name = @"StatusDat", OldName = @"StatusDat", Pos = 45, Length = 8)]
        public int? ArticleStatusFromDateYYYYMMDD { get; set; }

        /// <summary>
        /// const = 0
        /// </summary>
        [TecdocField(Name = @"DeleteFlag", OldName = @"Lösch-Flag", Pos = 53, Length = 1)]
        //[NotMapped]
        public bool _DeleteFlag => false;

    }

    /// <summary>
    /// Fixed logistics article criteria that are not related to vehicle links
    /// </summary>
    /// <remarks>
    /// Notes:                 Entry of explanatory logistics criteria for an article ArtNo that must be contained in the
    ///                        data table (-&gt; 200).
    ///                        Country codes may not overlap. When, for instance, three records are delivered for one
    ///                        Article/Criteria combination with the inclusion set for ‘EU’, ‘USA’, and ‘D’, this will not be
    ///                        permissible since D (Germany) is a member of the EU and this was already specified as
    ///                        an inclusion.
    ///                        All country codes for an Article must either be set as inclusion or as exclusion. The
    ///                        mixing of these specifications is not allowed.
    ///                        Logistics criteria may be used more than once within one country, but may then not
    ///                        contain identical values.
    ///                        Only logistics criteria that are allowed for (-&gt; 210) may be used (OK-Article = 1, -&gt; 050L).
    ///                        1Logistics criteria with this code are displayed immediately on the first article page in
    ///                        the presentation system, (Article Overview window).
    /// </remarks>
    public partial class T213 : IEquatable<T213>
    {
        /// <summary>
        /// Article Number in the data supplier format
        /// </summary>
        [TecdocField(Name = @"ArtNo", OldName = @"ArtNr", Pos = 0, Length = 22)]
        [Required]
        [StringLength(22)]
        public string PartNo { get; set; } = default!;

        /// <summary>
        /// Data Supplier Number Constant
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        public short BrandNo { get; set; }

        /// <summary>
        /// Data Table Constant « 213 »
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 213;

        /// <summary>
        /// Country Code (Key 010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"LKZ", Pos = 29, Length = 3)]
        [StringLength(3)]
        public string? CountryCode { get; set; }

        /// <summary>
        /// Display Sequence
        /// </summary>
        [TecdocField(Name = @"SortNo", OldName = @"SortNr", Pos = 32, Length = 3)]
        public short SortNo { get; set; }

        /// <summary>
        /// Criterion Number (-&gt; 053)
        /// </summary>
        [TecdocField(Name = @"CritNo", OldName = @"KritNr", Pos = 35, Length = 4)]
        public short LogisticsCritNo { get; set; }

        /// <summary>
        /// Criterion Value
        /// </summary>
        [TecdocField(Name = @"CritVal", OldName = @"KritWert", Pos = 39, Length = 20)]
        [StringLength(20)]
        public string? CritVal { get; set; }

        /// <summary>
        /// Immediate Display = ‘1’, otherwise ‘0’
        /// </summary>
        [TecdocField(Name = @"FirstPage", OldName = @"AnzSofort", Pos = 59, Length = 1)]
        public bool FirstPage { get; set; }

        /// <summary>
        /// ‘1’ = Country Code is an exclusion, ‘0’ = Country Code is an inclusion.
        /// </summary>
        [TecdocField(Name = @"Exclude", OldName = @"Exclude", Pos = 60, Length = 1)]
        public bool? Exclude { get; set; }

        #region Equality using primary key

        public bool Equals(T213? other)
            => other != null && StringComparer.InvariantCultureIgnoreCase.Equals(PartNo, other.PartNo) && SortNo.Equals(other.SortNo);

        public override bool Equals(object? obj)
            => obj is T213 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(PartNo, StringComparer.InvariantCultureIgnoreCase);
            hash.Add(SortNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Packaging hierarchy incl. measurements and weight (shipping unit)
    /// </summary>
    /// <remarks>
    /// (*)
    /// Example for a packaging hierarchy
    ///                  End User Unit                  Transport Packaging     Transport Packaging
    ///                                                 214.PackArtNo = 2345    214.PackArtNo = 3456
    ///                                                 214.amount = 50 (**)            214.Amount = 8
    ///                  200.ArtNo = 1234               214.InclArtNo = 1234    214.InclArtNo = Null
    ///                  …                            214.InclPackArtNo = Null  214.InclPackArtNo = 2345
    ///                                                     …                           …
    ///                                               214.PackagingType = ‘CT’  214.PackagingType = ‘PX’
    /// (**) 50 jerricans are packed into a cardboard box.
    /// (*) Rules for measuring a transport package
    /// To measure a product package you need to put the product on its natural base and then identify the default
    /// front of the item.:
    /// -                For packaging/transport units:
    ///                  Put the item on its “natural base” what is the natural underside of the packaged item pre-shipping. If any
    ///                  markings on the package point to natural base orientation, they take precedence in determining the
    ///                  Natural Base. “Markings” can be text, arrows or other graphics printed on the item that may indicate a
    ///                  top or bottom orientation. After you have put the item to its natural base the measurements are given as
    ///    follows:
    ///    Height: from the base to the top
    ///    Width: the shorter side of the natural base
    ///    Depth: the longer side of the natural base
    ///    If it is not possible to identify a “Natural Base” the following measurement rules are given:
    ///    Height: the shortest dimension
    ///    Width: the next longest dimension
    ///    Depth: the longest dimension
    /// For completeness the basic measurement rule for end user units is given here as well (needs to be considered
    /// for logistics article measurement attributes in used in table 213):
    /// -  For end user units:
    ///    The surface with markings such as the product name and standard text elements such as Consumer
    ///    Declaration. This is the surface that is presented to the customer e.g. in a shelf in the store. After you
    ///    identified the front, the measurements are given as follows:
    ///    Height: from the base to the top
    ///    Width: from the left to the right
    ///    Depth: from the front to the back
    /// Rules and constraints
    /// PackArtNo           If only a GTIN exists and no (internal) article number, the GTIN is
    ///                     as well given in the field “PackArtNo”
    /// PackHeight          A numeric value specifying the dimension in [mm]. No decimal
    /// PackWidth           places
    /// PackDepth
    ///                     Regular Expression: [\d]{1,4}
    /// PackWeigth          A numeric value specifying the weight in [g]. No decimal places
    ///                     Regular Expression: [\d]{1,9}
    /// PackWeightVar       A numeric value specifying the variance in [%]. No decimal places
    ///                     Regular Expression: [\d]{1,2}
    /// StackingFactor      A  numeric                  value  specifying  the  stacking  factor.  No  decimal
    ///                     places
    ///                     Regular Expression: [\d]{1,}
    /// </remarks>
    public partial class T214 : IEquatable<T214>
    {
        /// <summary>
        /// Article Number in the data supplier format
        /// </summary>
        [TecdocField(Name = @"PackArtNo", OldName = @"", Pos = 0, Length = 22)]
        [Required]
        [StringLength(22)]
        public string PackArtNo { get; set; } = default!;

        /// <summary>
        /// Data Supplier Number Constant
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"", Pos = 22, Length = 4)]
        public short BrandNo { get; set; }

        /// <summary>
        /// Data Table Constant « 214 »
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 214;

        /// <summary>
        /// Package Level GTIN
        /// </summary>
        [TecdocField(Name = @"PackGTIN", OldName = @"", Pos = 29, Length = 14)]
        public long? PackGTIN { get; set; }

        /// <summary>
        /// Amount of objects of next lower level in package
        /// </summary>
        [TecdocField(Name = @"Amount", OldName = @"", Pos = 43, Length = 6)]
        public int Amount { get; set; }

        /// <summary>
        /// Article Number (-&gt; 200) if item contains end user unit (*)
        /// </summary>
        [TecdocField(Name = @"InclArtNo", OldName = @"", Pos = 49, Length = 22)]
        [Required]
        [StringLength(22)]
        public string InclArtNo { get; set; } = default!;

        /// <summary>
        /// Packaging Article Number (-&gt;214) if item contains another packaging item (e.g. a pallet that contains cardboard boxes) (*)
        /// </summary>
        [TecdocField(Name = @"InclPackArtNo", OldName = @"", Pos = 71, Length = 22)]
        [Required]
        [StringLength(22)]
        public string InclPackArtNo { get; set; } = default!;

        /// <summary>
        /// Shipping Height of package [mm] (*)
        /// </summary>
        [TecdocField(Name = @"PackHeight", OldName = @"", Pos = 93, Length = 4)]
        public short PackHeight { get; set; }

        /// <summary>
        /// Shipping Width of package [mm] (*)
        /// </summary>
        [TecdocField(Name = @"PackWidth", OldName = @"", Pos = 97, Length = 4)]
        public short PackWidth { get; set; }

        /// <summary>
        /// Shipping depth of package [mm] (*)
        /// </summary>
        [TecdocField(Name = @"PackDepth", OldName = @"", Pos = 101, Length = 4)]
        public short PackDepth { get; set; }

        /// <summary>
        /// Gross weight of unit[g]
        /// </summary>
        [TecdocField(Name = @"PackWeight", OldName = @"", Pos = 105, Length = 9)]
        public int PackWeight { get; set; }

        /// <summary>
        /// Possible variance in units gross weight in [%]
        /// </summary>
        [TecdocField(Name = @"PackWeightVar", OldName = @"", Pos = 114, Length = 2)]
        public byte PackWeightVar { get; set; }

        /// <summary>
        /// Maximum levels the package may be stacked in storage
        /// </summary>
        [TecdocField(Name = @"StackingFactor", OldName = @"", Pos = 116, Length = 3)]
        public short StackingFactor { get; set; }

        /// <summary>
        /// Type of packaging according to Key Table 739
        /// </summary>
        [TecdocField(Name = @"PackagingType", OldName = @"", Pos = 119, Length = 3)]
        [Required]
        [StringLength(3)]
        public string PackagingTypeKey { get; set; } = default!;

        #region Equality using primary key

        public bool Equals(T214? other)
            => other != null && StringComparer.InvariantCultureIgnoreCase.Equals(PackArtNo, other.PackArtNo);

        public override bool Equals(object? obj)
            => obj is T214 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(PackArtNo, StringComparer.InvariantCultureIgnoreCase);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Country restrictions for parts lists information
    /// </summary>
    /// <remarks>
    /// (*) Type ‘U’ starting  Data Release 0519 – type ‘C’ until then
    /// Notes:                 Country codes may not overlap.
    ///                        All country codes for an Artikel/LangNo/SortNr combination must be set either as an
    ///                        inclusion or as an exclusion. Mixing the both is not allowed.
    /// </remarks>
    public partial class T215 : IEquatable<T215>
    {
        /// <summary>
        /// Article Number in the data supplier format
        /// </summary>
        [TecdocField(Name = @"ArtNo", OldName = @"ArtNr", Pos = 0, Length = 22)]
        [Required]
        [StringLength(22)]
        public string PartNo { get; set; } = default!;

        /// <summary>
        /// Data Supplier Number Constant (Key 040)
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        public short BrandNo { get; set; }

        /// <summary>
        /// Data Table Constant « 215 »
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 215;

        /// <summary>
        /// Sequential number from DT205
        /// </summary>
        [TecdocField(Name = @"SeqNo", OldName = @"LfdNr", Pos = 29, Length = 3)]
        public short SeqNo205 { get; set; }

        /// <summary>
        /// Country Code (Key 010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"LKZ", Pos = 32, Length = 3)]
        [Required]
        [StringLength(3)]
        public string CountryCode { get; set; } = default!;

        /// <summary>
        /// ‘1’ = Country Code is an exclusion, ‘0’ = Country Code is an inclusion.
        /// </summary>
        [TecdocField(Name = @"Exclude", OldName = @"Exclude", Pos = 35, Length = 1)]
        public bool Exclude { get; set; }

        /// <summary>
        /// const = 0
        /// </summary>
        [TecdocField(Name = @"DeleteFlag", OldName = @"Lösch-Flag", Pos = 36, Length = 1)]
        //[NotMapped]
        public bool _DeleteFlag => false;

        #region Equality using primary key

        public bool Equals(T215? other)
            => other != null && StringComparer.InvariantCultureIgnoreCase.Equals(PartNo, other.PartNo) && SeqNo205.Equals(other.SeqNo205) && StringComparer.InvariantCultureIgnoreCase.Equals(CountryCode, other.CountryCode);

        public override bool Equals(object? obj)
            => obj is T215 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(PartNo, StringComparer.InvariantCultureIgnoreCase);
            hash.Add(SeqNo205);
            hash.Add(CountryCode, StringComparer.InvariantCultureIgnoreCase);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Packaging units country restrictions (optional)
    /// </summary>
    /// <remarks>
    /// Please note that no “Exclude” flag is given anymore. Countries always are provided as list of valid countries for
    /// a specific Packaging Item. If no limitation is given the Packaging Item is valid in the same countries as the end
    /// user unit (article as given in table 200).
    /// </remarks>
    public partial class T216 : IEquatable<T216>
    {
        /// <summary>
        /// Article Number in the data supplier format (-&gt; 214)
        /// </summary>
        [TecdocField(Name = @"PackArtNo", OldName = @"", Pos = 0, Length = 22)]
        [Required]
        [StringLength(22)]
        public string PackArtNo { get; set; } = default!;

        /// <summary>
        /// Data Supplier Number Constant
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"", Pos = 22, Length = 4)]
        public short BrandNo { get; set; }

        /// <summary>
        /// Data Table Constant « 216 »
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 216;

        /// <summary>
        /// Country Code (-&gt; 010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"", Pos = 29, Length = 3)]
        [Required]
        [StringLength(3)]
        public string CountryCode { get; set; } = default!;

        #region Equality using primary key

        public bool Equals(T216? other)
            => other != null && StringComparer.InvariantCultureIgnoreCase.Equals(PackArtNo, other.PackArtNo) && StringComparer.InvariantCultureIgnoreCase.Equals(CountryCode, other.CountryCode);

        public override bool Equals(object? obj)
            => obj is T216 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(PackArtNo, StringComparer.InvariantCultureIgnoreCase);
            hash.Add(CountryCode, StringComparer.InvariantCultureIgnoreCase);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// The allocation of coordinates to context-sensitive graphics
    /// </summary>
    /// <remarks>
    /// ArtNo, SeqNo -&gt; must be contained in the DT 205.
    /// DocNo, DocType, LangNo, CoordNo must be contained                  in the DT 233.
    /// </remarks>
    public partial class T217 : IEquatable<T217>
    {
        /// <summary>
        /// Article Number in the data supplier format
        /// </summary>
        [TecdocField(Name = @"ArtNo", OldName = @"ArtNr", Pos = 0, Length = 22)]
        [Required]
        [StringLength(22)]
        public string PartNo { get; set; } = default!;

        /// <summary>
        /// Data Supplier Number (040)
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        public short BrandNo { get; set; }

        /// <summary>
        /// Constant ‘217’
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 217;

        /// <summary>
        /// Sequential Number from DT 205
        /// </summary>
        [TecdocField(Name = @"SeqNo", OldName = @"LfdNr", Pos = 29, Length = 3)]
        public short SeqNo205 { get; set; }

        /// <summary>
        /// Unambiguous Graphics Number ( 100.000 * DatSupNo., &lt; 100.000 * (DatSupNo. + 1))
        /// </summary>
        [TecdocField(Name = @"DocNo", OldName = @"BildNr", Pos = 32, Length = 9)]
        public int DocNo { get; set; }

        /// <summary>
        /// Document Type (014)
        /// </summary>
        [TecdocField(Name = @"DocType", OldName = @"DokumentenArt", Pos = 41, Length = 2)]
        public byte DocumentType { get; set; }

        /// <summary>
        /// Language Number (Key 020)
        /// </summary>
        [TecdocField(Name = @"LangNo", OldName = @"LangNo", Pos = 43, Length = 3)]
        public short LangNo { get; set; }

        /// <summary>
        /// Coordinate Number
        /// </summary>
        [TecdocField(Name = @"CoordNo", OldName = @"KoordinatenNr", Pos = 46, Length = 4)]
        public short CoordinateNo { get; set; }

        /// <summary>
        /// const = 0
        /// </summary>
        [TecdocField(Name = @"DeleteFlag", OldName = @"Lösch-Flag", Pos = 50, Length = 1)]
        //[NotMapped]
        public bool _DeleteFlag => false;

        #region Equality using primary key

        public bool Equals(T217? other)
            => other != null && StringComparer.InvariantCultureIgnoreCase.Equals(PartNo, other.PartNo) && SeqNo205.Equals(other.SeqNo205) && DocNo.Equals(other.DocNo) && DocumentType.Equals(other.DocumentType) && LangNo.Equals(other.LangNo);

        public override bool Equals(object? obj)
            => obj is T217 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(PartNo, StringComparer.InvariantCultureIgnoreCase);
            hash.Add(SeqNo205);
            hash.Add(DocNo);
            hash.Add(DocumentType);
            hash.Add(LangNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Packaging units lot sizes (optional)
    /// </summary>
    /// <remarks>
    /// (*)If this field is missing, the data record just contains one entry per packaging item for the standard lot size for
    /// the packaging item – if any exists. It is a mid term objective to make this information partly non-public what
    /// means that supplier can provide information for specific recipients, e.g. special delivery options for single
    /// wholesalers. Any projects with Data Supplier will be announced to the Data Users affected in due time.
    /// Annotation:
    /// A standard lotsize can either be defined based on the end user unit what then refers to entry in article table 200.
    /// It can as well be given based on an existing packaging unit as soon as the specific lot size is provided via
    /// several items of a package item. In this case ItemNo refers to a table 214 entry.
    /// </remarks>
    public partial class T218 : IEquatable<T218>
    {
        /// <summary>
        /// Article Number in the data supplier format (-&gt; 200/214)
        /// </summary>
        [TecdocField(Name = @"ItemNo", OldName = @"", Pos = 0, Length = 22)]
        [Required]
        [StringLength(22)]
        public string PackArtNo { get; set; } = default!;

        /// <summary>
        /// 0: end user unit (-&gt;200) ; 1: packing unit (-&gt; 214)
        /// </summary>
        [TecdocField(Name = @"ArtSwitch", OldName = @"", Pos = 22, Length = 1)]
        public char ArtSwitch { get; set; }

        /// <summary>
        /// Data Supplier Number Constant
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"", Pos = 23, Length = 4)]
        public short BrandNo { get; set; }

        /// <summary>
        /// Data Table Constant « 218 »
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"", Pos = 27, Length = 3)]
        //[NotMapped]
        public short _TableNo => 218;

        /// <summary>
        /// Amount of units specified by PackArtNo
        /// </summary>
        [TecdocField(Name = @"LotSize", OldName = @"", Pos = 30, Length = 4)]
        public short LotSize { get; set; }

        /// <summary>
        /// Just for distribution control – for future use
        /// </summary>
        [TecdocField(Name = @"RecipientID", OldName = @"", Pos = 34, Length = 4)]
        [Required]
        [StringLength(4)]
        public string RecipientID { get; set; } = default!;

        #region Equality using primary key

        public bool Equals(T218? other)
            => other != null && StringComparer.InvariantCultureIgnoreCase.Equals(PackArtNo, other.PackArtNo) && StringComparer.InvariantCultureIgnoreCase.Equals(RecipientID, other.RecipientID);

        public override bool Equals(object? obj)
            => obj is T218 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(PackArtNo, StringComparer.InvariantCultureIgnoreCase);
            hash.Add(RecipientID, StringComparer.InvariantCultureIgnoreCase);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Accessories information for articles
    /// </summary>
    /// <remarks>
    /// (*) Type ‘U’ starting  Data Release 0519 –           type ‘C’ until then
    /// LnkType:               1 = ManNo
    ///                        2 = KModNo
    ///                        3 = KTypNo
    ///                        4 = NTypNo
    ///                        5 = EngNo
    /// </remarks>
    public partial class T222 : IEquatable<T222>
    {
        /// <summary>
        /// Article Number in the data supplier format
        /// </summary>
        [TecdocField(Name = @"ArtNo", OldName = @"ArtNr", Pos = 0, Length = 22)]
        [Required]
        [StringLength(22)]
        public string PartNo { get; set; } = default!;

        /// <summary>
        /// Data Supplier Number Constant (Key 040)
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        public short BrandNo { get; set; }

        /// <summary>
        /// Data Table Constant « 222 »
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 222;

        /// <summary>
        /// Type of linkage (Vehicle Manufacturer, Model Series, PC, CV, Engine Manufacturer, Engine)
        /// </summary>
        [TecdocField(Name = @"LnkType", OldName = @"VKN_ART", Pos = 29, Length = 1)]
        public byte? LinkageType { get; set; }

        /// <summary>
        /// HerNr, KModNr, KTypNr, NTypNr or MotNr
        /// </summary>
        [TecdocField(Name = @"LnkVal", OldName = @"VKN_Value", Pos = 30, Length = 6)]
        public int? LinkageValue { get; set; }

        /// <summary>
        /// Sequential Number
        /// </summary>
        [TecdocField(Name = @"SeqNo", OldName = @"LfdNr", Pos = 36, Length = 3)]
        public short SeqNo222 { get; set; }

        /// <summary>
        /// Sorting Number
        /// </summary>
        [TecdocField(Name = @"SortNo", OldName = @"SortNr", Pos = 39, Length = 3)]
        public short SortNo222 { get; set; }

        /// <summary>
        /// Relevant accessory part, must be contained in the DT 200, KZZub must be ‘1’
        /// </summary>
        [TecdocField(Name = @"AccArtNo", OldName = @"ZArtNr", Pos = 42, Length = 22)]
        [Required]
        [StringLength(22)]
        public string AccessoryPartNo { get; set; } = default!;

        /// <summary>
        /// Quantity of accessory parts required
        /// </summary>
        [TecdocField(Name = @"Quantity", OldName = @"Menge", Pos = 64, Length = 3)]
        public short Quantity { get; set; }

        /// <summary>
        /// Unambiguous number of the accessory generic article (-&gt; SA320)
        /// </summary>
        [TecdocField(Name = @"AccGenArtNo", OldName = @"ZubGenArtNr", Pos = 67, Length = 5)]
        public int AccessoryGenArtNo { get; set; }

        /// <summary>
        /// Description Number (-&gt;030)
        /// </summary>
        [TecdocField(Name = @"TermNo", OldName = @"BezNr", Pos = 73, Length = 9)]
        public int? NameTermNo { get; set; }

        /// <summary>
        /// const = 0
        /// </summary>
        [TecdocField(Name = @"DeleteFlag", OldName = @"Lösch-Flag", Pos = 82, Length = 1)]
        //[NotMapped]
        public bool _DeleteFlag => false;

        #region Equality using primary key

        public bool Equals(T222? other)
            => other != null && StringComparer.InvariantCultureIgnoreCase.Equals(PartNo, other.PartNo) && SeqNo222.Equals(other.SeqNo222) && SortNo222.Equals(other.SortNo222);

        public override bool Equals(object? obj)
            => obj is T222 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(PartNo, StringComparer.InvariantCultureIgnoreCase);
            hash.Add(SeqNo222);
            hash.Add(SortNo222);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Criteria for the individual parts of an accessory list
    /// </summary>
    /// <remarks>
    /// (*) Type ‘U’ starting  Data Release 0519 – type ‘C’ until then
    /// Notes:                 When LnkType 3, 4 or 5 is used in table 222 the criteria 2, 14, or 16 must not be used in
    ///                        table 228 (Equals exclude one another!)
    ///                        When the LnkType 3 (PC) is used in             table 222, the criterion 16 must not be used in
    ///                        table228.
    ///                        When the LnkType 4 (CV) is used in table 222, the criterion 2 must not be used in table
    ///                        228.
    ///                        Criterion                2 = PC
    ///                        Criterion 16 = CV
    ///                        Criterion 14 = Engine
    /// </remarks>
    public partial class T228 : IEquatable<T228>
    {
        /// <summary>
        /// Article Number in the data supplier format
        /// </summary>
        [TecdocField(Name = @"ArtNo", OldName = @"ArtNr", Pos = 0, Length = 22)]
        [Required]
        [StringLength(22)]
        public string PartNo { get; set; } = default!;

        /// <summary>
        /// Data Supplier Number Constant (Key 040)
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        public short BrandNo { get; set; }

        /// <summary>
        /// Data Table Constant « 228 »
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 228;

        /// <summary>
        /// Country Code (Key 010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"LKZ", Pos = 29, Length = 3)]
        [StringLength(3)]
        public string? CountryCode { get; set; }

        /// <summary>
        /// LfdNr from DT222
        /// </summary>
        [TecdocField(Name = @"SeqNo1", OldName = @"LfdNr1", Pos = 32, Length = 3)]
        public short SeqNo222 { get; set; }

        /// <summary>
        /// Sorting Order
        /// </summary>
        [TecdocField(Name = @"SortNo1", OldName = @"SortNr1", Pos = 35, Length = 3)]
        public short SortNo222 { get; set; }

        /// <summary>
        /// Sequential number for the accessory list criterion
        /// </summary>
        [TecdocField(Name = @"SeqNo", OldName = @"LfdNr", Pos = 38, Length = 3)]
        public short SeqNo { get; set; }

        /// <summary>
        /// Criterion Number (Key 050)
        /// </summary>
        [TecdocField(Name = @"CritNo", OldName = @"KritNr", Pos = 41, Length = 4)]
        public short CritNo { get; set; }

        /// <summary>
        /// Criterion Value
        /// </summary>
        [TecdocField(Name = @"CritVal", OldName = @"KritWert", Pos = 45, Length = 20)]
        [StringLength(20)]
        public string? CritVal { get; set; }

        /// <summary>
        /// ‘1’ = Country Code is an exclusion, ‘0’ = Country Code is an inclusion.
        /// </summary>
        [TecdocField(Name = @"Exclude", OldName = @"Exclude", Pos = 65, Length = 1)]
        public bool? Exclude { get; set; }

        /// <summary>
        /// const = 0
        /// </summary>
        [TecdocField(Name = @"DeleteFlag", OldName = @"Lösch-Flag", Pos = 66, Length = 1)]
        //[NotMapped]
        public bool _DeleteFlag => false;

        #region Equality using primary key

        public bool Equals(T228? other)
            => other != null && StringComparer.InvariantCultureIgnoreCase.Equals(PartNo, other.PartNo) && SeqNo222.Equals(other.SeqNo222) && SortNo222.Equals(other.SortNo222) && SeqNo.Equals(other.SeqNo);

        public override bool Equals(object? obj)
            => obj is T228 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(PartNo, StringComparer.InvariantCultureIgnoreCase);
            hash.Add(SeqNo222);
            hash.Add(SortNo222);
            hash.Add(SeqNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// The allocation of graphics/documents to picture numbers
    /// </summary>
    /// <remarks>
    /// (*) Type ‘U’ starting Data Release 0519 – type ‘C’ until then
    /// Notes :  Each DocNo/DocType – combination must contain a data record with the language number 255
    ///                     (Universal); this will be displayed for languages that are not covered by the delivered languages.
    ///                     The documents have to correspond to a document type in data table 014. Currently allowed are BMP,
    ///                     PDF, JPG, PNG, GIF and URL.
    ///                     The image name has to be stated with the document types BMP, PDF, PNG, GIF and JPG; the URL has
    ///                     to be stated with the document type URL.
    /// Rules for picture files of JPG, PNG and BMP type (starting November 2021)
    /// The maximum permitted size for pictures is 2500 x 2500 Pixel.
    /// The size of the image files must not exceed 200 kB
    /// Watermarks are not recommended as not well accepted by data users
    /// Extended rules for the document type "URL"
    /// We offer the possibility to make documents (!) available to the market not only as files via the distribution
    /// platform but alternatively as a link (URL) to such documents.
    /// For this purpose, we have integrated a new document type "URL" into the format and equipped the DMM R2 /
    /// PMD R2 accordingly.
    /// The entire TecAlliance catalog data exchange format is designed to exchange documents that can be displayed
    /// in catalogs. Information on image type and standardized caption can be used to transmit documents for
    /// different applications (image, installation instructions, safety data sheet, etc.).
    /// The same applies to documents of the document type URL: Documents must be linked that correspond to one
    /// of the use cases defined by the exchange format.
    /// The following rules apply to this document type:
    /// -        The link must contain a valid URI according to RFC 39865
    /// -        Allowed network protocols are http and https
    /// -        The link must point to a document with one of the following file types:
    ///          BMP, JPG, JPEG, PNG, GIF, PDF, M4A, MP4, MPG, MPEG, AVI
    /// -        Also allowed are references to YouTube videos. The links must begin with the following string:
    ///          https://www.youtube.com/embed/
    ///          or
    ///          https://www.youtube-nocoookie.com/embed/
    ///          Please note that YouTube links are not available in some regions of the world.
    /// -        Further URL prefixes (analogous to YouTube) can be requested from the TecAlliance for use, provided
    ///          that they obey the above rules and are used exclusively (!) for the reproduction of media content.
    /// Enhanced rules for document type "GIF" (from June 2018)
    /// The document type "GIF" is to be used to transport simple animations, for example to display simple panoramic
    /// views of a spare part in a catalog.
    /// For the first time, there is a file size limit for this document type. (*)
    /// Extended rules for the document type "ZIP" (360° product images) (not yet avaliable)
    /// This section has been removed from the documentation, as this information is exchanged via a separate
    /// channel.
    /// The TecDoc data maintenance software DMM/PMD is not used. The documents are not part of the regular data
    /// packages.
    /// You will receive information on this - after completion of the pilot project - as part of the regular Data
    /// Distribution Mailings.
    /// Annotation on the use of Watermarks
    /// The use of watermarks on images and drawings is not appreciated by the operators of stores and catalogues.
    /// The use of watermarks could therefore lead to these product describing components not being displayed.
    /// We therefore recommend only to provide images, drawings and other documents without watermarks.
    /// </remarks>
    public partial class T231 : IEquatable<T231>
    {
        /// <summary>
        /// Constantly blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserviert", Pos = 0, Length = 22)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Data Supplier Number Constant (Key 040)
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        public short BrandNo { get; set; }

        /// <summary>
        /// Data Table Constant= 231
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 231;

        /// <summary>
        /// Unambiguous Picture Number ( 100.000 * BrandNo, &lt; 100.000 * (BrandNo + 1))
        /// </summary>
        [TecdocField(Name = @"DocNo", OldName = @"BildNr", Pos = 29, Length = 9)]
        public int DocNo { get; set; }

        /// <summary>
        /// Language Number (Key 020)
        /// </summary>
        [TecdocField(Name = @"LangNo", OldName = @"LangNo", Pos = 38, Length = 3)]
        public short LangNo { get; set; }

        /// <summary>
        /// Graphic file name without extension
        /// </summary>
        [TecdocField(Name = @"DocName", OldName = @"Bildname", Pos = 41, Length = 30)]
        [StringLength(30)]
        public string? DocName { get; set; }

        /// <summary>
        /// (KT 143) Article, Vehicle, etc
        /// </summary>
        [TecdocField(Name = @"DocContentType", OldName = @"BildType", Pos = 71, Length = 3)]
        public short DocContentTypeKey { get; set; }

        /// <summary>
        /// (KT 141) Standardised Graphic Header
        /// </summary>
        [TecdocField(Name = @"DocTermNorm", OldName = @"BezNorm", Pos = 74, Length = 3)]
        public short ImageHeaderKey { get; set; }

        /// <summary>
        /// Graphic width
        /// </summary>
        [TecdocField(Name = @"Width", OldName = @"Breit", Pos = 77, Length = 4)]
        public short? Width { get; set; }

        /// <summary>
        /// Graphic height
        /// </summary>
        [TecdocField(Name = @"Height", OldName = @"Hoch", Pos = 81, Length = 4)]
        public short? Height { get; set; }

        /// <summary>
        /// Colour Quantity
        /// </summary>
        [TecdocField(Name = @"Colors", OldName = @"Farben", Pos = 85, Length = 3)]
        public short? Colours { get; set; }

        /// <summary>
        /// -&gt; DT014.
        /// </summary>
        [TecdocField(Name = @"DocType", OldName = @"DokumentenArt", Pos = 88, Length = 2)]
        public byte DocumentType { get; set; }

        /// <summary>
        /// Description –&gt; DT 030
        /// </summary>
        [TecdocField(Name = @"TermNo", OldName = @"BezNr", Pos = 90, Length = 9)]
        public int? NameTermNo { get; set; }

        /// <summary>
        /// const = 0
        /// </summary>
        [TecdocField(Name = @"DeleteFlag", OldName = @"Lösch-Flag", Pos = 99, Length = 1)]
        //[NotMapped]
        public bool _DeleteFlag => false;

        /// <summary>
        /// URL to which the link is made. Only if DokumentenArt = URL
        /// </summary>
        [TecdocField(Name = @"URL", OldName = @"URL", Pos = 100, Length = 300)]
        [StringLength(300)]
        public string? URL { get; set; }

        #region Equality using primary key

        public bool Equals(T231? other)
            => other != null && DocNo.Equals(other.DocNo) && DocumentType.Equals(other.DocumentType) && LangNo.Equals(other.LangNo);

        public override bool Equals(object? obj)
            => obj is T231 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(DocNo);
            hash.Add(DocumentType);
            hash.Add(LangNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// The allocation of graphics to article numbers
    /// </summary>
    /// <remarks>
    /// (*) Type ‘U’ starting Data Release 0519 – type ‘C’ until then
    /// Notes:                      Multiple graphics are allowed for each article. One graphic can also be used by more
    ///                             than one article.
    ///                             The combination DocNo, DocType must be contained in the DT231.
    ///                             The DocNo must be contained in the DT 231 and have the DocType ‘Article’ there.
    /// When multiple Graphics are linked to one article we recommend to use the same colour palette!
    ///    Primary Key change in Data Release 2223
    ///    This table is about asset files allocated to articles. If more than one asset is existing they are identified and
    ///    sorted by a unique SortNo field entry.
    ///    In case an asset file is valid for multiple countries, the record is repeated with different country codes (usual
    ///    procedure in TecDoc tables).
    ///    Content of the table might look like this:
    ///    ArtNo                         AssetFile         SortNo  Country
    ///    0001                          file_1            1
    ///    0001                          file_2            2       CountryCode_1
    ///    0001                          file_2            2       CountryCode_2
    ///    0001                          file_2            2       CountryCode_3
    ///    0002                          file_3            1
    ///    0003                          file_4            1       CountryCode_1
    ///    0003                          file_4            1       CountryCode_4
    /// </remarks>
    public partial class T232 : IEquatable<T232>
    {
        /// <summary>
        /// Article Number in the data supplier format
        /// </summary>
        [TecdocField(Name = @"ArtNo", OldName = @"ArtNr", Pos = 0, Length = 22)]
        [Required]
        [StringLength(22)]
        public string PartNo { get; set; } = default!;

        /// <summary>
        /// Data Supplier Number Constant (Key 040)
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        public short BrandNo { get; set; }

        /// <summary>
        /// Data Table Constant « 232 »
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 232;

        /// <summary>
        /// Sequential sorting number for graphics that belong to the same article, starting with 1 per article. Used to determine the order of display.
        /// </summary>
        [TecdocField(Name = @"SortNo", OldName = @"SortNr", Pos = 29, Length = 2)]
        public byte SortNo { get; set; }

        /// <summary>
        /// Country Code (Key 010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"LKZ", Pos = 31, Length = 3)]
        [Required]
        [StringLength(3)]
        public string CountryCode { get; set; } = default!;

        /// <summary>
        /// ‘1’ = Country Code is an exclusion, ‘0’ = Country Code is an inclusion.
        /// </summary>
        [TecdocField(Name = @"Exclude", OldName = @"Exclude", Pos = 34, Length = 1)]
        public bool? Exclude { get; set; }

        /// <summary>
        /// Unambiguous Graphics Number (-&gt;231)
        /// </summary>
        [TecdocField(Name = @"DocNo", OldName = @"BildNr", Pos = 35, Length = 9)]
        public int DocNo { get; set; }

        /// <summary>
        /// Document Type (-&gt; 014)
        /// </summary>
        [TecdocField(Name = @"DocType", OldName = @"DokumentenArt", Pos = 44, Length = 2)]
        public byte DocumentType { get; set; }

        /// <summary>
        /// const = 0
        /// </summary>
        [TecdocField(Name = @"DeleteFlag", OldName = @"Lösch-Flag", Pos = 46, Length = 1)]
        //[NotMapped]
        public bool _DeleteFlag => false;

        #region Equality using primary key

        public bool Equals(T232? other)
            => other != null && StringComparer.InvariantCultureIgnoreCase.Equals(PartNo, other.PartNo) && SortNo.Equals(other.SortNo) && StringComparer.InvariantCultureIgnoreCase.Equals(CountryCode, other.CountryCode);

        public override bool Equals(object? obj)
            => obj is T232 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(PartNo, StringComparer.InvariantCultureIgnoreCase);
            hash.Add(SortNo);
            hash.Add(CountryCode, StringComparer.InvariantCultureIgnoreCase);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Context sensitive graphics
    /// </summary>
    /// <remarks>
    /// Notes:                 Origin is always left top. When Type = 1, then Y2 is a mandatory field!
    ///                        Country restrictions for the whole graphic can be entered in DT 232.
    ///                        The usage of “DokumentenArt” URL is not permitted (-&gt; DT 014)
    /// </remarks>
    public partial class T233 : IEquatable<T233>
    {
        /// <summary>
        /// Data Supplier Number Constant (040)
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 0, Length = 4)]
        public short BrandNo { get; set; }

        /// <summary>
        /// Data Table Constant "233"
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 233;

        /// <summary>
        /// Unambiguous Graphic Number ( 100.000 * DatSupNo., &lt; 100.000 * (DatSupNo. + 1))
        /// </summary>
        [TecdocField(Name = @"DocNo", OldName = @"BildNr", Pos = 7, Length = 9)]
        public int DocNo { get; set; }

        /// <summary>
        /// Document Type (014)
        /// </summary>
        [TecdocField(Name = @"DocType", OldName = @"DokumentenArt", Pos = 16, Length = 2)]
        public byte DocumentType { get; set; }

        /// <summary>
        /// Coordinate number
        /// </summary>
        [TecdocField(Name = @"CoordNo", OldName = @"KoordinatenNr", Pos = 18, Length = 4)]
        public short CoordinateNo { get; set; }

        /// <summary>
        /// Sequential number when more than one Coordinate Number
        /// </summary>
        [TecdocField(Name = @"SeqNo", OldName = @"LfdNr", Pos = 22, Length = 3)]
        public short SeqNo { get; set; }

        /// <summary>
        /// Language Number (020)
        /// </summary>
        [TecdocField(Name = @"LangNo", OldName = @"LangNo", Pos = 25, Length = 3)]
        public short LangNo { get; set; }

        /// <summary>
        /// 0=Circle, 1=Square
        /// </summary>
        [TecdocField(Name = @"Type", OldName = @"Typ", Pos = 28, Length = 1)]
        public bool IsSquare { get; set; }

        /// <summary>
        /// X-Coordinate centre of the circle / 1. point of the square
        /// </summary>
        [TecdocField(Name = @"X1", OldName = @"X1", Pos = 29, Length = 4)]
        public short X1 { get; set; }

        /// <summary>
        /// Y-Coordinate centre of the circle / 1. point of the square
        /// </summary>
        [TecdocField(Name = @"Y1", OldName = @"Y1", Pos = 33, Length = 4)]
        public short Y1 { get; set; }

        /// <summary>
        /// Radius of the circle / X-Coordinate 2. point of the square
        /// </summary>
        [TecdocField(Name = @"X2", OldName = @"X2", Pos = 37, Length = 4)]
        public short X2 { get; set; }

        /// <summary>
        /// Y-Coordinate 2. point of the square
        /// </summary>
        [TecdocField(Name = @"Y2", OldName = @"Y2", Pos = 41, Length = 4)]
        public short? Y2 { get; set; }

        /// <summary>
        /// const = 0
        /// </summary>
        [TecdocField(Name = @"DeleteFlag", OldName = @"Lösch-Flag", Pos = 45, Length = 1)]
        //[NotMapped]
        public bool _DeleteFlag => false;

        #region Equality using primary key

        public bool Equals(T233? other)
            => other != null && DocNo.Equals(other.DocNo) && DocumentType.Equals(other.DocumentType) && CoordinateNo.Equals(other.CoordinateNo) && SeqNo.Equals(other.SeqNo);

        public override bool Equals(object? obj)
            => obj is T233 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(DocNo);
            hash.Add(DocumentType);
            hash.Add(CoordinateNo);
            hash.Add(SeqNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Hierarchically structured search tree
    /// </summary>
    /// <remarks>
    ///       2 Level 1 is the highest hierarchical level. The limitation to 4       hierarchical levels is removed  with  the  Data Release 0914
    ///       (Quarter 04/2014)
    ///       3 This field is empty when the data record describes an entry in       the superior hierarchy level.
    /// </remarks>
    public partial class T301 : IEquatable<T301>
    {
        /// <summary>
        /// Constantly blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserviert", Pos = 0, Length = 22)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant= 301
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 301;

        /// <summary>
        /// Unambiguous number of the search node
        /// </summary>
        [TecdocField(Name = @"Node_ID", OldName = @"Node_ID", Pos = 29, Length = 7)]
        public int NodeId { get; set; }

        /// <summary>
        /// Product section of the search node (KT 999)
        /// </summary>
        [TecdocField(Name = @"TreeTypNo", OldName = @"TreeTypNr", Pos = 36, Length = 3)]
        public short TreeTypeKey { get; set; }

        /// <summary>
        /// Number of the hierarchical level2 of the search
        /// </summary>
        [TecdocField(Name = @"Level", OldName = @"Stufe", Pos = 39, Length = 2)]
        public byte NodeDepth { get; set; }

        /// <summary>
        /// Node_ID of an entry in the relevant superior hierarchy level that is allocated this search node3
        /// </summary>
        [TecdocField(Name = @"Node_Parent_ID", OldName = @"Node_Parent_ID", Pos = 41, Length = 7)]
        public int? ParentNodeId { get; set; }

        /// <summary>
        /// Sorting order of the search node that belongs to a Node_Parent_ID.
        /// </summary>
        [TecdocField(Name = @"SortNo", OldName = @"SortNr", Pos = 48, Length = 2)]
        public byte SortNo { get; set; }

        /// <summary>
        /// Number of the description text (-&gt; 030)
        /// </summary>
        [TecdocField(Name = @"TermNo", OldName = @"BezNr", Pos = 50, Length = 9)]
        public int NameTermNo { get; set; }

        /// <summary>
        /// 0, when grouping, 1, when the generic article is allowed for this code
        /// </summary>
        [TecdocField(Name = @"GenArtOK", OldName = @"WertOK", Pos = 59, Length = 1)]
        public bool HasGenArts { get; set; }

        #region Equality using primary key

        public bool Equals(T301? other)
            => other != null && NodeId.Equals(other.NodeId);

        public override bool Equals(object? obj)
            => obj is T301 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(NodeId);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Allocation of generic articles to the Tecdoc search structure
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T302 : IEquatable<T302>
    {
        /// <summary>
        /// Constantly blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserviert", Pos = 0, Length = 22)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant= 301
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 302;

        /// <summary>
        /// Unambiguous number of the search node (-&gt;301)
        /// </summary>
        [TecdocField(Name = @"Node_ID", OldName = @"Node_ID", Pos = 29, Length = 7)]
        public int NodeId { get; set; }

        /// <summary>
        /// Sorting order within a search node
        /// </summary>
        [TecdocField(Name = @"SortNo", OldName = @"SortNr", Pos = 36, Length = 2)]
        public byte SortNo { get; set; }

        /// <summary>
        /// Unambiguous number of the generic article (-&gt;320)
        /// </summary>
        [TecdocField(Name = @"GenArtNo", OldName = @"GenArtNr", Pos = 38, Length = 5)]
        public int GenArtNo { get; set; }

        #region Equality using primary key

        public bool Equals(T302? other)
            => other != null && NodeId.Equals(other.NodeId) && GenArtNo.Equals(other.GenArtNo);

        public override bool Equals(object? obj)
            => obj is T302 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(NodeId);
            hash.Add(GenArtNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Allocation of criteria to combinations of search tree nodes and generic articles within the TecDoc search structure
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T304 : IEquatable<T304>
    {
        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 0, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant= 304
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 304;

        /// <summary>
        /// Unambiguous number of the search node (-&gt;301)
        /// </summary>
        [TecdocField(Name = @"Node_ID", OldName = @"Node_ID", Pos = 7, Length = 7)]
        public int NodeId { get; set; }

        /// <summary>
        /// Unambiguous number of the generic article (-&gt;320)
        /// </summary>
        [TecdocField(Name = @"GenArtNo", OldName = @"GenArtNr", Pos = 14, Length = 5)]
        public int GenArtNo { get; set; }

        /// <summary>
        /// Sorting order within one search node
        /// </summary>
        [TecdocField(Name = @"SortNo", OldName = @"SortNr", Pos = 19, Length = 3)]
        public short SortNo { get; set; }

        /// <summary>
        /// Unambiguous number of the criterion (DT050), must be of type ‘K’
        /// </summary>
        [TecdocField(Name = @"CritNo", OldName = @"KritNr", Pos = 22, Length = 4)]
        public short CritNo { get; set; }

        /// <summary>
        /// Criterion Value
        /// </summary>
        [TecdocField(Name = @"CritVal", OldName = @"KritWert", Pos = 26, Length = 20)]
        [Required]
        [StringLength(20)]
        public string CritVal { get; set; } = default!;

        #region Equality using primary key

        public bool Equals(T304? other)
            => other != null && NodeId.Equals(other.NodeId) && GenArtNo.Equals(other.GenArtNo) && CritNo.Equals(other.CritNo) && StringComparer.InvariantCultureIgnoreCase.Equals(CritVal, other.CritVal);

        public override bool Equals(object? obj)
            => obj is T304 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(NodeId);
            hash.Add(GenArtNo);
            hash.Add(CritNo);
            hash.Add(CritVal, StringComparer.InvariantCultureIgnoreCase);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Description of the quick-start icons
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T305 : IEquatable<T305>
    {
        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 0, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant= 305
        /// </summary>
        [TecdocField(Name = @"tableNo", OldName = @"SA", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 305;

        /// <summary>
        /// Unambiguous number of the quick-start icons
        /// </summary>
        [TecdocField(Name = @"QS_Id", OldName = @"QS_Id", Pos = 7, Length = 4)]
        public short QuickstartIconId { get; set; }

        /// <summary>
        /// Number of the description text -&gt; 030
        /// </summary>
        [TecdocField(Name = @"termNo", OldName = @"BezNr", Pos = 11, Length = 9)]
        public int NameTermNo { get; set; }

        /// <summary>
        /// Documentname (of Icon) with extension
        /// </summary>
        [TecdocField(Name = @"DocName", OldName = @"BildName", Pos = 20, Length = 30)]
        [Required]
        [StringLength(30)]
        public string DocName { get; set; } = default!;

        #region Equality using primary key

        public bool Equals(T305? other)
            => other != null && QuickstartIconId.Equals(other.QuickstartIconId);

        public override bool Equals(object? obj)
            => obj is T305 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(QuickstartIconId);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// The allocation of quick-start icons to the product areas (PC, CV, etc.)
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T306 : IEquatable<T306>
    {
        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 0, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant= 306
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 306;

        /// <summary>
        /// Product area of the search node
        /// </summary>
        [TecdocField(Name = @"TreeTypNo", OldName = @"TreeTypNr", Pos = 7, Length = 3)]
        public short TreeTypNo { get; set; }

        /// <summary>
        /// Unambiguous number of the quick-start icon -&gt; 305
        /// </summary>
        [TecdocField(Name = @"QS_Id", OldName = @"QS_Id", Pos = 10, Length = 4)]
        public short QuickstartIconId { get; set; }

        /// <summary>
        /// Quick-start icons sorting within the product area
        /// </summary>
        [TecdocField(Name = @"SortNo", OldName = @"SortNr", Pos = 14, Length = 3)]
        public short SortNo { get; set; }

        #region Equality using primary key

        public bool Equals(T306? other)
            => other != null && TreeTypNo.Equals(other.TreeTypNo) && QuickstartIconId.Equals(other.QuickstartIconId);

        public override bool Equals(object? obj)
            => obj is T306 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(TreeTypNo);
            hash.Add(QuickstartIconId);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Allocation of quick-start icons to Nodes/Leaves within one product area (PC, CV, etc.)
    /// </summary>
    /// <remarks>
    /// Generic Articles
    /// With the TecDoc Format version 2.6 some adjustments and extensions become effective to further improve the
    /// quality of the TecDoc catalogue data.
    /// The changes follow the already published and reported new rules of the TecDoc Data Quality Management
    /// (DQM) initiative started in 2020.
    /// The use of criteria can be limited - depending on the generic article - as follows:
    /// Mandatory Criteria:
    /// Generic Articles may expect specific criteria for a mandatory usage.
    /// The information is given in table 328 as before.
    /// Permitted optional criteria for first catalogue page:
    /// The usage of other criteria than the mandatory ones is further restricted as far as the first catalogue page is
    /// considered. These permitted criteria for each Generic Article are provided in the new table 331.
    /// Even if table 329 incl. proposed criteria still remains for now, all other criteria can still be used but must not be
    /// displayed on the first catalogue page.
    /// Permitted criteria (key table) values for specific criteria/GA combinations
    /// Some criteria of type “key table” are further restricted in a way that only parts of the key values are permitted for
    /// usage on certain Generic Articles. This option is extended to first page optional (table 329) criteria.
    /// This works without change in structure as the Sequence Number (SerqNo) filed in tables 328 and 329 is already
    /// unique for all entries in both tables. So a Sequence Number in table 330 uniquely identifies entries in table 328
    /// or table 329.
    /// As this is not a very comfortable way of referencing data we provide a (redundant) extension by introducing
    /// table 331 that is basically a merge of tables 328 and 329. It does not provide new content but a more
    /// comfortable way to handle table 330 restrictions.
    /// One of the main points of criticism about quality of TecDoc data was the nearly arbitrary use of criteria of type N
    /// (numerical) or C (Character). Especially comparing the content of the same numerical criterion values of
    /// different brands to identify a spare part shows huge differences in formatting that makes catalogues hard to
    /// use.
    /// Table 332: Criteria constraints
    /// This new table contains – for specific Generic Articles – some unambiguous formatting rules for some
    /// important criteria. For instance the schema for some numerical values is limited to a maximum digits after a
    /// separator (that is standardised as well). The tables uses Regular Expressions to describe the constraint. They
    /// can directly be used inside software modules. As they are hard to understand for non technical people the types
    /// of regular expressions used inside the table are listed and explained.
    /// </remarks>
    public partial class T307 : IEquatable<T307>
    {
        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 0, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant= 307
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 307;

        /// <summary>
        /// Product area of the search node
        /// </summary>
        [TecdocField(Name = @"TreeTypNo", OldName = @"TreeTypNr", Pos = 7, Length = 3)]
        public short TreeTypNo { get; set; }

        /// <summary>
        /// Unambiguous number of the quick-start icon -&gt; 305
        /// </summary>
        [TecdocField(Name = @"QS_Id", OldName = @"QS_Id", Pos = 10, Length = 4)]
        public short QuickstartIconId { get; set; }

        /// <summary>
        /// Unambiguous number of the search node -&gt;301
        /// </summary>
        [TecdocField(Name = @"Node_ID", OldName = @"Node_ID", Pos = 14, Length = 7)]
        public int NodeId { get; set; }

        /// <summary>
        /// Sorting of nodes/leaves within one product area after calling the quick-start icons (separate search tree, may deviate from DT 301).
        /// </summary>
        [TecdocField(Name = @"SortNo", OldName = @"SortNr", Pos = 21, Length = 3)]
        public short SortNo { get; set; }

        #region Equality using primary key

        public bool Equals(T307? other)
            => other != null && TreeTypNo.Equals(other.TreeTypNo) && QuickstartIconId.Equals(other.QuickstartIconId) && NodeId.Equals(other.NodeId);

        public override bool Equals(object? obj)
            => obj is T307 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(TreeTypNo);
            hash.Add(QuickstartIconId);
            hash.Add(NodeId);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Generic Articles
    /// </summary>
    /// <remarks>
    /// Comments:                  A flag OK-LCV is currently not          planned. All generic articles with the flag OK-PC are
    ///                            allowed for a linkage to LCV.
    /// </remarks>
    public partial class T320 : IEquatable<T320>
    {
        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 0, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant= 320
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 320;

        /// <summary>
        /// Unambiguous number of the generic article
        /// </summary>
        [TecdocField(Name = @"GenArtNo", OldName = @"GenArtNr", Pos = 7, Length = 5)]
        public int GenArtNo { get; set; }

        /// <summary>
        /// Unambiguous number of the standardised article description (-&gt; 323)
        /// </summary>
        [TecdocField(Name = @"NormTermNo", OldName = @"NartNr", Pos = 12, Length = 5)]
        public int NormGenArtDescNo { get; set; }

        /// <summary>
        /// Unambiguous number of the assembly group (-&gt;324)
        /// </summary>
        [TecdocField(Name = @"AssGrpNo", OldName = @"BgNr", Pos = 17, Length = 4)]
        public short? AssemblyGroupNo { get; set; }

        /// <summary>
        /// Unambiguous number of the usage (-&gt;325)
        /// </summary>
        [TecdocField(Name = @"UsageNo", OldName = @"VerwNr", Pos = 21, Length = 4)]
        public short? UsageNo { get; set; }

        /// <summary>
        /// Description Number (-&gt; 030) for description of the GenArt
        /// </summary>
        [TecdocField(Name = @"TermNo", OldName = @"BezNr", Pos = 25, Length = 9)]
        public int GenArtTermNo { get; set; }

        /// <summary>
        /// 0: not allowed in PC linkage (-&gt;400). Otherwise 1.
        /// </summary>
        [TecdocField(Name = @"OK_PC", OldName = @"OK_PKW", Pos = 34, Length = 1)]
        public bool ForPC { get; set; }

        /// <summary>
        /// 0: not allowed in CV linkage (-&gt;400). Otherwise 1.
        /// </summary>
        [TecdocField(Name = @"OK-CV", OldName = @"OK-NKW", Pos = 35, Length = 1)]
        public bool ForCV { get; set; }

        /// <summary>
        /// 0: not allowed in engine linkage (-&gt;400). Otherwise 1.
        /// </summary>
        [TecdocField(Name = @"OK-Eng", OldName = @"OK-Motor", Pos = 36, Length = 1)]
        public bool ForEngine { get; set; }

        /// <summary>
        /// 0: is not a universal generic article, otherwise 1
        /// </summary>
        [TecdocField(Name = @"OK-Universal", OldName = @"OK-Universal", Pos = 37, Length = 1)]
        public bool Universal { get; set; }

        /// <summary>
        /// 0: is not allowed for vehicle independent search, otherwise 1
        /// </summary>
        [TecdocField(Name = @"OK-Ind", OldName = @"OK-FZGUnab", Pos = 38, Length = 1)]
        public bool VehicleIndependentSearch { get; set; }

        /// <summary>
        /// 1: GenArt is earmarked for deletion, otherwise 0
        /// </summary>
        [TecdocField(Name = @"Delete", OldName = @"Delete", Pos = 39, Length = 1)]
        public bool Delete { get; set; }

        /// <summary>
        /// 0: not allowed in Axle linkage (-&gt;400). Otherwise 1.
        /// </summary>
        [TecdocField(Name = @"OK-Axle", OldName = @"OK-Achse", Pos = 40, Length = 1)]
        public bool ForAxle { get; set; }

        #region Equality using primary key

        public bool Equals(T320? other)
            => other != null && GenArtNo.Equals(other.GenArtNo);

        public override bool Equals(object? obj)
            => obj is T320 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(GenArtNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Standardised article description
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T323 : IEquatable<T323>
    {
        /// <summary>
        /// Constantly blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserviert", Pos = 0, Length = 22)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant= 323
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 323;

        /// <summary>
        /// Unambiguous number of the standardised article description
        /// </summary>
        [TecdocField(Name = @"NormTermNo", OldName = @"NartNr", Pos = 29, Length = 5)]
        public int NormGenArtDescNo { get; set; }

        /// <summary>
        /// Description Number (-&gt; 030)
        /// </summary>
        [TecdocField(Name = @"TermNo", OldName = @"BezNr", Pos = 34, Length = 9)]
        public int StandardisedDescriptionTermNo { get; set; }

        #region Equality using primary key

        public bool Equals(T323? other)
            => other != null && NormGenArtDescNo.Equals(other.NormGenArtDescNo);

        public override bool Equals(object? obj)
            => obj is T323 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(NormGenArtDescNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Assembly groups
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T324 : IEquatable<T324>
    {
        /// <summary>
        /// Constantly blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserviert", Pos = 0, Length = 22)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant= 324
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 324;

        /// <summary>
        /// Unambiguous number of the assembly group
        /// </summary>
        [TecdocField(Name = @"AssGrpNo", OldName = @"BgNr", Pos = 29, Length = 4)]
        public short AssemblyGroupNo { get; set; }

        /// <summary>
        /// Description Number (-&gt; 030)
        /// </summary>
        [TecdocField(Name = @"TermNo", OldName = @"BezNr", Pos = 33, Length = 9)]
        public int AssemblyGroupTermNo { get; set; }

        #region Equality using primary key

        public bool Equals(T324? other)
            => other != null && AssemblyGroupNo.Equals(other.AssemblyGroupNo);

        public override bool Equals(object? obj)
            => obj is T324 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(AssemblyGroupNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Purpose of use
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T325 : IEquatable<T325>
    {
        /// <summary>
        /// Constantly blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserviert", Pos = 0, Length = 22)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant= 325
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 325;

        /// <summary>
        /// Unambiguous number of the usage purpose
        /// </summary>
        [TecdocField(Name = @"UsageNo", OldName = @"VerwNr", Pos = 29, Length = 4)]
        public short UsageNo { get; set; }

        /// <summary>
        /// Description Number (-&gt; 030)
        /// </summary>
        [TecdocField(Name = @"TermNo", OldName = @"BezNr", Pos = 33, Length = 9)]
        public int UsageTermNo { get; set; }

        #region Equality using primary key

        public bool Equals(T325? other)
            => other != null && UsageNo.Equals(other.UsageNo);

        public override bool Equals(object? obj)
            => obj is T325 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(UsageNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Synonyms of the generic articles
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T327 : IEquatable<T327>
    {
        /// <summary>
        /// Constantly blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserviert", Pos = 0, Length = 22)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant= 327
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 327;

        /// <summary>
        /// Unambiguous number of the generic article (-&gt;320)
        /// </summary>
        [TecdocField(Name = @"GenArtNo", OldName = @"GenArtNr", Pos = 29, Length = 5)]
        public int GenArtNo { get; set; }

        /// <summary>
        /// Sequential number within a generic article
        /// </summary>
        [TecdocField(Name = @"SeqNo", OldName = @"LfdNr", Pos = 34, Length = 3)]
        public short SeqNo { get; set; }

        /// <summary>
        /// Language Number (-&gt; 020)
        /// </summary>
        [TecdocField(Name = @"LangNo", OldName = @"LangNo", Pos = 37, Length = 3)]
        public short LangNo { get; set; }

        /// <summary>
        /// Descriptions
        /// </summary>
        [TecdocField(Name = @"Term", OldName = @"Bez", Pos = 40, Length = 60)]
        [Required]
        [StringLength(60)]
        public string AlternateName { get; set; } = default!;

        #region Equality using primary key

        public bool Equals(T327? other)
            => other != null && GenArtNo.Equals(other.GenArtNo) && SeqNo.Equals(other.SeqNo) && LangNo.Equals(other.LangNo);

        public override bool Equals(object? obj)
            => obj is T327 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(GenArtNo);
            hash.Add(SeqNo);
            hash.Add(LangNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Mandatory criteria for generic articles
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T328 : IEquatable<T328>
    {
        /// <summary>
        /// Constantly blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserviert", Pos = 0, Length = 22)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant= 328
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 328;

        /// <summary>
        /// Unambiguous number of the generic article (-&gt;320)
        /// </summary>
        [TecdocField(Name = @"GenArtNo", OldName = @"GenArtNr", Pos = 29, Length = 5)]
        public int GenArtNo { get; set; }

        /// <summary>
        /// Sequential number within one GenArtNo
        /// </summary>
        [TecdocField(Name = @"SeqNo", OldName = @"LfdNr", Pos = 34, Length = 3)]
        public short SeqNo { get; set; }

        /// <summary>
        /// Former country code – not used anymore
        /// </summary>
        [TecdocField(Name = @"Reserved2", OldName = @"n/a", Pos = 37, Length = 3)]
        //[NotMapped]
        public string? CountryCode => "";

        /// <summary>
        /// Criterion Number (-&gt; 050)
        /// </summary>
        [TecdocField(Name = @"CritNo", OldName = @"KritNr", Pos = 40, Length = 4)]
        public short CritNo { get; set; }

        /// <summary>
        /// 1: must be specified as an article criterion (-&gt; 210). Otherwise 0.
        /// </summary>
        [TecdocField(Name = @"OnlyArt", OldName = @"Only210", Pos = 44, Length = 1)]
        public bool Only210 { get; set; }

        /// <summary>
        /// 1: must be specified as linkage criterion (-&gt; 400). Otherwise 0.
        /// </summary>
        [TecdocField(Name = @"OnlyLnk", OldName = @"Only400", Pos = 45, Length = 1)]
        public bool Only400 { get; set; }

        /// <summary>
        /// Const = 0
        /// </summary>
        [TecdocField(Name = @"Exclude", OldName = @"Exclude", Pos = 46, Length = 1)]
        //[NotMapped]
        public bool? Exclude => false;

        #region Equality using primary key

        public bool Equals(T328? other)
            => other != null && GenArtNo.Equals(other.GenArtNo) && SeqNo.Equals(other.SeqNo);

        public override bool Equals(object? obj)
            => obj is T328 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(GenArtNo);
            hash.Add(SeqNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Proposed criteria for generic articles
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T329 : IEquatable<T329>
    {
        /// <summary>
        /// Constantly blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserviert", Pos = 0, Length = 22)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant= 329
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 329;

        /// <summary>
        /// Unambiguous number of the generic article (-&gt;320)
        /// </summary>
        [TecdocField(Name = @"GenArtNo", OldName = @"GenArtNr", Pos = 29, Length = 5)]
        public int GenArtNo { get; set; }

        /// <summary>
        /// Sequential number within a GenArtNr
        /// </summary>
        [TecdocField(Name = @"SeqNo", OldName = @"LfdNr", Pos = 34, Length = 3)]
        public short SeqNo { get; set; }

        /// <summary>
        /// Former Country Code (not used anymore)
        /// </summary>
        [TecdocField(Name = @"Reserved2", OldName = @"n/a", Pos = 37, Length = 3)]
        [StringLength(3)]
        public string? CountryCode { get; set; }

        /// <summary>
        /// Criterion Number (-&gt; 050)
        /// </summary>
        [TecdocField(Name = @"CritNo", OldName = @"KritNr", Pos = 40, Length = 4)]
        public short CritNo { get; set; }

        /// <summary>
        /// Const = 0 (please refer to table 050)
        /// </summary>
        [TecdocField(Name = @"Art", OldName = @"210", Pos = 44, Length = 1)]
        public bool? ArticleCriteria { get; set; }

        /// <summary>
        /// Const = 0 (please refer to table 050)
        /// </summary>
        [TecdocField(Name = @"Lnk", OldName = @"400", Pos = 45, Length = 1)]
        public bool? LinkageCriteria { get; set; }

        /// <summary>
        /// Const = 0.
        /// </summary>
        [TecdocField(Name = @"Exclude", OldName = @"Exclude", Pos = 46, Length = 1)]
        //[NotMapped]
        public bool? Exclude => false;

        #region Equality using primary key

        public bool Equals(T329? other)
            => other != null && GenArtNo.Equals(other.GenArtNo) && SeqNo.Equals(other.SeqNo);

        public override bool Equals(object? obj)
            => obj is T329 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(GenArtNo);
            hash.Add(SeqNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Allocation of criteria values to GA criteria
    /// </summary>
    /// <remarks>
    /// (*): The pair GenArtNo/SeqNo is identifying exactly one entry      from table 328 or table 329. These two tables
    /// together deliver a unique set of GenArtNo/SeqNo values.
    /// </remarks>
    public partial class T330 : IEquatable<T330>
    {
        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 0, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant= 330
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 330;

        /// <summary>
        /// Unambiguous number of the generic article (-&gt;320)
        /// </summary>
        [TecdocField(Name = @"GenArtNo", OldName = @"GenArtNr", Pos = 7, Length = 5)]
        public int GenArtNo { get; set; }

        /// <summary>
        /// LfdNr (→328/329)
        /// </summary>
        [TecdocField(Name = @"SeqNo", OldName = @"LfdNr", Pos = 12, Length = 3)]
        public short SeqNo { get; set; }

        /// <summary>
        /// Sorting Order
        /// </summary>
        [TecdocField(Name = @"SortNo", OldName = @"SortNr", Pos = 15, Length = 3)]
        public short SortNo { get; set; }

        /// <summary>
        /// Criterion Value, criterion must be of type ‘K’
        /// </summary>
        [TecdocField(Name = @"CritVal", OldName = @"KritWert", Pos = 18, Length = 3)]
        [Required]
        [StringLength(3)]
        public string CritVal { get; set; } = default!;

        #region Equality using primary key

        public bool Equals(T330? other)
            => other != null && GenArtNo.Equals(other.GenArtNo) && SeqNo.Equals(other.SeqNo) && StringComparer.InvariantCultureIgnoreCase.Equals(CritVal, other.CritVal);

        public override bool Equals(object? obj)
            => obj is T330 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(GenArtNo);
            hash.Add(SeqNo);
            hash.Add(CritVal, StringComparer.InvariantCultureIgnoreCase);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Permitted Generic Article/Criteria combinations for use on first catalogue page
    /// </summary>
    /// <remarks>
    /// (*) For GA/Criteria combinations that are already standardised by DQM measures only the values 1 and 0 are
    /// part of the data. For all other GA/criteria combinations the values are 1 or 2, what indicates recommended
    /// attributes like the ones given in table 329. An earlier version of documentation contains a usage ‘9’ (not
    /// permitted). This is not yet implemented but might be added in the future.
    /// (**) Will  be delivered first with version 1121 on October, 14th 2021
    ///       All criteria not listed in this table are not recommended for use  at  all. If they are still used they must not be
    ///       flagged for display on the first catalogue page. The validations   in  TecAlliance data maintenance tools and
    ///       interfaces will take care.
    /// </remarks>
    public partial class T331 : IEquatable<T331>
    {
        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"", Pos = 0, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant= 331
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 331;

        /// <summary>
        /// Unambiguous number of the generic article (-&gt;320)
        /// </summary>
        [TecdocField(Name = @"GenArtNo", OldName = @"", Pos = 7, Length = 5)]
        public int GenArtNo { get; set; }

        /// <summary>
        /// Sort order for display of criteria on first catalogue page. Needs to be unique for all entries of one GA. Not required for usage=2 criteria
        /// </summary>
        [TecdocField(Name = @"SortNo", OldName = @"", Pos = 12, Length = 4)]
        public short? SortNo { get; set; }

        /// <summary>
        /// Criterion Number (-&gt; 050)
        /// </summary>
        [TecdocField(Name = @"CritNo", OldName = @"", Pos = 16, Length = 4)]
        public short CritNo { get; set; }

        /// <summary>
        /// 1=mandatory / 0=DQM Differentiation Attributes (optional on 1st page) / 2=recommended (*)
        /// </summary>
        [TecdocField(Name = @"Usage", OldName = @"", Pos = 20, Length = 1)]
        public byte Usage { get; set; }

        /// <summary>
        /// Only allowed to be used on article level (**)
        /// </summary>
        [TecdocField(Name = @"OnlyArticle", OldName = @"", Pos = 21, Length = 1)]
        public bool? OnlyArticle { get; set; }

        #region Equality using primary key

        public bool Equals(T331? other)
            => other != null && GenArtNo.Equals(other.GenArtNo) && CritNo.Equals(other.CritNo);

        public override bool Equals(object? obj)
            => obj is T331 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(GenArtNo);
            hash.Add(CritNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Allocation of criteria values to GA criteria (new TA DQM standard)
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T332 : IEquatable<T332>
    {
        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"", Pos = 0, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant= 332
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 332;

        /// <summary>
        ///  References entry in table 331
        /// </summary>
        [TecdocField(Name = @"GenArtNo", OldName = @"", Pos = 7, Length = 5)]
        public int GenArtNo { get; set; }

        /// <summary>
        /// 
        /// </summary>
        [TecdocField(Name = @"CritNo", OldName = @"", Pos = 12, Length = 4)]
        public short CritNo { get; set; }

        /// <summary>
        /// Criterion Value, criterion must be of type ‘K’
        /// </summary>
        [TecdocField(Name = @"CritVal", OldName = @"", Pos = 16, Length = 3)]
        [Required]
        [StringLength(3)]
        public string CritVal { get; set; } = default!;

        #region Equality using primary key

        public bool Equals(T332? other)
            => other != null && GenArtNo.Equals(other.GenArtNo) && CritNo.Equals(other.CritNo) && StringComparer.InvariantCultureIgnoreCase.Equals(CritVal, other.CritVal);

        public override bool Equals(object? obj)
            => obj is T332 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(GenArtNo);
            hash.Add(CritNo);
            hash.Add(CritVal, StringComparer.InvariantCultureIgnoreCase);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Constraints to standardise the usage of (numeric) criteria
    /// </summary>
    /// <remarks>
    /// Examples for Regular Expressions used in table 331:
    /// What it means?                                                     Regular expression
    /// For numerical mandatory fields of the exact length l:              [\d]{l}
    /// For numerical mandatory fields up to the length l:                 [\d]{1,l}
    /// For numerical fields with n pre-decimal places and m               [0-9]{n}[\.][0-9]{m}
    /// decimal places
    /// For numerical fields with maximum of one digit after the           [0-9]{1,4}([\,][0-9]{0,1}){0,1}
    /// comma
    /// For alphanumeric mandatory fields of the exact length l:           [\w]{l}
    /// For alphanumeric mandatory fields up to the length l               [\w]{1,l}
    /// For a fixed length field of length n with numeric                  (?!000000000)[0-9]{9}
    /// characters and leading zeros (Classical TAF
    /// representation of numeric IDs, like kTypeNo)                       Example with length = 9
    /// For a single-digit field with the permitted values “a”, “b”        [abc]
    /// or “c”
    /// For a date field in the yyyymm format                      (19|20)[0-9]{2} (0[1-9]|1[012])
    /// For fields of length l that are only permitted to contain  [a-zA-Z]{l}
    /// uppercase and lowercase letters between a/A and z/Z
    /// In case of multiple entries for one CritNo, the ones including a GenArtNo have always a higher priority then the
    /// one without a GenArtNo.
    /// The semantics in this case is that in general the Criteria CritNo requires a format &lt;RegEx1&gt; but if CritNo is used
    /// for an article allocated to Generic Article GenArtNo it requires a format &lt;RegEx2&gt;
    /// </remarks>
    public partial class T333 : IEquatable<T333>
    {
        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 0, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant= 333
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 333;

        /// <summary>
        /// Criteria number (→ 050.CritNo)
        /// </summary>
        [TecdocField(Name = @"CritNo", OldName = @"n/a", Pos = 7, Length = 4)]
        public short CritNo { get; set; }

        /// <summary>
        /// “050”: CritNo contains reference to table 050 “053”: CritNo contains reference to table 053
        /// </summary>
        [TecdocField(Name = @"CritNoType", OldName = @"n/a", Pos = 11, Length = 3)]
        [Required]
        [StringLength(3)]
        public string CritNoType { get; set; } = default!;

        /// <summary>
        /// Generic Article No (→ 320.GenArtNo)
        /// </summary>
        [TecdocField(Name = @"GenArtNo", OldName = @"n/a", Pos = 14, Length = 5)]
        public int GenArtNo { get; set; }

        /// <summary>
        /// Rule for value of CritNo used for article of GenArtNo. Provided as Regular Expression following &lt;tbd&gt; standard notation
        /// </summary>
        [TecdocField(Name = @"Constraint", OldName = @"n/a", Pos = 19, Length = 100)]
        [Required]
        [StringLength(100)]
        public string Constraint { get; set; } = default!;

        #region Equality using primary key

        public bool Equals(T333? other)
            => other != null && StringComparer.InvariantCultureIgnoreCase.Equals(CritNoType, other.CritNoType) && CritNo.Equals(other.CritNo) && GenArtNo.Equals(other.GenArtNo);

        public override bool Equals(object? obj)
            => obj is T333 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(CritNoType, StringComparer.InvariantCultureIgnoreCase);
            hash.Add(CritNo);
            hash.Add(GenArtNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Generic Articles requiring a safety data sheet
    /// </summary>
    /// <remarks>
    /// Manufacturers and Model                         Series
    /// </remarks>
    public partial class T334 : IEquatable<T334>
    {
        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"n/a", Pos = 0, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant= 334
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"n/a", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 334;

        /// <summary>
        /// Unambiguous number of the generic article (-&gt;320)
        /// </summary>
        [TecdocField(Name = @"GenArtNo", OldName = @"n/a", Pos = 34, Length = 5)]
        public int GenArtNo { get; set; }

        #region Equality using primary key

        public bool Equals(T334? other)
            => other != null && GenArtNo.Equals(other.GenArtNo);

        public override bool Equals(object? obj)
            => obj is T334 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(GenArtNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Permitted allocations of Engine Types to Generic Articles
    /// </summary>
    /// <remarks>
    /// (*) Any combination is permitted in case a Generic Article does not appear in this table at all
    /// 4  Data Supplier Data
    /// General Supplier Data                           Tables
    /// </remarks>
    public partial class T340 : IEquatable<T340>
    {
        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"", Pos = 0, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant "340"
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 340;

        /// <summary>
        /// Generic Article Number (→320)
        /// </summary>
        [TecdocField(Name = @"GenArtNo", OldName = @"", Pos = 7, Length = 5)]
        public int GenArtNo { get; set; }

        /// <summary>
        /// → Key Table 080
        /// </summary>
        [TecdocField(Name = @"EngineType", OldName = @"", Pos = 12, Length = 3)]
        [Required]
        [StringLength(3)]
        public string EngineTypeKey { get; set; } = default!;

        #region Equality using primary key

        public bool Equals(T340? other)
            => other != null && GenArtNo.Equals(other.GenArtNo) && StringComparer.InvariantCultureIgnoreCase.Equals(EngineTypeKey, other.EngineTypeKey);

        public override bool Equals(object? obj)
            => obj is T340 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(GenArtNo);
            hash.Add(EngineTypeKey, StringComparer.InvariantCultureIgnoreCase);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Linkage of the articles with linkage targets
    /// </summary>
    /// <remarks>
    /// (*) Type ‘U’ starting  Data Release 0519 – type ‘C’ until then
    /// Notes:                 Linkage of an article ArtNr, that is contained in the data table (-&gt; 200), with a generic
    ///                        article and vehicle as well as criteria. The combination Article Number and Generic
    ///                        Article Number must be contained in the data table                 (-&gt; 211).
    ///                        There is one data record per linkage in this data table.
    ///                        In the key table 271 for the linkage target types, the current criteria number which
    ///                        expressed a linkage since the format version 2.2 remained: (2 = PC-Ktype-No, 7 =
    ///                        ManID-No,                14  =  EngineNo,  16  =  CV-Type-No,  19  =  Axle-Type-No).   Therefore,  no
    ///                        conversion of the values has to take place when making a format conversion.
    ///                  Linkages of the same article with the same vehicle and the same generic article must
    ///                  differ in any relevant point.
    ///                  Valid differences are:
    ///                  •  Article description (-&gt; 200)
    ///                  •  Additional article description (-&gt; 200)
    ///                  •  Article criteria set to immediate display (-&gt; 210)
    ///                  •  Article information set to immediate display (-&gt; 206)
    ///                  •  Linkage criteria set to immediate display (-&gt; 400)
    ///                  •  Linkage information set to immediate display (-&gt; 401)
    /// If an article with the same generic article is linked more than once to the same linkage target, the LfdNr will
    /// determine the display sequence of these linkages.
    /// </remarks>
    public partial class T400 : IEquatable<T400>
    {
        /// <summary>
        /// Article Number in the data supplier format
        /// </summary>
        [TecdocField(Name = @"ArtNo", OldName = @"ArtNr", Pos = 0, Length = 22)]
        [Required]
        [StringLength(22)]
        public string PartNo { get; set; } = default!;

        /// <summary>
        /// Data Supplier Number Constant (Key 040)
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        public short BrandNo { get; set; }

        /// <summary>
        /// Data Table Constant ‘400’
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 400;

        /// <summary>
        /// Unambiguous number of the generic article (-&gt;320)
        /// </summary>
        [TecdocField(Name = @"GenArtNo", OldName = @"GenArtNr", Pos = 29, Length = 5)]
        public int GenArtNo { get; set; }

        /// <summary>
        /// Type of the linkage target (PC, CV, engine, …)
        /// </summary>
        [TecdocField(Name = @"LnkTargetType", OldName = @"VknZielArt", Pos = 34, Length = 3)]
        public short LinkageType { get; set; }

        /// <summary>
        /// Number of the linkage target (KTypNo, NTypNo, EngNo, ManIDNo, …)
        /// </summary>
        [TecdocField(Name = @"LnkTargetNo", OldName = @"VknZielNr", Pos = 37, Length = 9)]
        public int LinkageValue { get; set; }

        /// <summary>
        /// Sequential number within the ArtNo-GenArtNo-LnkTargetNo-linkage
        /// </summary>
        [TecdocField(Name = @"SeqNo", OldName = @"LfdNr", Pos = 46, Length = 9)]
        public int SeqNo { get; set; }

        /// <summary>
        /// const = 0
        /// </summary>
        [TecdocField(Name = @"DeleteFlag", OldName = @"Lösch-Flag", Pos = 55, Length = 1)]
        //[NotMapped]
        public bool _DeleteFlag => false;

        #region Equality using primary key

        public bool Equals(T400? other)
            => other != null && LinkageType.Equals(other.LinkageType) && LinkageValue.Equals(other.LinkageValue) && GenArtNo.Equals(other.GenArtNo) && StringComparer.InvariantCultureIgnoreCase.Equals(PartNo, other.PartNo) && SeqNo.Equals(other.SeqNo);

        public override bool Equals(object? obj)
            => obj is T400 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(LinkageType);
            hash.Add(LinkageValue);
            hash.Add(GenArtNo);
            hash.Add(PartNo, StringComparer.InvariantCultureIgnoreCase);
            hash.Add(SeqNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Search menu dependent information texts
    /// </summary>
    /// <remarks>
    /// (*) Type ‘U’ starting Data Release 0519 – type ‘C’ until then
    /// Notes:           Listing of information text to article linkages that could not be specified in criteria, (-&gt;
    ///                  410). Usage of the data table (-&gt; 410) is always preferred.
    ///                  Only information that is relevant to the use of articles in different vehicles may be
    ///                  specified here. Information that is relevant only to the article, irrespective of the vehicle
    ///                  wherein it is used, should be specified in the data table (-&gt; 206).
    ///                  Text can be defined with different types of information. The display sequence of text
    ///                  with different information types in the presentation system is specified by means of the
    ///                  SortNo.
    ///                  Country in-/exclusions may not be contradictory. When a text is defined for the country group ‘BEN’,
    /// additional text may not be included for the country ‘NL’.
    /// Primary Key change in Data Release 2223
    /// This table is about text-modules on linkages. If more than one text module is existing they are identified and
    /// sorted by a unique SortNo field entry.
    /// In case a text module is valid for multiple countries, the record is repeated with different country codes (usual
    /// procedure in TecDoc tables).
    /// Content of the table might look like this:
    /// Linkage(*)                    TextModule                   SortNo                   Country
    /// Lnk1                          Txt_1                        1
    /// Lnk1                          Txt_2                        2                        CountryCode_1
    /// Lnk1                          Txt_2                        2                        CountryCode_2
    /// Lnk1                          Txt_2                        2                        CountryCode_3
    /// Lnk2                          Txt_3                        1
    /// Lnk3                          Txt_4                        1                        CountryCode_1
    /// Lnk3                          Txt_4                        1                        CountryCode_4
    /// (*) This is a composite key. Components are not given here for reasons of clarity.
    /// </remarks>
    public partial class T401 : IEquatable<T401>
    {
        /// <summary>
        /// Article Number in the data supplier format
        /// </summary>
        [TecdocField(Name = @"ArtNo", OldName = @"ArtNr", Pos = 0, Length = 22)]
        [Required]
        [StringLength(22)]
        public string PartNo { get; set; } = default!;

        /// <summary>
        /// Data Supplier Number Constant
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        public short BrandNo { get; set; }

        /// <summary>
        /// Data Table Constant "401"
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 401;

        /// <summary>
        /// Unambiguous number of the Generic Article (-&gt;320)
        /// </summary>
        [TecdocField(Name = @"GenArtNo", OldName = @"GenArtNr", Pos = 29, Length = 5)]
        public int GenArtNo { get; set; }

        /// <summary>
        /// Type of the linkage target (PC, CV, engine, …)
        /// </summary>
        [TecdocField(Name = @"LnkTargetType", OldName = @"VknZielArt", Pos = 34, Length = 3)]
        public short LinkageType { get; set; }

        /// <summary>
        /// Number of the linkage target (KTypNo, NTypNo, EngNo, ManIDNo, …)
        /// </summary>
        [TecdocField(Name = @"LnktargetNo", OldName = @"VknZielNr", Pos = 37, Length = 9)]
        public int LinkageValue { get; set; }

        /// <summary>
        /// Sequential number within the ArtNo-GenArtNo-LnkTargetNo-linkage
        /// </summary>
        [TecdocField(Name = @"SeqNo", OldName = @"LfdNr", Pos = 46, Length = 9)]
        public int SeqNo { get; set; }

        /// <summary>
        /// Display sequence
        /// </summary>
        [TecdocField(Name = @"SortNo", OldName = @"SortNr", Pos = 55, Length = 2)]
        public byte SortNo { get; set; }

        /// <summary>
        /// Country Code (-&gt; 010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"LKZ", Pos = 57, Length = 3)]
        [Required]
        [StringLength(3)]
        public string CountryCode { get; set; } = default!;

        /// <summary>
        /// Information Type (KT 072)
        /// </summary>
        [TecdocField(Name = @"InfType", OldName = @"InfArt", Pos = 60, Length = 3)]
        public short InfoTypeKey { get; set; }

        /// <summary>
        /// Immediate Display = 1: Information is shown on the 1st article page of the presentation system and repeated in bold on the 2nd article page.
        /// </summary>
        [TecdocField(Name = @"FirstPage", OldName = @"AnzSofort", Pos = 63, Length = 1)]
        public bool FirstPage { get; set; }

        /// <summary>
        /// Text module
        /// </summary>
        [TecdocField(Name = @"TxtModNo", OldName = @"TBSNr", Pos = 64, Length = 6)]
        [Required]
        [StringLength(6)]
        public string TextModuleNo { get; set; } = default!;

        /// <summary>
        /// ‘1’ = Country Code is an exclusion, ‘0’ = Country Code is an inclusion.
        /// </summary>
        [TecdocField(Name = @"Exclude", OldName = @"Exclude", Pos = 70, Length = 1)]
        public bool? Exclude { get; set; }

        /// <summary>
        /// Const=0
        /// </summary>
        [TecdocField(Name = @"DeleteFlag", OldName = @"Lösch-Flag", Pos = 71, Length = 1)]
        //[NotMapped]
        public bool _DeleteFlag => false;

        #region Equality using primary key

        public bool Equals(T401? other)
            => other != null && LinkageType.Equals(other.LinkageType) && LinkageValue.Equals(other.LinkageValue) && GenArtNo.Equals(other.GenArtNo) && StringComparer.InvariantCultureIgnoreCase.Equals(PartNo, other.PartNo) && SeqNo.Equals(other.SeqNo) && SortNo.Equals(other.SortNo) && StringComparer.InvariantCultureIgnoreCase.Equals(CountryCode, other.CountryCode);

        public override bool Equals(object? obj)
            => obj is T401 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(LinkageType);
            hash.Add(LinkageValue);
            hash.Add(GenArtNo);
            hash.Add(PartNo, StringComparer.InvariantCultureIgnoreCase);
            hash.Add(SeqNo);
            hash.Add(SortNo);
            hash.Add(CountryCode, StringComparer.InvariantCultureIgnoreCase);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Country restriction of the linkage
    /// </summary>
    /// <remarks>
    /// (*) Type ‘U’ starting  Data Release             0519  – type ‘C’  until then
    /// </remarks>
    public partial class T403 : IEquatable<T403>
    {
        /// <summary>
        /// Article number in the data supplier format
        /// </summary>
        [TecdocField(Name = @"ArtNo", OldName = @"ArtNr", Pos = 0, Length = 22)]
        [Required]
        [StringLength(22)]
        public string PartNo { get; set; } = default!;

        /// <summary>
        /// Data supplier number (Key 040)
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        public short BrandNo { get; set; }

        /// <summary>
        /// constant "403"
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 403;

        /// <summary>
        /// Unambiguous number of the generic article (-&gt;320)
        /// </summary>
        [TecdocField(Name = @"GenArtNo", OldName = @"GenArtNr", Pos = 29, Length = 5)]
        public int GenArtNo { get; set; }

        /// <summary>
        /// Type of the linkage target (PC, CV, engine, …)
        /// </summary>
        [TecdocField(Name = @"LnkTargetType", OldName = @"VknZielArt", Pos = 34, Length = 3)]
        public short LinkageType { get; set; }

        /// <summary>
        /// Number of the linkage target (KTypNo, NTypNo, EngNo, ManIDNo, …)
        /// </summary>
        [TecdocField(Name = @"LnkTargetNo", OldName = @"VknZielNr", Pos = 37, Length = 9)]
        public int LinkageValue { get; set; }

        /// <summary>
        /// Sequential number within the ArtNo-GenArtNo-LnkTargetNo-linkage
        /// </summary>
        [TecdocField(Name = @"SeqNo", OldName = @"LfdNr", Pos = 46, Length = 9)]
        public int SeqNo { get; set; }

        /// <summary>
        /// Country code (-&gt; 010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"LKZ", Pos = 55, Length = 3)]
        [Required]
        [StringLength(3)]
        public string CountryCode { get; set; } = default!;

        /// <summary>
        /// “1" = country code is an exclusion, "0" = country code is an inclusion.
        /// </summary>
        [TecdocField(Name = @"Exclude", OldName = @"Exclude", Pos = 58, Length = 1)]
        public bool? Exclude { get; set; }

        /// <summary>
        /// Const = 0
        /// </summary>
        [TecdocField(Name = @"DeleteFlag", OldName = @"Lösch-Flag", Pos = 59, Length = 1)]
        //[NotMapped]
        public bool _DeleteFlag => false;

        #region Equality using primary key

        public bool Equals(T403? other)
            => other != null && LinkageType.Equals(other.LinkageType) && LinkageValue.Equals(other.LinkageValue) && GenArtNo.Equals(other.GenArtNo) && StringComparer.InvariantCultureIgnoreCase.Equals(PartNo, other.PartNo) && SeqNo.Equals(other.SeqNo) && StringComparer.InvariantCultureIgnoreCase.Equals(CountryCode, other.CountryCode);

        public override bool Equals(object? obj)
            => obj is T403 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(LinkageType);
            hash.Add(LinkageValue);
            hash.Add(GenArtNo);
            hash.Add(PartNo, StringComparer.InvariantCultureIgnoreCase);
            hash.Add(SeqNo);
            hash.Add(CountryCode, StringComparer.InvariantCultureIgnoreCase);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Sorting of the article linkages
    /// </summary>
    /// <remarks>
    /// (*) Type ‘U’ starting  Data Release 0519 – type ‘C’ until then
    /// Comments:              If the sorting is not specified for all articles linked to a linkage target, the articles without
    ///                        explicit sorting order will be shown in ascending order of their article numbers after
    ///                        those articles, which have an explicit sorting order.
    ///                        If the data supplier does not specifiy a sorting, all articles for the linkage target are
    ///                        sorted by their article number (and then after their SeqNo in the data table 400).
    ///                        If an article with the same generic article is linked several times to the same linkage
    ///                        target, the display of these linkages will be set by the SeqNo in the data table 400.
    ///                        The data checks by TecDoc will not check the completeness of the sorting.
    ///                        .
    /// </remarks>
    public partial class T404 : IEquatable<T404>
    {
        /// <summary>
        /// Article number in the data supplier format
        /// </summary>
        [TecdocField(Name = @"ArtNo", OldName = @"ArtNr", Pos = 0, Length = 22)]
        [Required]
        [StringLength(22)]
        public string PartNo { get; set; } = default!;

        /// <summary>
        /// Data supplier number (Key 040)
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        public short BrandNo { get; set; }

        /// <summary>
        /// constant "404"
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 404;

        /// <summary>
        /// Unambiguous number of the generic article (-&gt;320)
        /// </summary>
        [TecdocField(Name = @"GenArtNo", OldName = @"GenArtNr", Pos = 29, Length = 5)]
        public int GenArtNo { get; set; }

        /// <summary>
        /// Type of the linkage target (PC, CV, engine, …)
        /// </summary>
        [TecdocField(Name = @"LnkTargetType", OldName = @"VknZielArt", Pos = 34, Length = 3)]
        public short LinkageType { get; set; }

        /// <summary>
        /// Number of the linkage target (KTypNo, NTypNo, EngNo, ManIDNo, …)
        /// </summary>
        [TecdocField(Name = @"LnkTargetNo", OldName = @"VknZielNr", Pos = 37, Length = 9)]
        public int LinkageValue { get; set; }

        /// <summary>
        /// Display sequence
        /// </summary>
        [TecdocField(Name = @"SortNo", OldName = @"SortNr", Pos = 46, Length = 9)]
        public int SortNo { get; set; }

        /// <summary>
        /// const = 0
        /// </summary>
        [TecdocField(Name = @"DeleteFlag", OldName = @"Lösch-Flag", Pos = 55, Length = 1)]
        //[NotMapped]
        public bool _DeleteFlag => false;

        #region Equality using primary key

        public bool Equals(T404? other)
            => other != null && LinkageType.Equals(other.LinkageType) && LinkageValue.Equals(other.LinkageValue) && GenArtNo.Equals(other.GenArtNo) && StringComparer.InvariantCultureIgnoreCase.Equals(PartNo, other.PartNo);

        public override bool Equals(object? obj)
            => obj is T404 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(LinkageType);
            hash.Add(LinkageValue);
            hash.Add(GenArtNo);
            hash.Add(PartNo, StringComparer.InvariantCultureIgnoreCase);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Attributes (criteria) for the linkage
    /// </summary>
    /// <remarks>
    /// (*) Type ‘U’ starting  Data Release             0519  – type ‘C’  until then
    /// </remarks>
    public partial class T410 : IEquatable<T410>
    {
        /// <summary>
        /// Article number in the data supplier format
        /// </summary>
        [TecdocField(Name = @"ArtNo", OldName = @"ArtNr", Pos = 0, Length = 22)]
        [Required]
        [StringLength(22)]
        public string PartNo { get; set; } = default!;

        /// <summary>
        /// Data supplier number (Key 040)
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        public short BrandNo { get; set; }

        /// <summary>
        /// constant "410"
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 410;

        /// <summary>
        /// Unambiguous number of the generic article (-&gt;320)
        /// </summary>
        [TecdocField(Name = @"GenArtNo", OldName = @"GenArtNr", Pos = 29, Length = 5)]
        public int GenArtNo { get; set; }

        /// <summary>
        /// Type of the linkage target (PC, CV, engine, …)
        /// </summary>
        [TecdocField(Name = @"LnkTargetType", OldName = @"VknZielArt", Pos = 34, Length = 3)]
        public short LinkageType { get; set; }

        /// <summary>
        /// Number of the linkage target (KTypNo, NTypNo, EngNo, ManIDNo, …)
        /// </summary>
        [TecdocField(Name = @"LnkTargetNo", OldName = @"VknZielNr", Pos = 37, Length = 9)]
        public int LinkageValue { get; set; }

        /// <summary>
        /// Sequential number within the ArtNo-GenArtNo-LnkTargetNo-linkage
        /// </summary>
        [TecdocField(Name = @"SeqNo", OldName = @"LfdNr", Pos = 46, Length = 9)]
        public int SeqNo { get; set; }

        /// <summary>
        /// Display sequence
        /// </summary>
        [TecdocField(Name = @"SortNo", OldName = @"SortNr", Pos = 55, Length = 3)]
        public short SortNo { get; set; }

        /// <summary>
        /// Criterion number (-&gt; 050)
        /// </summary>
        [TecdocField(Name = @"CritNo", OldName = @"KritNr", Pos = 58, Length = 4)]
        public short CritNo { get; set; }

        /// <summary>
        /// Criterion value
        /// </summary>
        [TecdocField(Name = @"CritVal", OldName = @"KritWert", Pos = 62, Length = 20)]
        [StringLength(20)]
        public string? CritVal { get; set; }

        /// <summary>
        /// Immediate display = ‘1’, otherwise ‘0’
        /// </summary>
        [TecdocField(Name = @"FirstPage", OldName = @"AnzSofort", Pos = 82, Length = 1)]
        public bool FirstPage { get; set; }

        /// <summary>
        /// Country code (-&gt; 010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"LKZ", Pos = 83, Length = 3)]
        [StringLength(3)]
        public string? CountryCode { get; set; }

        /// <summary>
        /// “1" = country code is an exclusion, "0" = country code is an inclusion.
        /// </summary>
        [TecdocField(Name = @"Exclude", OldName = @"Exclude", Pos = 86, Length = 1)]
        public bool? Exclude { get; set; }

        /// <summary>
        /// const = 0
        /// </summary>
        [TecdocField(Name = @"DeleteFlag", OldName = @"Lösch-Flag", Pos = 87, Length = 1)]
        //[NotMapped]
        public bool _DeleteFlag => false;

        #region Equality using primary key

        public bool Equals(T410? other)
            => other != null && LinkageType.Equals(other.LinkageType) && LinkageValue.Equals(other.LinkageValue) && GenArtNo.Equals(other.GenArtNo) && StringComparer.InvariantCultureIgnoreCase.Equals(PartNo, other.PartNo) && SeqNo.Equals(other.SeqNo) && SortNo.Equals(other.SortNo);

        public override bool Equals(object? obj)
            => obj is T410 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(LinkageType);
            hash.Add(LinkageValue);
            hash.Add(GenArtNo);
            hash.Add(PartNo, StringComparer.InvariantCultureIgnoreCase);
            hash.Add(SeqNo);
            hash.Add(SortNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// The allocation of graphics to vehicle linkages
    /// </summary>
    /// <remarks>
    /// (*)  Type ‘U’ starting Data Release 0519 – type ‘C’ until    then
    /// Primary Key change in Data Release 2223
    /// This table is about asset files allocated to linkages. If more than one asset is existing they are identified and
    /// sorted by a unique SortNo field entry.
    /// In case an asset file is valid for multiple countries, the record is repeated with different country codes (usual
    /// procedure in TecDoc tables).
    /// Content of the table might look like this:
    /// Linkage (*)                   AssetFile         SortNo                                    Country
    /// Lnk1                          file_1            1
    /// Lnk1                          file_2            2                                         CountryCode_1
    /// Lnk1                          file_2            2                                         CountryCode_2
    /// Lnk1                          file_2            2                                         CountryCode_3
    /// Lnk2                          file_3            1
    /// Lnk3                          file_4            1                                         CountryCode_1
    /// Lnk3                          file_4            1                                         CountryCode_4
    /// (*) Linkage key is a composite key. Components are not give here for reasons of clarity.
    /// </remarks>
    public partial class T432 : IEquatable<T432>
    {
        /// <summary>
        /// Article Number in the data supplier format
        /// </summary>
        [TecdocField(Name = @"ArtNo", OldName = @"ArtNr", Pos = 0, Length = 22)]
        [Required]
        [StringLength(22)]
        public string PartNo { get; set; } = default!;

        /// <summary>
        /// Data Supplier Number Constant (Key 040)
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        public short BrandNo { get; set; }

        /// <summary>
        /// Data Table Constant "432"
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 432;

        /// <summary>
        /// Unambiguous number of the Generic Article (-&gt;320)
        /// </summary>
        [TecdocField(Name = @"GenArtNo", OldName = @"GenArtNr", Pos = 29, Length = 5)]
        public int GenArtNo { get; set; }

        /// <summary>
        /// Type of the linkage target (PC, CV, engine, …)
        /// </summary>
        [TecdocField(Name = @"LnkTargetType", OldName = @"VknZielArt", Pos = 34, Length = 3)]
        public short LinkageType { get; set; }

        /// <summary>
        /// Number of the linkage target (KTypNo, NTypNo, EngNo, ManIDNo, …)
        /// </summary>
        [TecdocField(Name = @"LnkTargetNo", OldName = @"VknZielNr", Pos = 37, Length = 9)]
        public int LinkageValue { get; set; }

        /// <summary>
        /// Sequential number within the ArtNo-GenArtNo-LnkTargetNo-linkage
        /// </summary>
        [TecdocField(Name = @"SeqNo", OldName = @"LfdNr", Pos = 46, Length = 9)]
        public int SeqNo { get; set; }

        /// <summary>
        /// Country Code (Key 010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"LKZ", Pos = 55, Length = 3)]
        [Required]
        [StringLength(3)]
        public string CountryCode { get; set; } = default!;

        /// <summary>
        /// Sorting Order
        /// </summary>
        [TecdocField(Name = @"SortNo", OldName = @"SortNr", Pos = 58, Length = 2)]
        public byte SortNo { get; set; }

        /// <summary>
        /// Unambiguous DocNo (-&gt; 231)
        /// </summary>
        [TecdocField(Name = @"DocNo", OldName = @"BildNr", Pos = 60, Length = 9)]
        public int DocNo { get; set; }

        /// <summary>
        /// -&gt; DT 014.
        /// </summary>
        [TecdocField(Name = @"DocType", OldName = @"DokumentenArt", Pos = 69, Length = 2)]
        public byte DocumentType { get; set; }

        /// <summary>
        /// ‘1’ = Country Code is an exclusion, ‘0’ = Country Code is an inclusion.
        /// </summary>
        [TecdocField(Name = @"Exclude", OldName = @"Exclude", Pos = 71, Length = 1)]
        public bool? Exclude { get; set; }

        /// <summary>
        /// const = 0
        /// </summary>
        [TecdocField(Name = @"DeleteFlag", OldName = @"Lösch-Flag", Pos = 72, Length = 1)]
        //[NotMapped]
        public bool _DeleteFlag => false;

        #region Equality using primary key

        public bool Equals(T432? other)
            => other != null && LinkageType.Equals(other.LinkageType) && LinkageValue.Equals(other.LinkageValue) && GenArtNo.Equals(other.GenArtNo) && StringComparer.InvariantCultureIgnoreCase.Equals(PartNo, other.PartNo) && SeqNo.Equals(other.SeqNo) && SortNo.Equals(other.SortNo) && StringComparer.InvariantCultureIgnoreCase.Equals(CountryCode, other.CountryCode);

        public override bool Equals(object? obj)
            => obj is T432 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(LinkageType);
            hash.Add(LinkageValue);
            hash.Add(GenArtNo);
            hash.Add(PartNo, StringComparer.InvariantCultureIgnoreCase);
            hash.Add(SeqNo);
            hash.Add(SortNo);
            hash.Add(CountryCode, StringComparer.InvariantCultureIgnoreCase);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Description of all CV primary types
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T532 : IEquatable<T532>
    {
        /// <summary>
        /// Constantly blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserviert", Pos = 0, Length = 22)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant= 532
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 532;

        /// <summary>
        /// Unambiguous number of the CV primary types
        /// </summary>
        [TecdocField(Name = @"NTypNo", OldName = @"NTypNr", Pos = 29, Length = 9)]
        public int NTypeNo { get; set; }

        /// <summary>
        /// Model Series CV (-&gt; 110)
        /// </summary>
        [TecdocField(Name = @"KModNo", OldName = @"KModNr", Pos = 38, Length = 5)]
        public int KModNo { get; set; }

        /// <summary>
        /// Sorting within one model series
        /// </summary>
        [TecdocField(Name = @"SortNo", OldName = @"Sort", Pos = 43, Length = 4)]
        public short SortNo { get; set; }

        /// <summary>
        /// Description of the CV type (-&gt; SA 012)
        /// </summary>
        [TecdocField(Name = @"CTermNo", OldName = @"LbezNr", Pos = 47, Length = 9)]
        public int TrimCTermNo { get; set; }

        /// <summary>
        /// Model Year from (YYYYMM) – Production Date
        /// </summary>
        [TecdocField(Name = @"ModYFrom", OldName = @"BJvon", Pos = 56, Length = 6)]
        public int? DateFromYYYYMM { get; set; }

        /// <summary>
        /// Model Year to (YYYYMM) – Production Date
        /// </summary>
        [TecdocField(Name = @"ModYTo", OldName = @"BJbis", Pos = 62, Length = 6)]
        public int? DateToYYYYMM { get; set; }

        /// <summary>
        /// Body Type (KT 067)
        /// </summary>
        [TecdocField(Name = @"BodyType", OldName = @"Bauart", Pos = 68, Length = 3)]
        public short BodyTypeKey { get; set; }

        /// <summary>
        /// Engine Type (KT 080)
        /// </summary>
        [TecdocField(Name = @"EngType", OldName = @"Motart", Pos = 71, Length = 3)]
        public short EngineTypeKey { get; set; }

        /// <summary>
        /// Engine output from in kW
        /// </summary>
        [TecdocField(Name = @"KWFrom", OldName = @"KWvon", Pos = 74, Length = 4)]
        public short PowerKwFrom { get; set; }

        /// <summary>
        /// Engine output to in kW
        /// </summary>
        [TecdocField(Name = @"KWTo", OldName = @"KWbis", Pos = 78, Length = 4)]
        public short? PowerKwTo { get; set; }

        /// <summary>
        /// Engine output from in HP
        /// </summary>
        [TecdocField(Name = @"HPFrom", OldName = @"PSvon", Pos = 82, Length = 4)]
        public short HorsepowerFrom { get; set; }

        /// <summary>
        /// Engine output to in HP
        /// </summary>
        [TecdocField(Name = @"HPTo", OldName = @"PSbis", Pos = 86, Length = 4)]
        public short? HorsepowerTo { get; set; }

        /// <summary>
        /// Engine capacity in cc (technical)
        /// </summary>
        [TecdocField(Name = @"CcmTech", OldName = @"CcmTech", Pos = 90, Length = 5)]
        public int EngineCcTech { get; set; }

        /// <summary>
        /// Tonnage in tonnes with 2 decimal spaces (999V99)
        /// </summary>
        [TecdocField(Name = @"Tonnage", OldName = @"Tonnage", Pos = 95, Length = 5)]
        public int Tonnage100 { get; set; }

        /// <summary>
        /// Axle Configuration (KT 065)
        /// </summary>
        [TecdocField(Name = @"AxleConfig", OldName = @"Achsconfig", Pos = 100, Length = 3)]
        public short? AxleConfigKey { get; set; }

        /// <summary>
        /// 1: Criterion is proposed for deletion, otherwise 0
        /// </summary>
        [TecdocField(Name = @"Delete", OldName = @"Delete", Pos = 103, Length = 1)]
        public bool Delete { get; set; }

        #region Equality using primary key

        public bool Equals(T532? other)
            => other != null && NTypeNo.Equals(other.NTypeNo);

        public override bool Equals(object? obj)
            => obj is T532 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(NTypeNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Inclusion of certain countries for a CV type
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T533 : IEquatable<T533>
    {
        /// <summary>
        /// Constantly blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserved", Pos = 0, Length = 22)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant =533
        /// </summary>
        [TecdocField(Name = @"tableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 533;

        /// <summary>
        /// Unambiguous number of the CV primary type (-&gt;532)
        /// </summary>
        [TecdocField(Name = @"NTypNo", OldName = @"NTypNr", Pos = 29, Length = 9)]
        public int NTypeNo { get; set; }

        /// <summary>
        /// Country Code (-&gt; 010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"LKZ", Pos = 38, Length = 3)]
        [Required]
        [StringLength(3)]
        public string CountryCode { get; set; } = default!;

        /// <summary>
        /// ‘1’ = Country Code is an exclusion, ‘0’ = Country Code is an inclusion.
        /// </summary>
        [TecdocField(Name = @"Exclude", OldName = @"Exclude", Pos = 41, Length = 1)]
        public bool Exclude { get; set; }

        #region Equality using primary key

        public bool Equals(T533? other)
            => other != null && NTypeNo.Equals(other.NTypeNo) && StringComparer.InvariantCultureIgnoreCase.Equals(CountryCode, other.CountryCode);

        public override bool Equals(object? obj)
            => obj is T533 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(NTypeNo);
            hash.Add(CountryCode, StringComparer.InvariantCultureIgnoreCase);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Description of all country-specific deviations of CV types
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T534 : IEquatable<T534>
    {
        /// <summary>
        /// Constantly blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserviert", Pos = 0, Length = 22)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant= 534
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 534;

        /// <summary>
        /// Unambiguous number of the CV primary types(-&gt;532)
        /// </summary>
        [TecdocField(Name = @"NTypNo", OldName = @"NTypNr", Pos = 29, Length = 9)]
        public int NTypeNo { get; set; }

        /// <summary>
        /// Country Code (-&gt; 010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"LKZ", Pos = 38, Length = 3)]
        [Required]
        [StringLength(3)]
        public string CountryCode { get; set; } = default!;

        /// <summary>
        /// Model Year from (YYYYMM) – Production Date
        /// </summary>
        [TecdocField(Name = @"ModYFrom", OldName = @"BJvon", Pos = 41, Length = 6)]
        public int? DateFromYYYYMM { get; set; }

        /// <summary>
        /// Model Year to (YYYYMM) – Production Date
        /// </summary>
        [TecdocField(Name = @"ModYTo", OldName = @"BJbis", Pos = 47, Length = 6)]
        public int? DateToYYYYMM { get; set; }

        #region Equality using primary key

        public bool Equals(T534? other)
            => other != null && NTypeNo.Equals(other.NTypeNo) && StringComparer.InvariantCultureIgnoreCase.Equals(CountryCode, other.CountryCode);

        public override bool Equals(object? obj)
            => obj is T534 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(NTypeNo);
            hash.Add(CountryCode, StringComparer.InvariantCultureIgnoreCase);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Description of all CV secondary types
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T535 : IEquatable<T535>
    {
        /// <summary>
        /// Constantly blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserviert", Pos = 0, Length = 22)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant= 535
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 535;

        /// <summary>
        /// Unambiguous number of the CV primary types (-&gt;532)
        /// </summary>
        [TecdocField(Name = @"NTypNo", OldName = @"NTypNr", Pos = 29, Length = 9)]
        public int NTypeNo { get; set; }

        /// <summary>
        /// Unambiguous number of the secondary type within a primary type
        /// </summary>
        [TecdocField(Name = @"NTypSubNo", OldName = @"NTypSubNr", Pos = 38, Length = 3)]
        public short NSubTypeNo { get; set; }

        /// <summary>
        /// Sorting within the primary type
        /// </summary>
        [TecdocField(Name = @"SortNo", OldName = @"SortNr", Pos = 41, Length = 3)]
        public short SortNo { get; set; }

        /// <summary>
        /// Description of the CV secondary type
        /// </summary>
        [TecdocField(Name = @"Term", OldName = @"Bez", Pos = 44, Length = 60)]
        [StringLength(60)]
        public string? SubtypeTrim { get; set; }

        /// <summary>
        /// Model Year from (YYYYMM) – Production Date
        /// </summary>
        [TecdocField(Name = @"ModYFrom", OldName = @"BJvon", Pos = 104, Length = 6)]
        public int? DateFromYYYYMM { get; set; }

        /// <summary>
        /// Model Year to (YYYYMM) – Production Date
        /// </summary>
        [TecdocField(Name = @"ModYTo", OldName = @"BJbis", Pos = 110, Length = 6)]
        public int? DateToYYYYMM { get; set; }

        #region Equality using primary key

        public bool Equals(T535? other)
            => other != null && NTypeNo.Equals(other.NTypeNo) && NSubTypeNo.Equals(other.NSubTypeNo);

        public override bool Equals(object? obj)
            => obj is T535 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(NTypeNo);
            hash.Add(NSubTypeNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Inclusion of certain countries for CV secondary types
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T536 : IEquatable<T536>
    {
        /// <summary>
        /// Constantly blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserved", Pos = 0, Length = 22)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant =536
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 536;

        /// <summary>
        /// Unambiguous number of the CV primary type (-&gt;532)
        /// </summary>
        [TecdocField(Name = @"NTypNo", OldName = @"NTypNr", Pos = 29, Length = 9)]
        public int NTypeNo { get; set; }

        /// <summary>
        /// Unambiguous number of the secondary type within a primary type (-&gt;535)
        /// </summary>
        [TecdocField(Name = @"NTypSubNo", OldName = @"NTypSubNr", Pos = 38, Length = 3)]
        public short NSubTypeNo { get; set; }

        /// <summary>
        /// Country Code (-&gt; 010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"LKZ", Pos = 41, Length = 3)]
        [Required]
        [StringLength(3)]
        public string CountryCode { get; set; } = default!;

        /// <summary>
        /// ‘1’ = Country Code is an exclusion, ‘0’ = Country Code is an inclusion.
        /// </summary>
        [TecdocField(Name = @"Exclude", OldName = @"Exclude", Pos = 44, Length = 1)]
        public bool Exclude { get; set; }

        #region Equality using primary key

        public bool Equals(T536? other)
            => other != null && NTypeNo.Equals(other.NTypeNo) && NSubTypeNo.Equals(other.NSubTypeNo) && StringComparer.InvariantCultureIgnoreCase.Equals(CountryCode, other.CountryCode);

        public override bool Equals(object? obj)
            => obj is T536 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(NTypeNo);
            hash.Add(NSubTypeNo);
            hash.Add(CountryCode, StringComparer.InvariantCultureIgnoreCase);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Allocation of engine numbers to CV primary and secondary types
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T537 : IEquatable<T537>
    {
        /// <summary>
        /// Constantly blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserviert", Pos = 0, Length = 22)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant= 537
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 537;

        /// <summary>
        /// Unambiguous number of the CV primary type (-&gt;532)
        /// </summary>
        [TecdocField(Name = @"NTypNo", OldName = @"NTypNr", Pos = 29, Length = 9)]
        public int NTypeNo { get; set; }

        /// <summary>
        /// Unambiguous number of the secondary type within a primary type (-&gt;535)
        /// </summary>
        [TecdocField(Name = @"NTypSubNo", OldName = @"NTypSubNr", Pos = 38, Length = 3)]
        public short NSubTypeNo { get; set; }

        /// <summary>
        /// Sequential number within a NTypNo-NTypSubNo combination.
        /// </summary>
        [TecdocField(Name = @"SeqNo", OldName = @"LfdNr", Pos = 41, Length = 3)]
        public short SeqNo { get; set; }

        /// <summary>
        /// Engine Number (-&gt; 155)
        /// </summary>
        [TecdocField(Name = @"EngNo", OldName = @"MotNr", Pos = 44, Length = 5)]
        public int EngineNo { get; set; }

        /// <summary>
        /// Model Year from (YYYYMM) – Production Date
        /// </summary>
        [TecdocField(Name = @"ModYFrom", OldName = @"BJvon", Pos = 49, Length = 6)]
        public int? DateFromYYYYMM { get; set; }

        /// <summary>
        /// Model Year to (YYYYMM) – Production Date
        /// </summary>
        [TecdocField(Name = @"ModYTo", OldName = @"BJbis", Pos = 55, Length = 6)]
        public int? DateToYYYYMM { get; set; }

        /// <summary>
        /// Country Code (-&gt; 010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"LKZ", Pos = 61, Length = 3)]
        [StringLength(3)]
        public string? CountryCode { get; set; }

        /// <summary>
        /// ‘1’ = Country Code is an exclusion, ‘0’ = Country Code is an inclusion.
        /// </summary>
        [TecdocField(Name = @"Exclude", OldName = @"Exclude", Pos = 64, Length = 1)]
        public bool? Exclude { get; set; }

        #region Equality using primary key

        public bool Equals(T537? other)
            => other != null && NTypeNo.Equals(other.NTypeNo) && NSubTypeNo.Equals(other.NSubTypeNo) && SeqNo.Equals(other.SeqNo);

        public override bool Equals(object? obj)
            => obj is T537 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(NTypeNo);
            hash.Add(NSubTypeNo);
            hash.Add(SeqNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// The allocation of CV primary and secondary types to manufacturer ID numbers
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T538 : IEquatable<T538>
    {
        /// <summary>
        /// Constantly blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserviert", Pos = 0, Length = 22)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant =538
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 538;

        /// <summary>
        /// Unambiguous number of the CV primary type (-&gt;532)
        /// </summary>
        [TecdocField(Name = @"NTypNo", OldName = @"NTypNr", Pos = 29, Length = 9)]
        public int NTypeNo { get; set; }

        /// <summary>
        /// Unambiguous number of the secondary type within a primary type (-&gt;535)
        /// </summary>
        [TecdocField(Name = @"NTypSubNo", OldName = @"NTypSubNr", Pos = 38, Length = 3)]
        public short NSubTypeNo { get; set; }

        /// <summary>
        /// Manufacturer ID Number (-&gt; 554)
        /// </summary>
        [TecdocField(Name = @"ManIDNo", OldName = @"HerIDNr", Pos = 41, Length = 5)]
        public int ManIdNo { get; set; }

        #region Equality using primary key

        public bool Equals(T538? other)
            => other != null && NTypeNo.Equals(other.NTypeNo) && NSubTypeNo.Equals(other.NSubTypeNo) && ManIdNo.Equals(other.ManIdNo);

        public override bool Equals(object? obj)
            => obj is T538 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(NTypeNo);
            hash.Add(NSubTypeNo);
            hash.Add(ManIdNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Inclusion of certain countries for the allocation of CV primary and secondary types to manufacturer ID numbers
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T539 : IEquatable<T539>
    {
        /// <summary>
        /// Constantly blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserviert", Pos = 0, Length = 22)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant =539
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 539;

        /// <summary>
        /// Unambiguous number of the CV primary type (-&gt;532)
        /// </summary>
        [TecdocField(Name = @"NTypNo", OldName = @"NTypNr", Pos = 29, Length = 9)]
        public int NTypeNo { get; set; }

        /// <summary>
        /// Unambiguous number of the secondary type within a primary type (-&gt;535)
        /// </summary>
        [TecdocField(Name = @"NTypSubNo", OldName = @"NTypSubNr", Pos = 38, Length = 3)]
        public short NSubTypeNo { get; set; }

        /// <summary>
        /// Manufacturer ID Number (-&gt; 554)
        /// </summary>
        [TecdocField(Name = @"ManIDNo", OldName = @"HerIDNr", Pos = 41, Length = 5)]
        public int ManIdNo { get; set; }

        /// <summary>
        /// Country Code (-&gt; 010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"LKZ", Pos = 46, Length = 3)]
        [Required]
        [StringLength(3)]
        public string CountryCode { get; set; } = default!;

        /// <summary>
        /// ‘1’ = Country Code is an exclusion, ‘0’ = Country Code is an inclusion.
        /// </summary>
        [TecdocField(Name = @"Exclude", OldName = @"Exclude", Pos = 49, Length = 1)]
        public bool Exclude { get; set; }

        #region Equality using primary key

        public bool Equals(T539? other)
            => other != null && NTypeNo.Equals(other.NTypeNo) && NSubTypeNo.Equals(other.NSubTypeNo) && ManIdNo.Equals(other.ManIdNo) && StringComparer.InvariantCultureIgnoreCase.Equals(CountryCode, other.CountryCode);

        public override bool Equals(object? obj)
            => obj is T539 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(NTypeNo);
            hash.Add(NSubTypeNo);
            hash.Add(ManIdNo);
            hash.Add(CountryCode, StringComparer.InvariantCultureIgnoreCase);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Allocation of different voltages for CV primary and secondary types and to manufacturer ID numbers.
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T540 : IEquatable<T540>
    {
        /// <summary>
        /// Constantly blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserviert", Pos = 0, Length = 22)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant =540
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 540;

        /// <summary>
        /// Unambiguous number of the CV primary type (-&gt;532)
        /// </summary>
        [TecdocField(Name = @"NTypNo", OldName = @"NTypNr", Pos = 29, Length = 9)]
        public int NTypeNo { get; set; }

        /// <summary>
        /// Unambiguous number of the secondary types within a primary type (-&gt;535)
        /// </summary>
        [TecdocField(Name = @"NTypSubNo", OldName = @"NTypSubNr", Pos = 38, Length = 3)]
        public short NSubTypeNo { get; set; }

        /// <summary>
        /// Sequential number within a NTypNo-NTypSubNo combination.
        /// </summary>
        [TecdocField(Name = @"SeqNo", OldName = @"LfdNr", Pos = 41, Length = 2)]
        public byte SeqNo { get; set; }

        /// <summary>
        /// Main Current Voltage
        /// </summary>
        [TecdocField(Name = @"Volt", OldName = @"Volt", Pos = 43, Length = 2)]
        public byte Voltage { get; set; }

        /// <summary>
        /// Country Code (-&gt; 010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"LKZ", Pos = 45, Length = 3)]
        [StringLength(3)]
        public string? CountryCode { get; set; }

        /// <summary>
        /// ‘1’ = Country Code is an exclusion, ‘0’ = Country Code is an inclusion.
        /// </summary>
        [TecdocField(Name = @"Exclude", OldName = @"Exclude", Pos = 48, Length = 1)]
        public bool? Exclude { get; set; }

        #region Equality using primary key

        public bool Equals(T540? other)
            => other != null && NTypeNo.Equals(other.NTypeNo) && NSubTypeNo.Equals(other.NSubTypeNo) && SeqNo.Equals(other.SeqNo);

        public override bool Equals(object? obj)
            => obj is T540 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(NTypeNo);
            hash.Add(NSubTypeNo);
            hash.Add(SeqNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Description of all CV driver cabs
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T541 : IEquatable<T541>
    {
        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 0, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant =541
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 541;

        /// <summary>
        /// Unambiguous number of the driver cab
        /// </summary>
        [TecdocField(Name = @"DrivCabNo", OldName = @"FHausNr", Pos = 7, Length = 5)]
        public int DriverCabNo { get; set; }

        /// <summary>
        /// Unambiguous number of the driver cab manufacturer (-&gt;100)
        /// </summary>
        [TecdocField(Name = @"ManNo", OldName = @"HerNr", Pos = 12, Length = 6)]
        public int ManufacturerNo { get; set; }

        /// <summary>
        /// Unambiguous number of the CV model series to which the driver cab is allocated (-&gt;110)
        /// </summary>
        [TecdocField(Name = @"KModNo", OldName = @"KModNr", Pos = 18, Length = 5)]
        public int KModNo { get; set; }

        /// <summary>
        /// Cab Design
        /// </summary>
        [TecdocField(Name = @"CabDesign", OldName = @"Baumuster", Pos = 23, Length = 30)]
        [StringLength(30)]
        public string? CabDesign { get; set; }

        /// <summary>
        /// Description number (-&gt; 012) for the sales description
        /// </summary>
        [TecdocField(Name = @"CTermNo", OldName = @"LBezNr", Pos = 53, Length = 9)]
        public int NameCTermNo { get; set; }

        /// <summary>
        /// Constantly Blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserved", Pos = 62, Length = 21)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Driver Cab Size (-&gt; 69)
        /// </summary>
        [TecdocField(Name = @"Size", OldName = @"Size", Pos = 83, Length = 3)]
        public short? Size { get; set; }

        /// <summary>
        /// Model Year from (YYYYMM) – Production Date
        /// </summary>
        [TecdocField(Name = @"ModYFrom", OldName = @"BJvon", Pos = 86, Length = 6)]
        public int? DateFromYYYYMM { get; set; }

        /// <summary>
        /// Model Year to (YYYYMM) – Production Date
        /// </summary>
        [TecdocField(Name = @"ModYTo", OldName = @"BJbis", Pos = 92, Length = 6)]
        public int? DateToYYYYMM { get; set; }

        /// <summary>
        /// Driver cab length in mm
        /// </summary>
        [TecdocField(Name = @"Length", OldName = @"Length", Pos = 98, Length = 7)]
        public int? Length { get; set; }

        /// <summary>
        /// Driver cab height in mm
        /// </summary>
        [TecdocField(Name = @"Height", OldName = @"Height", Pos = 105, Length = 7)]
        public int? Height { get; set; }

        /// <summary>
        /// Driver cab width in mm
        /// </summary>
        [TecdocField(Name = @"Width", OldName = @"Width", Pos = 112, Length = 7)]
        public int? Width { get; set; }

        /// <summary>
        /// 1: Criterion is proposed for deletion, otherwise 0
        /// </summary>
        [TecdocField(Name = @"Delete", OldName = @"Delete", Pos = 119, Length = 1)]
        public bool Delete { get; set; }

        #region Equality using primary key

        public bool Equals(T541? other)
            => other != null && DriverCabNo.Equals(other.DriverCabNo);

        public override bool Equals(object? obj)
            => obj is T541 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(DriverCabNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Inclusion of certain countries for a CV driver cab
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T542 : IEquatable<T542>
    {
        /// <summary>
        /// Constantly blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserviert", Pos = 0, Length = 22)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant =524
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 542;

        /// <summary>
        /// Unambiguous number of the driver cab (-&gt;541)
        /// </summary>
        [TecdocField(Name = @"DrivCabNo", OldName = @"FHausNr", Pos = 29, Length = 5)]
        public int DriverCabNo { get; set; }

        /// <summary>
        /// Country Code (-&gt; 010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"LKZ", Pos = 34, Length = 3)]
        [Required]
        [StringLength(3)]
        public string CountryCode { get; set; } = default!;

        /// <summary>
        /// ‘1’ = Country Code is an exclusion, ‘0’ = Country Code is an inclusion.
        /// </summary>
        [TecdocField(Name = @"Exclude", OldName = @"Exclude", Pos = 37, Length = 1)]
        public bool Exclude { get; set; }

        #region Equality using primary key

        public bool Equals(T542? other)
            => other != null && DriverCabNo.Equals(other.DriverCabNo) && StringComparer.InvariantCultureIgnoreCase.Equals(CountryCode, other.CountryCode);

        public override bool Equals(object? obj)
            => obj is T542 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(DriverCabNo);
            hash.Add(CountryCode, StringComparer.InvariantCultureIgnoreCase);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// The allocation of driver cabs to CV primary and secondary types
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T543 : IEquatable<T543>
    {
        /// <summary>
        /// Constantly blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserviert", Pos = 0, Length = 22)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant =543
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 543;

        /// <summary>
        /// Unambiguous number of the CV primary type (-&gt;532)
        /// </summary>
        [TecdocField(Name = @"NTypNo", OldName = @"NTypNr", Pos = 29, Length = 9)]
        public int NTypeNo { get; set; }

        /// <summary>
        /// Unambiguous number of the secondary type within a primary type (-&gt;535)
        /// </summary>
        [TecdocField(Name = @"NTypSubNo", OldName = @"NTypSubNr", Pos = 38, Length = 3)]
        public short NSubTypeNo { get; set; }

        /// <summary>
        /// Sequential number within a NTypNo-NTypSubNo combination.
        /// </summary>
        [TecdocField(Name = @"SeqNo", OldName = @"LfdNr", Pos = 41, Length = 2)]
        public byte SeqNo { get; set; }

        /// <summary>
        /// Unambiguous number of the driver cab (-&gt;541)
        /// </summary>
        [TecdocField(Name = @"DrivCabNo", OldName = @"FHausNr", Pos = 43, Length = 5)]
        public int DriverCabNo { get; set; }

        /// <summary>
        /// Model Year from (YYYYMM) – Production Date
        /// </summary>
        [TecdocField(Name = @"ModYFrom", OldName = @"Bjvon", Pos = 48, Length = 6)]
        public int? DateFromYYYYMM { get; set; }

        /// <summary>
        /// Model Year to (YYYYMM) – Production Date
        /// </summary>
        [TecdocField(Name = @"ModYTo", OldName = @"Bjbis", Pos = 54, Length = 6)]
        public int? DateToYYYYMM { get; set; }

        /// <summary>
        /// Country Code (-&gt; 010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"LKZ", Pos = 60, Length = 3)]
        [StringLength(3)]
        public string? CountryCode { get; set; }

        /// <summary>
        /// ‘1’ = Country Code is an exclusion, ‘0’ = Country Code is an inclusion.
        /// </summary>
        [TecdocField(Name = @"Exclude", OldName = @"Exclude", Pos = 63, Length = 1)]
        public bool? Exclude { get; set; }

        #region Equality using primary key

        public bool Equals(T543? other)
            => other != null && NTypeNo.Equals(other.NTypeNo) && NSubTypeNo.Equals(other.NSubTypeNo) && SeqNo.Equals(other.SeqNo);

        public override bool Equals(object? obj)
            => obj is T543 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(NTypeNo);
            hash.Add(NSubTypeNo);
            hash.Add(SeqNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Description of all transmissions
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T544 : IEquatable<T544>
    {
        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 0, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant =544
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 544;

        /// <summary>
        /// Unambiguous number of the transmission
        /// </summary>
        [TecdocField(Name = @"TransmNo", OldName = @"GetrNr", Pos = 7, Length = 5)]
        public int TransmissionNo { get; set; }

        /// <summary>
        /// Unambiguous number of the transmission manufacturer (-&gt;100)
        /// </summary>
        [TecdocField(Name = @"ManNo", OldName = @"HerNr", Pos = 12, Length = 6)]
        public int ManufacturerNo { get; set; }

        /// <summary>
        /// Transmission Code
        /// </summary>
        [TecdocField(Name = @"Code", OldName = @"Code", Pos = 18, Length = 30)]
        [Required]
        [StringLength(30)]
        public string Code { get; set; } = default!;

        /// <summary>
        /// Transmission Type (KT 85)
        /// </summary>
        [TecdocField(Name = @"TransmType", OldName = @"GetrArt", Pos = 48, Length = 3)]
        public short? TransmissionTypeKey { get; set; }

        /// <summary>
        /// Model Year from (YYYYMM) – Production Date
        /// </summary>
        [TecdocField(Name = @"ModYFrom", OldName = @"Bjvon", Pos = 51, Length = 6)]
        public int? DateFromYYYYMM { get; set; }

        /// <summary>
        /// Model Year to (YYYYMM) – Production Date
        /// </summary>
        [TecdocField(Name = @"ModYTo", OldName = @"Bjbis", Pos = 57, Length = 6)]
        public int? DateToYYYYMM { get; set; }

        /// <summary>
        /// Transmission Ratio Minimum
        /// </summary>
        [TecdocField(Name = @"TrMin", OldName = @"Trmin", Pos = 63, Length = 5)]
        public int? RatioMin { get; set; }

        /// <summary>
        /// Transmission Ratio Maximum
        /// </summary>
        [TecdocField(Name = @"TrMax", OldName = @"Trmax", Pos = 68, Length = 5)]
        public int? RatioMax { get; set; }

        /// <summary>
        /// Transmission Ratio Reverse
        /// </summary>
        [TecdocField(Name = @"TrInv", OldName = @"Trinv", Pos = 73, Length = 5)]
        public int? RatioReverse { get; set; }

        /// <summary>
        /// Transmission ID
        /// </summary>
        [TecdocField(Name = @"TransmID", OldName = @"ID", Pos = 78, Length = 10)]
        [StringLength(10)]
        public string? TransmissionId { get; set; }

        /// <summary>
        /// Number of gearbox speeds
        /// </summary>
        [TecdocField(Name = @"Speeds", OldName = @"Gaenge", Pos = 88, Length = 2)]
        public byte? GearboxSpeeds { get; set; }

        #region Equality using primary key

        public bool Equals(T544? other)
            => other != null && TransmissionNo.Equals(other.TransmissionNo);

        public override bool Equals(object? obj)
            => obj is T544 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(TransmissionNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Inclusion of certain countries for a transmission
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T545 : IEquatable<T545>
    {
        /// <summary>
        /// Constantly blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserviert", Pos = 0, Length = 22)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant =545
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 545;

        /// <summary>
        /// Unambiguous number of the transmission (-&gt;544)
        /// </summary>
        [TecdocField(Name = @"TransmNo", OldName = @"GetrNr", Pos = 29, Length = 5)]
        public int TransmissionNo { get; set; }

        /// <summary>
        /// Country Code (-&gt; 010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"LKZ", Pos = 34, Length = 3)]
        [Required]
        [StringLength(3)]
        public string CountryCode { get; set; } = default!;

        /// <summary>
        /// ‘1’ = Country Code is an exclusion, ‘0’ = Country Code is an inclusion.
        /// </summary>
        [TecdocField(Name = @"Exclude", OldName = @"Exclude", Pos = 37, Length = 1)]
        public bool Exclude { get; set; }

        #region Equality using primary key

        public bool Equals(T545? other)
            => other != null && TransmissionNo.Equals(other.TransmissionNo) && StringComparer.InvariantCultureIgnoreCase.Equals(CountryCode, other.CountryCode);

        public override bool Equals(object? obj)
            => obj is T545 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(TransmissionNo);
            hash.Add(CountryCode, StringComparer.InvariantCultureIgnoreCase);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// The allocation of transmissions to CV primary and secondary types
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T546 : IEquatable<T546>
    {
        /// <summary>
        /// Constantly blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserviert", Pos = 0, Length = 22)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant =546
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 546;

        /// <summary>
        /// Unambiguous number of the CV primary type (-&gt;532)
        /// </summary>
        [TecdocField(Name = @"NTypNo", OldName = @"NTypNr", Pos = 29, Length = 9)]
        public int NTypeNo { get; set; }

        /// <summary>
        /// Unambiguous number of the secondary type within a primary type (-&gt;535)
        /// </summary>
        [TecdocField(Name = @"NTypSubNo", OldName = @"NTypSubNr", Pos = 38, Length = 3)]
        public short NSubTypeNo { get; set; }

        /// <summary>
        /// Sequential number within a NTypNr-NTypSubNr combination.
        /// </summary>
        [TecdocField(Name = @"SeqNo", OldName = @"LfdNr", Pos = 41, Length = 2)]
        public byte SeqNo { get; set; }

        /// <summary>
        /// Unambiguous number of the transmission (-&gt;544)
        /// </summary>
        [TecdocField(Name = @"TransmNo", OldName = @"GetrNr", Pos = 43, Length = 5)]
        public int TransmissionNo { get; set; }

        /// <summary>
        /// Model Year from (YYYYMM) – Production Date
        /// </summary>
        [TecdocField(Name = @"ModYFrom", OldName = @"Bjvon", Pos = 48, Length = 6)]
        public int? DateFromYYYYMM { get; set; }

        /// <summary>
        /// Model Year to (YYYYMM) – Production Date
        /// </summary>
        [TecdocField(Name = @"ModYTo", OldName = @"Bjbis", Pos = 54, Length = 6)]
        public int? DateToYYYYMM { get; set; }

        /// <summary>
        /// Country Code (-&gt; 010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"LKZ", Pos = 60, Length = 3)]
        [StringLength(3)]
        public string? CountryCode { get; set; }

        /// <summary>
        /// ‘1’ = Country Code is an exclusion, ‘0’ = Country Code is an inclusion.
        /// </summary>
        [TecdocField(Name = @"Exclude", OldName = @"Exclude", Pos = 63, Length = 1)]
        public bool? Exclude { get; set; }

        #region Equality using primary key

        public bool Equals(T546? other)
            => other != null && NTypeNo.Equals(other.NTypeNo) && NSubTypeNo.Equals(other.NSubTypeNo) && SeqNo.Equals(other.SeqNo);

        public override bool Equals(object? obj)
            => obj is T546 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(NTypeNo);
            hash.Add(NSubTypeNo);
            hash.Add(SeqNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Allocation of wheelbase information to CV primary and secondary types
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T550 : IEquatable<T550>
    {
        /// <summary>
        /// Constantly blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserviert", Pos = 0, Length = 22)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant =550
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 550;

        /// <summary>
        /// Unambiguous number of the CV primary type (-&gt;532)
        /// </summary>
        [TecdocField(Name = @"NTypNo", OldName = @"NTypNr", Pos = 29, Length = 9)]
        public int NTypeNo { get; set; }

        /// <summary>
        /// Unambiguous number of the secondary type within a primary type (-&gt;535)
        /// </summary>
        [TecdocField(Name = @"NTypSubNo", OldName = @"NTypSubNr", Pos = 38, Length = 3)]
        public short NSubTypeNo { get; set; }

        /// <summary>
        /// Sequential number within a NTypNr-NTypSubNr combination.
        /// </summary>
        [TecdocField(Name = @"SeqNo", OldName = @"LfdNr", Pos = 41, Length = 2)]
        public byte SeqNo { get; set; }

        /// <summary>
        /// Wheelbase in mm
        /// </summary>
        [TecdocField(Name = @"WheelBase", OldName = @"Radstand", Pos = 43, Length = 6)]
        public int Wheelbase { get; set; }

        /// <summary>
        /// Axle Position (KT 064)
        /// </summary>
        [TecdocField(Name = @"AxlePos", OldName = @"AchsPos", Pos = 49, Length = 3)]
        public short AxlePositionKey { get; set; }

        /// <summary>
        /// Country Code (-&gt; 010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"LKZ", Pos = 52, Length = 3)]
        [StringLength(3)]
        public string? CountryCode { get; set; }

        /// <summary>
        /// ‘1’ = Country Code is an exclusion, ‘0’ = Country Code is an inclusion.
        /// </summary>
        [TecdocField(Name = @"Exclude", OldName = @"Exclude", Pos = 55, Length = 1)]
        public bool? Exclude { get; set; }

        #region Equality using primary key

        public bool Equals(T550? other)
            => other != null && NTypeNo.Equals(other.NTypeNo) && NSubTypeNo.Equals(other.NSubTypeNo) && SeqNo.Equals(other.SeqNo);

        public override bool Equals(object? obj)
            => obj is T550 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(NTypeNo);
            hash.Add(NSubTypeNo);
            hash.Add(SeqNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Allocation of suspension to CV primary and secondary types
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T551 : IEquatable<T551>
    {
        /// <summary>
        /// Constantly blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserviert", Pos = 0, Length = 22)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant =551
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 551;

        /// <summary>
        /// Unambiguous number of the CV primary type (-&gt;532)
        /// </summary>
        [TecdocField(Name = @"NTypNo", OldName = @"NTypNr", Pos = 29, Length = 9)]
        public int NTypeNo { get; set; }

        /// <summary>
        /// Unambiguous number of the Secondary types within a primary type (-&gt;535)
        /// </summary>
        [TecdocField(Name = @"NTypSubNo", OldName = @"NTypSubNr", Pos = 38, Length = 3)]
        public short NSubTypeNo { get; set; }

        /// <summary>
        /// Sequential number within a NTypNr-NTypSubNr combination.
        /// </summary>
        [TecdocField(Name = @"SeqNo", OldName = @"LfdNr", Pos = 41, Length = 2)]
        public byte SeqNo { get; set; }

        /// <summary>
        /// Suspension Type (KT 066)
        /// </summary>
        [TecdocField(Name = @"SuspType", OldName = @"FederNr", Pos = 43, Length = 3)]
        public short SuspensionTypeKey { get; set; }

        /// <summary>
        /// Axle Position (KT 064)
        /// </summary>
        [TecdocField(Name = @"AxlePos", OldName = @"AchsPos", Pos = 46, Length = 3)]
        public short AxlePositionKey { get; set; }

        /// <summary>
        /// Country Code (-&gt; 010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"LKZ", Pos = 49, Length = 3)]
        [StringLength(3)]
        public string? CountryCode { get; set; }

        /// <summary>
        /// ‘1’ = Country Code is an exclusion, ‘0’ = Country Code is an inclusion.
        /// </summary>
        [TecdocField(Name = @"Exclude", OldName = @"Exclude", Pos = 52, Length = 1)]
        public bool? Exclude { get; set; }

        #region Equality using primary key

        public bool Equals(T551? other)
            => other != null && NTypeNo.Equals(other.NTypeNo) && NSubTypeNo.Equals(other.NSubTypeNo) && SeqNo.Equals(other.SeqNo);

        public override bool Equals(object? obj)
            => obj is T551 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(NTypeNo);
            hash.Add(NSubTypeNo);
            hash.Add(SeqNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Allocation of tyres to CV primary and secondary types
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T552 : IEquatable<T552>
    {
        /// <summary>
        /// Constantly blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserviert", Pos = 0, Length = 22)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant =552
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 552;

        /// <summary>
        /// Unambiguous number of the CV primary type (-&gt;532)
        /// </summary>
        [TecdocField(Name = @"NTypNo", OldName = @"NTypNr", Pos = 29, Length = 9)]
        public int NTypeNo { get; set; }

        /// <summary>
        /// Unambiguous number of the secondary type within a primary type (-&gt;535)
        /// </summary>
        [TecdocField(Name = @"NTypSubNo", OldName = @"NTypSubNr", Pos = 38, Length = 3)]
        public short NSubTypeNo { get; set; }

        /// <summary>
        /// Sequential number within a NTypNr-NTypSubNr combination.
        /// </summary>
        [TecdocField(Name = @"SeqNo", OldName = @"LfdNr", Pos = 41, Length = 2)]
        public byte SeqNo { get; set; }

        /// <summary>
        /// Tyres (KT 060)
        /// </summary>
        [TecdocField(Name = @"TyreType", OldName = @"ReifenNr", Pos = 43, Length = 3)]
        public short TyresKey { get; set; }

        /// <summary>
        /// Axle Position (KT 064)
        /// </summary>
        [TecdocField(Name = @"AxlePos", OldName = @"AchsPos", Pos = 46, Length = 3)]
        public short AxlePositionKey { get; set; }

        /// <summary>
        /// Country Code (-&gt; 010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"LKZ", Pos = 49, Length = 3)]
        [StringLength(3)]
        public string? CountryCode { get; set; }

        /// <summary>
        /// ‘1’ = Country Code is an exclusion, ‘0’ = Country Code is an inclusion.
        /// </summary>
        [TecdocField(Name = @"Exclude", OldName = @"Exclude", Pos = 52, Length = 1)]
        public bool? Exclude { get; set; }

        #region Equality using primary key

        public bool Equals(T552? other)
            => other != null && NTypeNo.Equals(other.NTypeNo) && NSubTypeNo.Equals(other.NSubTypeNo) && SeqNo.Equals(other.SeqNo);

        public override bool Equals(object? obj)
            => obj is T552 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(NTypeNo);
            hash.Add(NSubTypeNo);
            hash.Add(SeqNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Allocation of the chassis to CV primary and secondary types
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T553 : IEquatable<T553>
    {
        /// <summary>
        /// Constantly blank
        /// </summary>
        [TecdocField(Name = @"Reserved", OldName = @"Reserviert", Pos = 0, Length = 22)]
        //[NotMapped]
        public string _Reserved => "";

        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 22, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant =553
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 26, Length = 3)]
        //[NotMapped]
        public short _TableNo => 553;

        /// <summary>
        /// Unambiguous number of the CV primary type (-&gt;532)
        /// </summary>
        [TecdocField(Name = @"NTypNo", OldName = @"NTypNr", Pos = 29, Length = 9)]
        public int NTypeNo { get; set; }

        /// <summary>
        /// Unambiguous number of the secondary type within a primary type (-&gt;535)
        /// </summary>
        [TecdocField(Name = @"NTypSubNo", OldName = @"NTypSubNr", Pos = 38, Length = 3)]
        public short NSubTypeNo { get; set; }

        /// <summary>
        /// Sequential number within a NTypNr-NTypSubNr combination.
        /// </summary>
        [TecdocField(Name = @"SeqNo", OldName = @"LfdNr", Pos = 41, Length = 2)]
        public byte SeqNo { get; set; }

        /// <summary>
        /// Chassis
        /// </summary>
        [TecdocField(Name = @"Chassis", OldName = @"Prefix", Pos = 43, Length = 10)]
        [Required]
        [StringLength(10)]
        public string Chassis { get; set; } = default!;

        /// <summary>
        /// Country Code (-&gt; 010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"LKZ", Pos = 53, Length = 3)]
        [StringLength(3)]
        public string? CountryCode { get; set; }

        /// <summary>
        /// ‘1’ = Country Code is an exclusion, ‘0’ = Country Code is an inclusion.
        /// </summary>
        [TecdocField(Name = @"Exclude", OldName = @"Exclude", Pos = 56, Length = 1)]
        public bool? Exclude { get; set; }

        #region Equality using primary key

        public bool Equals(T553? other)
            => other != null && NTypeNo.Equals(other.NTypeNo) && NSubTypeNo.Equals(other.NSubTypeNo) && SeqNo.Equals(other.SeqNo);

        public override bool Equals(object? obj)
            => obj is T553 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(NTypeNo);
            hash.Add(NSubTypeNo);
            hash.Add(SeqNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Allocation of the CV Producer-IDs
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T554 : IEquatable<T554>
    {
        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 0, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant =554
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 554;

        /// <summary>
        /// Unambiguous number of the CV Producer-ID-Number
        /// </summary>
        [TecdocField(Name = @"ManIDNo", OldName = @"HerIDNr", Pos = 7, Length = 5)]
        public int ManIdNo { get; set; }

        /// <summary>
        /// Number of the CV Producer (-&gt;100)
        /// </summary>
        [TecdocField(Name = @"ManNo", OldName = @"HerNr", Pos = 12, Length = 6)]
        public int ManufacturerNo { get; set; }

        /// <summary>
        /// CV Producer-ID
        /// </summary>
        [TecdocField(Name = @"ManID", OldName = @"HerID", Pos = 18, Length = 20)]
        [Required]
        [StringLength(20)]
        public string ManId { get; set; } = default!;

        /// <summary>
        /// 1: CV Producer-ID is proposed for deletion, otherwise 0
        /// </summary>
        [TecdocField(Name = @"Delete", OldName = @"Delete", Pos = 38, Length = 1)]
        public bool Delete { get; set; }

        #region Equality using primary key

        public bool Equals(T554? other)
            => other != null && ManIdNo.Equals(other.ManIdNo);

        public override bool Equals(object? obj)
            => obj is T554 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(ManIdNo);
            return hash.ToHashCode();
        }

        #endregion
    }

    /// <summary>
    /// Includes of specivied countrys one CV Producer-IDs
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    public partial class T555 : IEquatable<T555>
    {
        /// <summary>
        /// Data Supplier Number Constant = 9999
        /// </summary>
        [TecdocField(Name = @"BrandNo", OldName = @"DLNr", Pos = 0, Length = 4)]
        //[NotMapped]
        public short _BrandNo => 9999;

        /// <summary>
        /// Data Table Constant =555
        /// </summary>
        [TecdocField(Name = @"TableNo", OldName = @"SA", Pos = 4, Length = 3)]
        //[NotMapped]
        public short _TableNo => 555;

        /// <summary>
        /// Unambiguous number of the CV Producer-ID-Number (-&gt; 554)
        /// </summary>
        [TecdocField(Name = @"ManIDNo", OldName = @"HerIDNr", Pos = 7, Length = 5)]
        public int ManIdNo { get; set; }

        /// <summary>
        /// Number of the CV Producer (-&gt;010)
        /// </summary>
        [TecdocField(Name = @"CountryCode", OldName = @"LKZ", Pos = 12, Length = 3)]
        [Required]
        [StringLength(3)]
        public string CountryCode { get; set; } = default!;

        /// <summary>
        /// ‘1’ = Country Code is an exclusion, ‘0’ = Country Code is an inclusion.
        /// </summary>
        [TecdocField(Name = @"Exclude", OldName = @"Exclude", Pos = 15, Length = 1)]
        public bool Exclude { get; set; }

        #region Equality using primary key

        public bool Equals(T555? other)
            => other != null && ManIdNo.Equals(other.ManIdNo) && StringComparer.InvariantCultureIgnoreCase.Equals(CountryCode, other.CountryCode);

        public override bool Equals(object? obj)
            => obj is T555 other && Equals(other);

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(ManIdNo);
            hash.Add(CountryCode, StringComparer.InvariantCultureIgnoreCase);
            return hash.ToHashCode();
        }

        #endregion
    }

}
